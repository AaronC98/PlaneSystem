# 29 "parsers/why_lexer.mll"
 
  [@@@ocaml.warning "-33"]
  open AltErgoLib
  open Options

  open Lexing
  open Why_parser

  let assoc_keyword =
    let tbl : (string, Why_parser.token) Hashtbl.t = Hashtbl.create 256 in
    let kw_list =
      [
        "ac"         , AC;
        "and"        , AND;
        "axiom"      , AXIOM;
        "bitv"       , BITV;
        "bool"       , BOOL;
        "case_split" , CASESPLIT;
        "check"      , CHECK;
        "cut"        , CUT;
        "distinct"   , DISTINCT;
        "else"       , ELSE;
        "end"        , END;
        "exists"     , EXISTS;
        "extends"    , EXTENDS;
        "false"      , FALSE;
        "forall"     , FORALL;
        "function"   , FUNC;
        "goal"       , GOAL;
        "if"         , IF;
        "in"         , IN;
        "int"        , INT;
        "let"        , LET;
        "logic"      , LOGIC;
        "not"        , NOT;
        "or"         , OR;
        "xor"         , XOR;
        "predicate"  , PRED;
        "prop"       , PROP;
        "real"       , REAL;
        "rewriting"  , REWRITING;
        "then"       , THEN;
        "theory"     , THEORY;
        "true"       , TRUE;
        "type"       , TYPE;
        "unit"       , UNIT;
        "void"       , VOID;
        "match"      , MATCH;
        "with"       , WITH;
        "of"         , OF;
      ]
    in
    List.iter (fun (s, kw) -> Hashtbl.add tbl s kw) kw_list;
    fun tok -> Hashtbl.find tbl tok

  let mk_new_line lexbuf =
    let p = lexbuf.lex_curr_p in
    let p = { p with pos_lnum = p.pos_lnum + 1; pos_bol = p.pos_cnum } in
    lexbuf.lex_curr_p <- p

  let escaped_char = function
    | 'n' -> '\n'
    | 'r' -> '\r'
    | 't' -> '\t'
    | c -> c

  let n_zero = Num.Int 0
  let n_ten = Num.Int 10
  let n_16 = Num.Int 16

  let decimal_number s =
    let r = ref n_zero in
    for i=0 to String.length s - 1 do
      r := Num.add_num (Num.mult_num n_ten !r)
          (Num.num_of_int (Char.code s.[i] - Char.code '0'))
    done;
    !r

  let hexa_number s =
    let r = ref n_zero in
    for i=0 to String.length s - 1 do
      let c = s.[i] in
      let v =
        match c with
        | '0'..'9' -> Char.code c - Char.code '0'
        | 'a'..'f' -> Char.code c - Char.code 'a' + 10
        | 'A'..'F' -> Char.code c - Char.code 'A' + 10
        | _ -> assert false
      in
      r := Num.add_num (Num.mult_num n_16 !r) (Num.num_of_int v)
    done;
    !r


# 97 "parsers/why_lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\214\255\215\255\216\255\218\255\047\000\220\255\221\255\
    \222\255\223\255\224\255\226\255\227\255\228\255\229\255\231\255\
    \035\000\237\255\081\000\065\000\241\255\242\255\244\255\245\255\
    \246\255\086\000\081\000\098\000\120\000\194\000\252\000\006\000\
    \255\255\080\001\155\001\131\000\153\000\108\000\163\000\183\001\
    \193\001\215\001\174\000\225\001\235\001\247\001\003\002\036\002\
    \068\002\101\002\133\002\143\002\153\002\163\002\173\002\195\002\
    \205\002\215\002\247\255\240\255\232\255\235\255\077\000\238\255\
    \233\255\078\000\217\255\080\001\251\255\252\255\253\255\099\000\
    \104\000\255\255\254\255\040\002\251\255\252\255\253\255\002\000\
    \255\255\254\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\036\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \021\000\255\255\019\000\025\000\255\255\255\255\255\255\255\255\
    \255\255\012\000\030\000\005\000\005\000\004\000\002\000\001\000\
    \255\255\003\000\255\255\006\000\255\255\006\000\255\255\255\255\
    \006\000\255\255\006\000\255\255\006\000\255\255\255\255\255\255\
    \255\255\255\255\007\000\255\255\007\000\255\255\006\000\255\255\
    \006\000\255\255\255\255\255\255\255\255\255\255\016\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\004\000\
    \004\000\255\255\255\255\255\255\255\255\255\255\255\255\004\000\
    \255\255\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\000\000\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\255\255\000\000\068\000\000\000\000\000\000\000\255\255\
    \255\255\000\000\000\000\076\000\000\000\000\000\000\000\081\000\
    \000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\031\000\032\000\000\000\000\000\031\000\000\000\031\000\
    \000\000\000\000\000\000\031\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \031\000\000\000\003\000\010\000\000\000\012\000\031\000\024\000\
    \025\000\021\000\014\000\015\000\023\000\019\000\026\000\013\000\
    \028\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\020\000\022\000\018\000\017\000\016\000\030\000\
    \011\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\009\000\065\000\008\000\004\000\029\000\
    \064\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\007\000\005\000\006\000\062\000\059\000\
    \058\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\063\000\066\000\074\000\061\000\060\000\
    \035\000\073\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\035\000\036\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\000\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\036\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\038\000\000\000\038\000\036\000\
    \039\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\036\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \039\000\029\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \034\000\000\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\000\000\000\000\000\000\000\000\
    \002\000\029\000\255\255\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\000\000\000\000\000\000\
    \000\000\029\000\000\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\000\000\
    \000\000\000\000\070\000\033\000\000\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \071\000\000\000\072\000\000\000\000\000\000\000\000\000\000\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\000\000\000\000\000\000\000\000\000\000\033\000\
    \000\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\000\000\000\000\000\000\000\000\033\000\
    \000\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\046\000\046\000\046\000\046\000\046\000\
    \046\000\046\000\046\000\046\000\046\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\046\000\046\000\046\000\046\000\
    \046\000\046\000\045\000\000\000\045\000\000\000\000\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\000\000\046\000\046\000\046\000\046\000\
    \046\000\046\000\043\000\000\000\043\000\000\000\041\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\000\000\041\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\048\000\078\000\046\000\046\000\046\000\046\000\046\000\
    \046\000\046\000\046\000\046\000\046\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\046\000\046\000\046\000\046\000\
    \046\000\046\000\080\000\000\000\000\000\000\000\000\000\053\000\
    \069\000\053\000\000\000\047\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\046\000\046\000\046\000\046\000\
    \046\000\046\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\047\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\079\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\000\000\000\000\000\000\000\000\000\000\
    \051\000\000\000\051\000\000\000\049\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\049\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\057\000\000\000\
    \057\000\000\000\055\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\000\000\055\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \077\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\000\000\255\255\031\000\
    \255\255\255\255\255\255\031\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\000\000\000\000\255\255\000\000\031\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\
    \016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\018\000\019\000\
    \025\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\062\000\065\000\071\000\018\000\018\000\
    \027\000\072\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\028\000\027\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\255\255\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\028\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\036\000\255\255\036\000\027\000\
    \035\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\038\000\038\000\028\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \035\000\029\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \028\000\255\255\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\255\255\255\255\255\255\255\255\
    \000\000\029\000\079\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\255\255\255\255\255\255\
    \255\255\029\000\255\255\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\255\255\
    \255\255\255\255\067\000\030\000\255\255\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\033\000\
    \067\000\255\255\067\000\255\255\255\255\255\255\255\255\255\255\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\255\255\255\255\255\255\255\255\255\255\033\000\
    \255\255\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\255\255\255\255\255\255\255\255\033\000\
    \255\255\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\034\000\034\000\034\000\034\000\
    \034\000\034\000\039\000\255\255\039\000\255\255\255\255\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\255\255\034\000\034\000\034\000\034\000\
    \034\000\034\000\041\000\255\255\041\000\255\255\040\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\255\255\040\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\046\000\075\000\046\000\046\000\046\000\046\000\046\000\
    \046\000\046\000\046\000\046\000\046\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\046\000\046\000\046\000\046\000\
    \046\000\046\000\075\000\255\255\255\255\255\255\255\255\047\000\
    \067\000\047\000\255\255\046\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\046\000\046\000\046\000\046\000\
    \046\000\046\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\046\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\075\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\255\255\255\255\255\255\255\255\255\255\
    \049\000\255\255\049\000\255\255\048\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\048\000\048\000\048\000\
    \048\000\048\000\048\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\048\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\055\000\255\255\
    \055\000\255\255\054\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\255\255\054\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \075\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_base_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\010\000\022\000\044\000\000\000\000\000\000\000\
    \000\000\000\000\081\000\055\000\109\000\032\000\119\000\141\000\
    \151\000\173\000\183\000\193\000\205\000\215\000\227\000\000\000\
    \009\001\071\000\000\000\000\000\000\000\000\000\043\001\074\001\
    \084\001\097\001\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_backtrk_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\048\000\000\000\069\000\000\000\000\000\
    \048\000\000\000\069\000\000\000\069\000\000\000\000\000\000\000\
    \000\000\000\000\102\000\000\000\113\000\000\000\048\000\000\000\
    \069\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_default_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_trans_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\096\000\000\000\096\000\001\000\000\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\014\000\000\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\033\000\026\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\000\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\038\000\096\000\000\000\096\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\026\000\038\000\000\000\000\000\000\000\
    \000\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\038\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \061\000\000\000\061\000\000\000\038\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\000\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \061\000\000\000\061\000\000\000\000\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \061\000\000\000\061\000\000\000\038\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\000\000\038\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\086\000\000\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\091\000\000\000\000\000\000\000\000\000\
    \000\000\099\000\099\000\099\000\099\000\099\000\099\000\099\000\
    \099\000\099\000\099\000\000\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\099\000\099\000\099\000\099\000\099\000\099\000\
    \000\000\000\000\000\000\091\000\000\000\000\000\000\000\000\000\
    \000\000\091\000\000\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\000\000\000\000\000\000\
    \000\000\000\000\099\000\099\000\099\000\099\000\099\000\099\000\
    \038\000\000\000\000\000\000\000\000\000\061\000\000\000\061\000\
    \000\000\091\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\000\000\000\000\
    \038\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_check_code =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\047\000\255\255\047\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\027\000\255\255\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\028\000\027\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\255\255\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\028\000\049\000\255\255\049\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\027\000\035\000\255\255\255\255\255\255\
    \255\255\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\028\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \036\000\255\255\036\000\255\255\035\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\038\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\255\255\034\000\034\000\034\000\034\000\034\000\034\000\
    \039\000\255\255\039\000\255\255\255\255\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \041\000\255\255\041\000\255\255\040\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\255\255\040\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\046\000\255\255\046\000\046\000\046\000\046\000\046\000\
    \046\000\046\000\046\000\046\000\046\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\046\000\046\000\046\000\046\000\
    \046\000\046\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\046\000\255\255\255\255\255\255\255\255\
    \255\255\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\255\255\046\000\046\000\046\000\046\000\
    \046\000\046\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \255\255\255\255\255\255\046\000\255\255\255\255\255\255\255\255\
    \255\255\048\000\255\255\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\255\255\255\255\255\255\
    \255\255\255\255\048\000\048\000\048\000\048\000\048\000\048\000\
    \054\000\255\255\255\255\255\255\255\255\055\000\255\255\055\000\
    \255\255\048\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\255\255\255\255\
    \054\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_code =
   "\255\010\255\255\011\255\010\255\009\255\255\011\255\255\010\255\
    \011\255\255\009\255\010\255\011\255\255\012\255\014\255\013\255\
    \255\011\255\010\255\255\014\255\013\255\012\255\255\016\255\255\
    \007\255\001\255\005\008\004\009\003\010\002\011\255\014\255\013\
    \255\255\015\255\255\007\012\006\014\005\008\004\009\003\010\002\
    \011\001\013\000\015\255\020\255\019\255\255\018\255\017\255\255\
    \018\255\255\020\255\255\001\017\002\018\004\019\003\020\000\016\
    \255\004\255\001\017\002\018\000\016\255";
}

let rec parse_token lexbuf =
  lexbuf.Lexing.lex_mem <- Array.make 21 (-1);(* L=2 [9] <- p ; [8] <- p ;  *)
  lexbuf.Lexing.lex_mem.(9) <- lexbuf.Lexing.lex_curr_pos ;
  lexbuf.Lexing.lex_mem.(8) <- lexbuf.Lexing.lex_curr_pos ;
 __ocaml_lex_parse_token_rec lexbuf 0
and __ocaml_lex_parse_token_rec lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 130 "parsers/why_lexer.mll"
                             ( mk_new_line lexbuf; parse_token lexbuf )
# 598 "parsers/why_lexer.ml"

  | 1 ->
# 131 "parsers/why_lexer.mll"
                             ( parse_token lexbuf )
# 603 "parsers/why_lexer.ml"

  | 2 ->
# 132 "parsers/why_lexer.mll"
                             ( QM )
# 608 "parsers/why_lexer.ml"

  | 3 ->
let
# 133 "parsers/why_lexer.mll"
                      id
# 614 "parsers/why_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 133 "parsers/why_lexer.mll"
                             ( QM_ID id )
# 618 "parsers/why_lexer.ml"

  | 4 ->
let
# 134 "parsers/why_lexer.mll"
                  i
# 624 "parsers/why_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 134 "parsers/why_lexer.mll"
                             ( try assoc_keyword i with Not_found -> ID i )
# 628 "parsers/why_lexer.ml"

  | 5 ->
let
# 135 "parsers/why_lexer.mll"
              s
# 634 "parsers/why_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 135 "parsers/why_lexer.mll"
                             ( INTEGER s )
# 638 "parsers/why_lexer.ml"

  | 6 ->
let
# 137 "parsers/why_lexer.mll"
               i
# 644 "parsers/why_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(5) lexbuf.Lexing.lex_mem.(4)
and
# 137 "parsers/why_lexer.mll"
                         f
# 649 "parsers/why_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(3) lexbuf.Lexing.lex_mem.(2)
and
# 137 "parsers/why_lexer.mll"
                                                     sign
# 654 "parsers/why_lexer.ml"
= Lexing.sub_lexeme_opt lexbuf lexbuf.Lexing.lex_mem.(7) lexbuf.Lexing.lex_mem.(6)
and
# 137 "parsers/why_lexer.mll"
                                                                     exp
# 659 "parsers/why_lexer.ml"
= Lexing.sub_lexeme_opt lexbuf lexbuf.Lexing.lex_mem.(1) lexbuf.Lexing.lex_mem.(0) in
# 143 "parsers/why_lexer.mll"
      (
        let v =
          match exp,sign with
          | Some exp,Some "-" ->
            Num.div_num (decimal_number (i^f))
              (Num.power_num (Num.Int 10) (decimal_number exp))
          | Some exp,_ ->
            Num.mult_num (decimal_number (i^f))
              (Num.power_num (Num.Int 10) (decimal_number exp))
          | None,_ -> decimal_number (i^f)
        in
        let v =
          Num.div_num v
            (Num.power_num (Num.Int 10) (Num.num_of_int (String.length f)))
        in
        NUM v
      )
# 679 "parsers/why_lexer.ml"

  | 7 ->
let
# 162 "parsers/why_lexer.mll"
                          e
# 685 "parsers/why_lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 2) lexbuf.Lexing.lex_mem.(0)
and
# 162 "parsers/why_lexer.mll"
                                                   f
# 690 "parsers/why_lexer.ml"
= Lexing.sub_lexeme_opt lexbuf lexbuf.Lexing.lex_mem.(4) lexbuf.Lexing.lex_mem.(3)
and
# 163 "parsers/why_lexer.mll"
                             sign
# 695 "parsers/why_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(1) lexbuf.Lexing.lex_mem.(2)
and
# 163 "parsers/why_lexer.mll"
                                              exp
# 700 "parsers/why_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(2) lexbuf.Lexing.lex_curr_pos in
# 164 "parsers/why_lexer.mll"
      (
        let f = match f with None -> "" | Some f -> f in
        let v =
          match sign with
          | "-" ->
            Num.div_num (hexa_number (e^f))
              (Num.power_num (Num.Int 2) (decimal_number exp))
          | _ ->
            Num.mult_num (hexa_number (e^f))
              (Num.power_num (Num.Int 2) (decimal_number exp))
        in
        let v =
          Num.div_num v
            (Num.power_num (Num.Int 16) (Num.num_of_int (String.length f)))
        in
        NUM v
      )
# 720 "parsers/why_lexer.ml"

  | 8 ->
# 181 "parsers/why_lexer.mll"
          ( parse_comment lexbuf; parse_token lexbuf )
# 725 "parsers/why_lexer.ml"

  | 9 ->
# 182 "parsers/why_lexer.mll"
          ( QUOTE )
# 730 "parsers/why_lexer.ml"

  | 10 ->
# 183 "parsers/why_lexer.mll"
          ( COMMA )
# 735 "parsers/why_lexer.ml"

  | 11 ->
# 184 "parsers/why_lexer.mll"
          ( PV )
# 740 "parsers/why_lexer.ml"

  | 12 ->
# 185 "parsers/why_lexer.mll"
          ( LEFTPAR )
# 745 "parsers/why_lexer.ml"

  | 13 ->
# 186 "parsers/why_lexer.mll"
          ( RIGHTPAR )
# 750 "parsers/why_lexer.ml"

  | 14 ->
# 187 "parsers/why_lexer.mll"
          ( COLON )
# 755 "parsers/why_lexer.ml"

  | 15 ->
# 188 "parsers/why_lexer.mll"
          ( RIGHTARROW )
# 760 "parsers/why_lexer.ml"

  | 16 ->
# 189 "parsers/why_lexer.mll"
          ( LEFTARROW )
# 765 "parsers/why_lexer.ml"

  | 17 ->
# 190 "parsers/why_lexer.mll"
          ( LRARROW )
# 770 "parsers/why_lexer.ml"

  | 18 ->
# 191 "parsers/why_lexer.mll"
          ( EQUAL )
# 775 "parsers/why_lexer.ml"

  | 19 ->
# 192 "parsers/why_lexer.mll"
          ( LT )
# 780 "parsers/why_lexer.ml"

  | 20 ->
# 193 "parsers/why_lexer.mll"
          ( LE )
# 785 "parsers/why_lexer.ml"

  | 21 ->
# 194 "parsers/why_lexer.mll"
          ( GT )
# 790 "parsers/why_lexer.ml"

  | 22 ->
# 195 "parsers/why_lexer.mll"
          ( GE )
# 795 "parsers/why_lexer.ml"

  | 23 ->
# 196 "parsers/why_lexer.mll"
          ( NOTEQ )
# 800 "parsers/why_lexer.ml"

  | 24 ->
# 197 "parsers/why_lexer.mll"
          ( PLUS )
# 805 "parsers/why_lexer.ml"

  | 25 ->
# 198 "parsers/why_lexer.mll"
          ( MINUS )
# 810 "parsers/why_lexer.ml"

  | 26 ->
# 199 "parsers/why_lexer.mll"
          ( TIMES )
# 815 "parsers/why_lexer.ml"

  | 27 ->
# 200 "parsers/why_lexer.mll"
          ( SLASH )
# 820 "parsers/why_lexer.ml"

  | 28 ->
# 201 "parsers/why_lexer.mll"
          ( PERCENT )
# 825 "parsers/why_lexer.ml"

  | 29 ->
# 202 "parsers/why_lexer.mll"
          ( AT )
# 830 "parsers/why_lexer.ml"

  | 30 ->
# 203 "parsers/why_lexer.mll"
          ( DOT )
# 835 "parsers/why_lexer.ml"

  | 31 ->
# 204 "parsers/why_lexer.mll"
          ( SHARP )
# 840 "parsers/why_lexer.ml"

  | 32 ->
# 205 "parsers/why_lexer.mll"
          ( LEFTSQ )
# 845 "parsers/why_lexer.ml"

  | 33 ->
# 206 "parsers/why_lexer.mll"
          ( RIGHTSQ )
# 850 "parsers/why_lexer.ml"

  | 34 ->
# 207 "parsers/why_lexer.mll"
          ( LEFTBR )
# 855 "parsers/why_lexer.ml"

  | 35 ->
# 208 "parsers/why_lexer.mll"
          ( RIGHTBR )
# 860 "parsers/why_lexer.ml"

  | 36 ->
# 209 "parsers/why_lexer.mll"
          ( BAR )
# 865 "parsers/why_lexer.ml"

  | 37 ->
# 210 "parsers/why_lexer.mll"
          ( HAT )
# 870 "parsers/why_lexer.ml"

  | 38 ->
# 211 "parsers/why_lexer.mll"
          ( MAPS_TO )
# 875 "parsers/why_lexer.ml"

  | 39 ->
# 212 "parsers/why_lexer.mll"
          ( parse_string (Buffer.create 1024) lexbuf )
# 880 "parsers/why_lexer.ml"

  | 40 ->
# 213 "parsers/why_lexer.mll"
          ( EOF )
# 885 "parsers/why_lexer.ml"

  | 41 ->
let
# 214 "parsers/why_lexer.mll"
         c
# 891 "parsers/why_lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 214 "parsers/why_lexer.mll"
           (
    let loc = (Lexing.lexeme_start_p lexbuf, Lexing.lexeme_end_p lexbuf) in
    let s = "illegal character: " ^ String.make 1 c in
    raise (Errors.Lexical_error (loc, s))
  )
# 899 "parsers/why_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_parse_token_rec lexbuf __ocaml_lex_state

and parse_comment lexbuf =
   __ocaml_lex_parse_comment_rec lexbuf 67
and __ocaml_lex_parse_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 221 "parsers/why_lexer.mll"
         ( () )
# 911 "parsers/why_lexer.ml"

  | 1 ->
# 222 "parsers/why_lexer.mll"
         ( parse_comment lexbuf; parse_comment lexbuf )
# 916 "parsers/why_lexer.ml"

  | 2 ->
# 223 "parsers/why_lexer.mll"
         ( mk_new_line lexbuf; parse_comment lexbuf )
# 921 "parsers/why_lexer.ml"

  | 3 ->
# 224 "parsers/why_lexer.mll"
         (
    let loc = (Lexing.lexeme_start_p lexbuf, Lexing.lexeme_end_p lexbuf) in
    raise (Errors.Lexical_error (loc, "unterminated comment"))
  )
# 929 "parsers/why_lexer.ml"

  | 4 ->
# 228 "parsers/why_lexer.mll"
         ( parse_comment lexbuf )
# 934 "parsers/why_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_parse_comment_rec lexbuf __ocaml_lex_state

and parse_string str_buf lexbuf =
   __ocaml_lex_parse_string_rec str_buf lexbuf 75
and __ocaml_lex_parse_string_rec str_buf lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 231 "parsers/why_lexer.mll"
         ( STRING (Buffer.contents str_buf) )
# 946 "parsers/why_lexer.ml"

  | 1 ->
let
# 232 "parsers/why_lexer.mll"
               c
# 952 "parsers/why_lexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 1) in
# 232 "parsers/why_lexer.mll"
                  (
    Buffer.add_char str_buf (escaped_char c);
    parse_string str_buf lexbuf
  )
# 959 "parsers/why_lexer.ml"

  | 2 ->
# 237 "parsers/why_lexer.mll"
         (
    mk_new_line lexbuf;
    Buffer.add_char str_buf '\n';
    parse_string str_buf lexbuf
  )
# 968 "parsers/why_lexer.ml"

  | 3 ->
# 243 "parsers/why_lexer.mll"
         (
    let loc = (Lexing.lexeme_start_p lexbuf, Lexing.lexeme_end_p lexbuf) in
    raise (Errors.Lexical_error (loc, "unterminated string"))
  )
# 976 "parsers/why_lexer.ml"

  | 4 ->
let
# 248 "parsers/why_lexer.mll"
         c
# 982 "parsers/why_lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 248 "parsers/why_lexer.mll"
           (
    Buffer.add_char str_buf c; parse_string str_buf lexbuf
  )
# 988 "parsers/why_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_parse_string_rec str_buf lexbuf __ocaml_lex_state

;;

# 252 "parsers/why_lexer.mll"
 

  module Parser : Parsers.PARSER_INTERFACE = struct

    let aux aux_fun token lexbuf =
      try
        let res = aux_fun token lexbuf in
        Parsing.clear_parser ();
        res
      with
      (* The --fixed-error flag makes menhir alias
         the exception Error to Parsing.Parse_error *)
      | Parsing.Parse_error ->
        let loc = (Lexing.lexeme_start_p lexbuf, Lexing.lexeme_end_p lexbuf) in
        let lex = Lexing.lexeme lexbuf in
        Parsing.clear_parser ();
        raise (Errors.Syntax_error (loc, lex))

    let file    = aux Why_parser.file_parser    parse_token
    let expr    = aux Why_parser.lexpr_parser   parse_token
    let trigger = aux Why_parser.trigger_parser parse_token
  end

  let () =
    (*register this parser in Input_lang: 3 different extensions recognized *)
    let p = (module Parser : Parsers.PARSER_INTERFACE) in
    Parsers.register_parser ~lang:".why" p;
    Parsers.register_parser ~lang:".mlw" p;
    Parsers.register_parser ~lang:".ae" p


# 1027 "parsers/why_lexer.ml"
