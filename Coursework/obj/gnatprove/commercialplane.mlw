(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_short_integer =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content : short_short_integer }
 
 function short_short_integer__ref_short_short_integer__content__projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref_short_short_integer__content__projection
 
 meta "inline:no" function short_short_integer__ref_short_short_integer__content__projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer as Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_integer =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content : short_integer }
 
 function short_integer__ref_short_integer__content__projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref_short_integer__content__projection
 
 meta "inline:no" function short_integer__ref_short_integer__content__projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer as Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content : integer }
 
 function integer__ref_integer__content__projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref_integer__content__projection
 
 meta "inline:no" function integer__ref_integer__content__projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer as Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content : long_integer }
 
 function long_integer__ref_long_integer__content__projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref_long_integer__content__projection
 
 meta "inline:no" function long_integer__ref_long_integer__content__projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer as Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content : long_long_integer }
 
 function long_long_integer__ref_long_long_integer__content__projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref_long_long_integer__content__projection
 
 meta "inline:no" function long_long_integer__ref_long_long_integer__content__projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer as Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type natural =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content : natural }
 
 function natural__ref_natural__content__projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref_natural__content__projection
 
 meta "inline:no" function natural__ref_natural__content__projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural as Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type positive =
  < range 1 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content : positive }
 
 function positive__ref_positive__content__projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref_positive__content__projection
 
 meta "inline:no" function positive__ref_positive__content__projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive as Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type short_float 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content : short_float }
 
 function short_float__ref_short_float__content__projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref_short_float__content__projection
 
 meta "inline:no" function short_float__ref_short_float__content__projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float as Standard__short_float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type float__ 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = float__, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float____ref =
  { mutable float____content : float__ }
 
 function float____ref_float____content__projection 
   (a : float____ref) : float__ =
  a.float____content
 
 meta "model_projection" function float____ref_float____content__projection
 
 meta "inline:no" function float____ref_float____content__projection
 
 val float____havoc 
   (x : float____ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float as Standard__float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__float.float__, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64

 type long_float 
 
 val constant first 
   : Float64.t
  ensures { result =  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)) }
 
 val constant last 
   : Float64.t
  ensures { result =  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t) }
 
 predicate in_range 
   (x : Float64.t) =
  (Float64.t'isFinite x)
 val in_range 
   (x : Float64.t) : bool
  ensures { result <-> in_range (x : Float64.t) }
 
 clone export "ada__model".Static_Float64 with axiom .,
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content : long_float }
 
 function long_float__ref_long_float__content__projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref_long_float__content__projection
 
 meta "inline:no" function long_float__ref_long_float__content__projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float as Standard__long_float
 use        "_gnatprove_standard".Float64 as Float64
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float64 with axiom .,
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (255 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content : character }
 
 function character__ref_character__content__projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref_character__content__projection
 
 meta "inline:no" function character__ref_character__content__projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character as Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (65535 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content : wide_character }
 
 function wide_character__ref_wide_character__content__projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref_wide_character__content__projection
 
 meta "inline:no" function wide_character__ref_wide_character__content__projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character as Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content : wide_wide_character }
 
 function wide_wide_character__ref_wide_wide_character__content__projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref_wide_wide_character__content__projection
 
 meta "inline:no" function wide_wide_character__ref_wide_wide_character__content__projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type string__ref =
  { mutable string__content : string }
 
 function string__ref_string__content__projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref_string__content__projection
 
 meta "inline:no" function string__ref_string__content__projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module defining to_string/of_string functions, created in Gnat2Why.Types.Translate_Type *)
module Standard_String__Img
 use        "int".Int
 use        Standard__string as Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 val function to_string 
   (x : Main.__image) (s : int) : Standard__string.string
 
 val function from_string 
   (x : Standard__string.string) : Main.__image
 
 axiom to_string__first :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ((Standard__string.first (to_string x s)) = (1 : int))))
 
 axiom to_string__length :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ( (s >= (0 : int)) -> ((Standard__string.length (to_string x s)) <= s) )))

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character
 use        Standard__wide_character__rep as Standard__wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character__rep as Standard__wide_character__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_character as Standard__wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_string__ref =
  { mutable wide_string__content : wide_string }
 
 function wide_string__ref_wide_string__content__projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref_wide_string__content__projection
 
 meta "inline:no" function wide_string__ref_wide_string__content__projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content : wide_wide_string }
 
 function wide_wide_string__ref_wide_wide_string__content__projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref_wide_wide_string__content__projection
 
 meta "inline:no" function wide_wide_string__ref_wide_wide_string__content__projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 function num_small 
   : int =
  (1 : int)
 
 function den_small 
   : int =
  (1000000000 : int)
 
 clone export "ada__model".Fixed_Point_Rep with axiom .,
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 type duration 
 
 val constant num_small 
   : Main.__fixed
  ensures { result =  (1 : int) }
 
 val constant den_small 
   : Main.__fixed
  ensures { result =  (1000000000 : int) }
 
 val constant first 
   : Main.__fixed
  ensures { result =  ( ( -9223372036854775808 ) : int ) }
 
 val constant last 
   : Main.__fixed
  ensures { result =  ( 9223372036854775807 : int ) }
 
 predicate in_range 
   (x : Main.__fixed) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : Main.__fixed) : bool
  ensures { result <-> in_range (x : Main.__fixed) }
 
 clone export "ada__model".Static_Fixed_Point with axiom .,
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content : duration }
 
 function duration__ref_duration__content__projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref_duration__content__projection
 
 meta "inline:no" function duration__ref_duration__content__projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration__rep
 use        Standard__duration as Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Fixed with axiom .,
 type t = Standard__duration.duration, 
 predicate in_range = Standard__duration.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_8 =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content : integer_8 }
 
 function integer_8__ref_integer_8__content__projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref_integer_8__content__projection
 
 meta "inline:no" function integer_8__ref_integer_8__content__projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8 as Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content : integer_16 }
 
 function integer_16__ref_integer_16__content__projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref_integer_16__content__projection
 
 meta "inline:no" function integer_16__ref_integer_16__content__projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16 as Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content : integer_32 }
 
 function integer_32__ref_integer_32__content__projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref_integer_32__content__projection
 
 meta "inline:no" function integer_32__ref_integer_32__content__projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32 as Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content : integer_64 }
 
 function integer_64__ref_integer_64__content__projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref_integer_64__content__projection
 
 meta "inline:no" function integer_64__ref_integer_64__content__projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64 as Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content : universal_integer }
 
 function universal_integer__ref_universal_integer__content__projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref_universal_integer__content__projection
 
 meta "inline:no" function universal_integer__ref_universal_integer__content__projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer as Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tcountB =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tcountB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tcountB__ref =
  { mutable tcountB__content : tcountB }
 
 function tcountB__ref_tcountB__content__projection 
   (a : tcountB__ref) : tcountB =
  a.tcountB__content
 
 meta "model_projection" function tcountB__ref_tcountB__content__projection
 
 meta "inline:no" function tcountB__ref_tcountB__content__projection
 
 val tcountB__havoc 
   (x : tcountB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB__rep
 use        Ada__text_io__TcountB as Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__TcountB.tcountB) : int =
  (Ada__text_io__TcountB.tcountB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__TcountB.tcountB, 
 predicate in_range = Ada__text_io__TcountB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type count =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = count, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type count__ref =
  { mutable count__content : count }
 
 function count__ref_count__content__projection 
   (a : count__ref) : count =
  a.count__content
 
 meta "model_projection" function count__ref_count__content__projection
 
 meta "inline:no" function count__ref_count__content__projection
 
 val count__havoc 
   (x : count__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count__rep
 use        Ada__text_io__count as Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__count.count) : int =
  (Ada__text_io__count.count'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__count.count, 
 predicate in_range = Ada__text_io__count.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TfuelB" defined at commercialplane.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Commercialplane__TfuelB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tfuelB =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tfuelB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tfuelB__ref =
  { mutable tfuelB__content : tfuelB }
 
 function tfuelB__ref_tfuelB__content__projection 
   (a : tfuelB__ref) : tfuelB =
  a.tfuelB__content
 
 meta "model_projection" function tfuelB__ref_tfuelB__content__projection
 
 meta "inline:no" function tfuelB__ref_tfuelB__content__projection
 
 val tfuelB__havoc 
   (x : tfuelB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TfuelB" defined at commercialplane.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Commercialplane__TfuelB__rep
 use        Commercialplane__TfuelB as Commercialplane__TfuelB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Commercialplane__TfuelB.tfuelB) : int =
  (Commercialplane__TfuelB.tfuelB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Commercialplane__TfuelB.tfuelB, 
 predicate in_range = Commercialplane__TfuelB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "fuel" defined at commercialplane.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Commercialplane__fuel
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type fuel =
  < range 0 100 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (100 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = fuel, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type fuel__ref =
  { mutable fuel__content : fuel }
 
 function fuel__ref_fuel__content__projection 
   (a : fuel__ref) : fuel =
  a.fuel__content
 
 meta "model_projection" function fuel__ref_fuel__content__projection
 
 meta "inline:no" function fuel__ref_fuel__content__projection
 
 val fuel__havoc 
   (x : fuel__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "fuel" defined at commercialplane.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Commercialplane__fuel__rep
 use        Commercialplane__fuel as Commercialplane__fuel
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Commercialplane__fuel.fuel) : int =
  (Commercialplane__fuel.fuel'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Commercialplane__fuel.fuel, 
 predicate in_range = Commercialplane__fuel.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TairspeedB" defined at commercialplane.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Commercialplane__TairspeedB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tairspeedB =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tairspeedB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tairspeedB__ref =
  { mutable tairspeedB__content : tairspeedB }
 
 function tairspeedB__ref_tairspeedB__content__projection 
   (a : tairspeedB__ref) : tairspeedB =
  a.tairspeedB__content
 
 meta "model_projection" function tairspeedB__ref_tairspeedB__content__projection
 
 meta "inline:no" function tairspeedB__ref_tairspeedB__content__projection
 
 val tairspeedB__havoc 
   (x : tairspeedB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TairspeedB" defined at commercialplane.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Commercialplane__TairspeedB__rep
 use        Commercialplane__TairspeedB as Commercialplane__TairspeedB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Commercialplane__TairspeedB.tairspeedB) : int =
  (Commercialplane__TairspeedB.tairspeedB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Commercialplane__TairspeedB.tairspeedB, 
 predicate in_range = Commercialplane__TairspeedB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "airspeed" defined at commercialplane.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Commercialplane__airspeed
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type airspeed =
  < range 0 1000 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (1000 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = airspeed, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type airspeed__ref =
  { mutable airspeed__content : airspeed }
 
 function airspeed__ref_airspeed__content__projection 
   (a : airspeed__ref) : airspeed =
  a.airspeed__content
 
 meta "model_projection" function airspeed__ref_airspeed__content__projection
 
 meta "inline:no" function airspeed__ref_airspeed__content__projection
 
 val airspeed__havoc 
   (x : airspeed__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "airspeed" defined at commercialplane.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Commercialplane__airspeed__rep
 use        Commercialplane__airspeed as Commercialplane__airspeed
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Commercialplane__airspeed.airspeed) : int =
  (Commercialplane__airspeed.airspeed'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Commercialplane__airspeed.airspeed, 
 predicate in_range = Commercialplane__airspeed.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TaltitudeB" defined at commercialplane.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Commercialplane__TaltitudeB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type taltitudeB =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = taltitudeB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type taltitudeB__ref =
  { mutable taltitudeB__content : taltitudeB }
 
 function taltitudeB__ref_taltitudeB__content__projection 
   (a : taltitudeB__ref) : taltitudeB =
  a.taltitudeB__content
 
 meta "model_projection" function taltitudeB__ref_taltitudeB__content__projection
 
 meta "inline:no" function taltitudeB__ref_taltitudeB__content__projection
 
 val taltitudeB__havoc 
   (x : taltitudeB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TaltitudeB" defined at commercialplane.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Commercialplane__TaltitudeB__rep
 use        Commercialplane__TaltitudeB as Commercialplane__TaltitudeB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Commercialplane__TaltitudeB.taltitudeB) : int =
  (Commercialplane__TaltitudeB.taltitudeB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Commercialplane__TaltitudeB.taltitudeB, 
 predicate in_range = Commercialplane__TaltitudeB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "altitude" defined at commercialplane.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Commercialplane__altitude
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type altitude =
  < range 0 1200 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (1200 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = altitude, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type altitude__ref =
  { mutable altitude__content : altitude }
 
 function altitude__ref_altitude__content__projection 
   (a : altitude__ref) : altitude =
  a.altitude__content
 
 meta "model_projection" function altitude__ref_altitude__content__projection
 
 meta "inline:no" function altitude__ref_altitude__content__projection
 
 val altitude__havoc 
   (x : altitude__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "altitude" defined at commercialplane.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Commercialplane__altitude__rep
 use        Commercialplane__altitude as Commercialplane__altitude
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Commercialplane__altitude.altitude) : int =
  (Commercialplane__altitude.altitude'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Commercialplane__altitude.altitude, 
 predicate in_range = Commercialplane__altitude.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "landinggear" defined at commercialplane.ads:9, created in Gnat2Why.Types.Translate_Type *)
module Commercialplane__landinggear
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type landinggear 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = landinggear, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type landinggear__ref =
  { mutable landinggear__content : landinggear }
 
 function landinggear__ref_landinggear__content__projection 
   (a : landinggear__ref) : landinggear =
  a.landinggear__content
 
 meta "model_projection" function landinggear__ref_landinggear__content__projection
 
 meta "inline:no" function landinggear__ref_landinggear__content__projection
 
 val landinggear__havoc 
   (x : landinggear__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "landinggear" defined at commercialplane.ads:9, created in Gnat2Why.Types.Translate_Type *)
module Commercialplane__landinggear__rep
 use        Commercialplane__landinggear as Commercialplane__landinggear
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Commercialplane__landinggear.landinggear, 
 predicate in_range = Commercialplane__landinggear.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "door" defined at commercialplane.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Commercialplane__door
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type door 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = door, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type door__ref =
  { mutable door__content : door }
 
 function door__ref_door__content__projection 
   (a : door__ref) : door =
  a.door__content
 
 meta "model_projection" function door__ref_door__content__projection
 
 meta "inline:no" function door__ref_door__content__projection
 
 val door__havoc 
   (x : door__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "door" defined at commercialplane.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Commercialplane__door__rep
 use        Commercialplane__door as Commercialplane__door
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Commercialplane__door.door, 
 predicate in_range = Commercialplane__door.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "engine" defined at commercialplane.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Commercialplane__engine
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type engine 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = engine, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type engine__ref =
  { mutable engine__content : engine }
 
 function engine__ref_engine__content__projection 
   (a : engine__ref) : engine =
  a.engine__content
 
 meta "model_projection" function engine__ref_engine__content__projection
 
 meta "inline:no" function engine__ref_engine__content__projection
 
 val engine__havoc 
   (x : engine__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "engine" defined at commercialplane.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Commercialplane__engine__rep
 use        Commercialplane__engine as Commercialplane__engine
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Commercialplane__engine.engine, 
 predicate in_range = Commercialplane__engine.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "currentactivity" defined at commercialplane.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Commercialplane__currentactivity
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type currentactivity 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = currentactivity, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type currentactivity__ref =
  { mutable currentactivity__content : currentactivity }
 
 function currentactivity__ref_currentactivity__content__projection 
   (a : currentactivity__ref) : currentactivity =
  a.currentactivity__content
 
 meta "model_projection" function currentactivity__ref_currentactivity__content__projection
 
 meta "inline:no" function currentactivity__ref_currentactivity__content__projection
 
 val currentactivity__havoc 
   (x : currentactivity__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "currentactivity" defined at commercialplane.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Commercialplane__currentactivity__rep
 use        Commercialplane__currentactivity as Commercialplane__currentactivity
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Commercialplane__currentactivity.currentactivity, 
 predicate in_range = Commercialplane__currentactivity.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "warninglight" defined at commercialplane.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Commercialplane__warninglight
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type warninglight 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = warninglight, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type warninglight__ref =
  { mutable warninglight__content : warninglight }
 
 function warninglight__ref_warninglight__content__projection 
   (a : warninglight__ref) : warninglight =
  a.warninglight__content
 
 meta "model_projection" function warninglight__ref_warninglight__content__projection
 
 meta "inline:no" function warninglight__ref_warninglight__content__projection
 
 val warninglight__havoc 
   (x : warninglight__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "warninglight" defined at commercialplane.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Commercialplane__warninglight__rep
 use        Commercialplane__warninglight as Commercialplane__warninglight
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Commercialplane__warninglight.warninglight, 
 predicate in_range = Commercialplane__warninglight.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "plane" defined at commercialplane.ads:15, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Commercialplane__plane__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Commercialplane__fuel as Commercialplane__fuel
 use        Commercialplane__fuel__rep as Commercialplane__fuel__rep
 use        Commercialplane__airspeed as Commercialplane__airspeed
 use        Commercialplane__airspeed__rep as Commercialplane__airspeed__rep
 use        Commercialplane__altitude as Commercialplane__altitude
 use        Commercialplane__altitude__rep as Commercialplane__altitude__rep
 use        Commercialplane__landinggear as Commercialplane__landinggear
 use        Commercialplane__landinggear__rep as Commercialplane__landinggear__rep
 use        Commercialplane__door as Commercialplane__door
 use        Commercialplane__door__rep as Commercialplane__door__rep
 use        Commercialplane__engine as Commercialplane__engine
 use        Commercialplane__engine__rep as Commercialplane__engine__rep
 use        Commercialplane__currentactivity as Commercialplane__currentactivity
 use        Commercialplane__currentactivity__rep as Commercialplane__currentactivity__rep
 use        Commercialplane__warninglight as Commercialplane__warninglight
 use        Commercialplane__warninglight__rep as Commercialplane__warninglight__rep

 type __split_fields =
  { rec__commercialplane__plane__fueltank [@name:fuelTank] [@model_trace:.3007] : Commercialplane__fuel.fuel; rec__commercialplane__plane__velocity [@model_trace:.3017] [@name:velocity] : Commercialplane__airspeed.airspeed; rec__commercialplane__plane__height [@model_trace:.3027] [@name:height] : Commercialplane__altitude.altitude; rec__commercialplane__plane__landgear [@model_trace:.3037] [@name:landGear] : Commercialplane__landinggear.landinggear; rec__commercialplane__plane__cockpit [@name:cockpit] [@model_trace:.3047] : Commercialplane__door.door; rec__commercialplane__plane__extdoor [@name:extDoor] [@model_trace:.3057] : Commercialplane__door.door; rec__commercialplane__plane__ignition [@model_trace:.3067] [@name:ignition] : Commercialplane__engine.engine; rec__commercialplane__plane__mode [@name:mode] [@model_trace:.3077] : Commercialplane__currentactivity.currentactivity; rec__commercialplane__plane__fuelwarning [@model_trace:.3087] [@name:fuelWarning] : Commercialplane__warninglight.warninglight; rec__commercialplane__plane__heightwarning [@model_trace:.3097] [@name:heightWarning] : Commercialplane__warninglight.warninglight; rec__commercialplane__plane__speedwarning [@model_trace:.3107] [@name:speedWarning] : Commercialplane__warninglight.warninglight }
 
 function __split_fields_rec__commercialplane__plane__fueltank__projection [@name:fuelTank] [@model_trace:.3007] 
   (a : __split_fields) : Commercialplane__fuel.fuel =
  a.rec__commercialplane__plane__fueltank
 
 meta "model_projection" function __split_fields_rec__commercialplane__plane__fueltank__projection
 
 meta "inline:no" function __split_fields_rec__commercialplane__plane__fueltank__projection
 
 function __split_fields_rec__commercialplane__plane__velocity__projection [@model_trace:.3017] [@name:velocity] 
   (a : __split_fields) : Commercialplane__airspeed.airspeed =
  a.rec__commercialplane__plane__velocity
 
 meta "model_projection" function __split_fields_rec__commercialplane__plane__velocity__projection
 
 meta "inline:no" function __split_fields_rec__commercialplane__plane__velocity__projection
 
 function __split_fields_rec__commercialplane__plane__height__projection [@model_trace:.3027] [@name:height] 
   (a : __split_fields) : Commercialplane__altitude.altitude =
  a.rec__commercialplane__plane__height
 
 meta "model_projection" function __split_fields_rec__commercialplane__plane__height__projection
 
 meta "inline:no" function __split_fields_rec__commercialplane__plane__height__projection
 
 function __split_fields_rec__commercialplane__plane__landgear__projection [@model_trace:.3037] [@name:landGear] 
   (a : __split_fields) : Commercialplane__landinggear.landinggear =
  a.rec__commercialplane__plane__landgear
 
 meta "model_projection" function __split_fields_rec__commercialplane__plane__landgear__projection
 
 meta "inline:no" function __split_fields_rec__commercialplane__plane__landgear__projection
 
 function __split_fields_rec__commercialplane__plane__cockpit__projection [@name:cockpit] [@model_trace:.3047] 
   (a : __split_fields) : Commercialplane__door.door =
  a.rec__commercialplane__plane__cockpit
 
 meta "model_projection" function __split_fields_rec__commercialplane__plane__cockpit__projection
 
 meta "inline:no" function __split_fields_rec__commercialplane__plane__cockpit__projection
 
 function __split_fields_rec__commercialplane__plane__extdoor__projection [@name:extDoor] [@model_trace:.3057] 
   (a : __split_fields) : Commercialplane__door.door =
  a.rec__commercialplane__plane__extdoor
 
 meta "model_projection" function __split_fields_rec__commercialplane__plane__extdoor__projection
 
 meta "inline:no" function __split_fields_rec__commercialplane__plane__extdoor__projection
 
 function __split_fields_rec__commercialplane__plane__ignition__projection [@model_trace:.3067] [@name:ignition] 
   (a : __split_fields) : Commercialplane__engine.engine =
  a.rec__commercialplane__plane__ignition
 
 meta "model_projection" function __split_fields_rec__commercialplane__plane__ignition__projection
 
 meta "inline:no" function __split_fields_rec__commercialplane__plane__ignition__projection
 
 function __split_fields_rec__commercialplane__plane__mode__projection [@name:mode] [@model_trace:.3077] 
   (a : __split_fields) : Commercialplane__currentactivity.currentactivity =
  a.rec__commercialplane__plane__mode
 
 meta "model_projection" function __split_fields_rec__commercialplane__plane__mode__projection
 
 meta "inline:no" function __split_fields_rec__commercialplane__plane__mode__projection
 
 function __split_fields_rec__commercialplane__plane__fuelwarning__projection [@model_trace:.3087] [@name:fuelWarning] 
   (a : __split_fields) : Commercialplane__warninglight.warninglight =
  a.rec__commercialplane__plane__fuelwarning
 
 meta "model_projection" function __split_fields_rec__commercialplane__plane__fuelwarning__projection
 
 meta "inline:no" function __split_fields_rec__commercialplane__plane__fuelwarning__projection
 
 function __split_fields_rec__commercialplane__plane__heightwarning__projection [@model_trace:.3097] [@name:heightWarning] 
   (a : __split_fields) : Commercialplane__warninglight.warninglight =
  a.rec__commercialplane__plane__heightwarning
 
 meta "model_projection" function __split_fields_rec__commercialplane__plane__heightwarning__projection
 
 meta "inline:no" function __split_fields_rec__commercialplane__plane__heightwarning__projection
 
 function __split_fields_rec__commercialplane__plane__speedwarning__projection [@model_trace:.3107] [@name:speedWarning] 
   (a : __split_fields) : Commercialplane__warninglight.warninglight =
  a.rec__commercialplane__plane__speedwarning
 
 meta "model_projection" function __split_fields_rec__commercialplane__plane__speedwarning__projection
 
 meta "inline:no" function __split_fields_rec__commercialplane__plane__speedwarning__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__projection
 
 meta "inline:no" function __rep___split_fields__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate commercialplane__plane__fueltank__pred 
   (a : __rep) =
  true
 val commercialplane__plane__fueltank__pred 
   (a : __rep) : bool
  ensures { result <-> commercialplane__plane__fueltank__pred (a : __rep) }
 
 val rec__commercialplane__plane__fueltank_ 
   (a : __rep) : Commercialplane__fuel.fuel
  requires {  (commercialplane__plane__fueltank__pred a) }
  ensures {  (result = a.__split_fields.rec__commercialplane__plane__fueltank) }
 
 predicate commercialplane__plane__velocity__pred 
   (a : __rep) =
  true
 val commercialplane__plane__velocity__pred 
   (a : __rep) : bool
  ensures { result <-> commercialplane__plane__velocity__pred (a : __rep) }
 
 val rec__commercialplane__plane__velocity_ 
   (a : __rep) : Commercialplane__airspeed.airspeed
  requires {  (commercialplane__plane__velocity__pred a) }
  ensures {  (result = a.__split_fields.rec__commercialplane__plane__velocity) }
 
 predicate commercialplane__plane__height__pred 
   (a : __rep) =
  true
 val commercialplane__plane__height__pred 
   (a : __rep) : bool
  ensures { result <-> commercialplane__plane__height__pred (a : __rep) }
 
 val rec__commercialplane__plane__height_ 
   (a : __rep) : Commercialplane__altitude.altitude
  requires {  (commercialplane__plane__height__pred a) }
  ensures {  (result = a.__split_fields.rec__commercialplane__plane__height) }
 
 predicate commercialplane__plane__landgear__pred 
   (a : __rep) =
  true
 val commercialplane__plane__landgear__pred 
   (a : __rep) : bool
  ensures { result <-> commercialplane__plane__landgear__pred (a : __rep) }
 
 val rec__commercialplane__plane__landgear_ 
   (a : __rep) : Commercialplane__landinggear.landinggear
  requires {  (commercialplane__plane__landgear__pred a) }
  ensures {  (result = a.__split_fields.rec__commercialplane__plane__landgear) }
 
 predicate commercialplane__plane__cockpit__pred 
   (a : __rep) =
  true
 val commercialplane__plane__cockpit__pred 
   (a : __rep) : bool
  ensures { result <-> commercialplane__plane__cockpit__pred (a : __rep) }
 
 val rec__commercialplane__plane__cockpit_ 
   (a : __rep) : Commercialplane__door.door
  requires {  (commercialplane__plane__cockpit__pred a) }
  ensures {  (result = a.__split_fields.rec__commercialplane__plane__cockpit) }
 
 predicate commercialplane__plane__extdoor__pred 
   (a : __rep) =
  true
 val commercialplane__plane__extdoor__pred 
   (a : __rep) : bool
  ensures { result <-> commercialplane__plane__extdoor__pred (a : __rep) }
 
 val rec__commercialplane__plane__extdoor_ 
   (a : __rep) : Commercialplane__door.door
  requires {  (commercialplane__plane__extdoor__pred a) }
  ensures {  (result = a.__split_fields.rec__commercialplane__plane__extdoor) }
 
 predicate commercialplane__plane__ignition__pred 
   (a : __rep) =
  true
 val commercialplane__plane__ignition__pred 
   (a : __rep) : bool
  ensures { result <-> commercialplane__plane__ignition__pred (a : __rep) }
 
 val rec__commercialplane__plane__ignition_ 
   (a : __rep) : Commercialplane__engine.engine
  requires {  (commercialplane__plane__ignition__pred a) }
  ensures {  (result = a.__split_fields.rec__commercialplane__plane__ignition) }
 
 predicate commercialplane__plane__mode__pred 
   (a : __rep) =
  true
 val commercialplane__plane__mode__pred 
   (a : __rep) : bool
  ensures { result <-> commercialplane__plane__mode__pred (a : __rep) }
 
 val rec__commercialplane__plane__mode_ 
   (a : __rep) : Commercialplane__currentactivity.currentactivity
  requires {  (commercialplane__plane__mode__pred a) }
  ensures {  (result = a.__split_fields.rec__commercialplane__plane__mode) }
 
 predicate commercialplane__plane__fuelwarning__pred 
   (a : __rep) =
  true
 val commercialplane__plane__fuelwarning__pred 
   (a : __rep) : bool
  ensures { result <-> commercialplane__plane__fuelwarning__pred (a : __rep) }
 
 val rec__commercialplane__plane__fuelwarning_ 
   (a : __rep) : Commercialplane__warninglight.warninglight
  requires {  (commercialplane__plane__fuelwarning__pred a) }
  ensures {  (result = a.__split_fields.rec__commercialplane__plane__fuelwarning) }
 
 predicate commercialplane__plane__heightwarning__pred 
   (a : __rep) =
  true
 val commercialplane__plane__heightwarning__pred 
   (a : __rep) : bool
  ensures { result <-> commercialplane__plane__heightwarning__pred (a : __rep) }
 
 val rec__commercialplane__plane__heightwarning_ 
   (a : __rep) : Commercialplane__warninglight.warninglight
  requires {  (commercialplane__plane__heightwarning__pred a) }
  ensures {  (result = a.__split_fields.rec__commercialplane__plane__heightwarning) }
 
 predicate commercialplane__plane__speedwarning__pred 
   (a : __rep) =
  true
 val commercialplane__plane__speedwarning__pred 
   (a : __rep) : bool
  ensures { result <-> commercialplane__plane__speedwarning__pred (a : __rep) }
 
 val rec__commercialplane__plane__speedwarning_ 
   (a : __rep) : Commercialplane__warninglight.warninglight
  requires {  (commercialplane__plane__speedwarning__pred a) }
  ensures {  (result = a.__split_fields.rec__commercialplane__plane__speedwarning) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ( ((Commercialplane__fuel__rep.to_rep a.__split_fields.rec__commercialplane__plane__fueltank) = (Commercialplane__fuel__rep.to_rep b.__split_fields.rec__commercialplane__plane__fueltank)) /\ ((Commercialplane__airspeed__rep.to_rep a.__split_fields.rec__commercialplane__plane__velocity) = (Commercialplane__airspeed__rep.to_rep b.__split_fields.rec__commercialplane__plane__velocity)) )/\( ( ( ( ((Commercialplane__altitude__rep.to_rep a.__split_fields.rec__commercialplane__plane__height) = (Commercialplane__altitude__rep.to_rep b.__split_fields.rec__commercialplane__plane__height))/\((Commercialplane__landinggear__rep.to_rep a.__split_fields.rec__commercialplane__plane__landgear) = (Commercialplane__landinggear__rep.to_rep b.__split_fields.rec__commercialplane__plane__landgear)) )/\((Commercialplane__door__rep.to_rep a.__split_fields.rec__commercialplane__plane__cockpit) = (Commercialplane__door__rep.to_rep b.__split_fields.rec__commercialplane__plane__cockpit)) )/\( ((Commercialplane__door__rep.to_rep a.__split_fields.rec__commercialplane__plane__extdoor) = (Commercialplane__door__rep.to_rep b.__split_fields.rec__commercialplane__plane__extdoor))/\((Commercialplane__engine__rep.to_rep a.__split_fields.rec__commercialplane__plane__ignition) = (Commercialplane__engine__rep.to_rep b.__split_fields.rec__commercialplane__plane__ignition)) ) )/\( ( ((Commercialplane__currentactivity__rep.to_rep a.__split_fields.rec__commercialplane__plane__mode) = (Commercialplane__currentactivity__rep.to_rep b.__split_fields.rec__commercialplane__plane__mode))/\((Commercialplane__warninglight__rep.to_rep a.__split_fields.rec__commercialplane__plane__fuelwarning) = (Commercialplane__warninglight__rep.to_rep b.__split_fields.rec__commercialplane__plane__fuelwarning)) )/\( ((Commercialplane__warninglight__rep.to_rep a.__split_fields.rec__commercialplane__plane__heightwarning) = (Commercialplane__warninglight__rep.to_rep b.__split_fields.rec__commercialplane__plane__heightwarning))/\((Commercialplane__warninglight__rep.to_rep a.__split_fields.rec__commercialplane__plane__speedwarning) = (Commercialplane__warninglight__rep.to_rep b.__split_fields.rec__commercialplane__plane__speedwarning)) ) ) ) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "plane" defined at commercialplane.ads:15, created in Gnat2Why.Types.Translate_Type *)
module Commercialplane__plane
 use export Commercialplane__plane__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type plane =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant commercialplane__plane__fueltank__first__bit 
   : int

 
 val constant commercialplane__plane__fueltank__last__bit 
   : int

 
 val constant commercialplane__plane__fueltank__position 
   : int

 
 axiom commercialplane__plane__fueltank__first__bit_axiom :
  ((commercialplane__plane__fueltank__first__bit ) >= (0 : int))
 
 axiom commercialplane__plane__fueltank__last__bit_axiom :
  ((commercialplane__plane__fueltank__last__bit ) > (commercialplane__plane__fueltank__first__bit ))
 
 axiom commercialplane__plane__fueltank__position_axiom :
  ((commercialplane__plane__fueltank__position ) >= (0 : int))
 
 val constant commercialplane__plane__velocity__first__bit 
   : int

 
 val constant commercialplane__plane__velocity__last__bit 
   : int

 
 val constant commercialplane__plane__velocity__position 
   : int

 
 axiom commercialplane__plane__velocity__first__bit_axiom :
  ((commercialplane__plane__velocity__first__bit ) >= (0 : int))
 
 axiom commercialplane__plane__velocity__last__bit_axiom :
  ((commercialplane__plane__velocity__last__bit ) > (commercialplane__plane__velocity__first__bit ))
 
 axiom commercialplane__plane__velocity__position_axiom :
  ((commercialplane__plane__velocity__position ) >= (0 : int))
 
 val constant commercialplane__plane__height__first__bit 
   : int

 
 val constant commercialplane__plane__height__last__bit 
   : int

 
 val constant commercialplane__plane__height__position 
   : int

 
 axiom commercialplane__plane__height__first__bit_axiom :
  ((commercialplane__plane__height__first__bit ) >= (0 : int))
 
 axiom commercialplane__plane__height__last__bit_axiom :
  ((commercialplane__plane__height__last__bit ) > (commercialplane__plane__height__first__bit ))
 
 axiom commercialplane__plane__height__position_axiom :
  ((commercialplane__plane__height__position ) >= (0 : int))
 
 val constant commercialplane__plane__landgear__first__bit 
   : int

 
 val constant commercialplane__plane__landgear__last__bit 
   : int

 
 val constant commercialplane__plane__landgear__position 
   : int

 
 axiom commercialplane__plane__landgear__first__bit_axiom :
  ((commercialplane__plane__landgear__first__bit ) >= (0 : int))
 
 axiom commercialplane__plane__landgear__last__bit_axiom :
  ((commercialplane__plane__landgear__last__bit ) > (commercialplane__plane__landgear__first__bit ))
 
 axiom commercialplane__plane__landgear__position_axiom :
  ((commercialplane__plane__landgear__position ) >= (0 : int))
 
 val constant commercialplane__plane__cockpit__first__bit 
   : int

 
 val constant commercialplane__plane__cockpit__last__bit 
   : int

 
 val constant commercialplane__plane__cockpit__position 
   : int

 
 axiom commercialplane__plane__cockpit__first__bit_axiom :
  ((commercialplane__plane__cockpit__first__bit ) >= (0 : int))
 
 axiom commercialplane__plane__cockpit__last__bit_axiom :
  ((commercialplane__plane__cockpit__last__bit ) > (commercialplane__plane__cockpit__first__bit ))
 
 axiom commercialplane__plane__cockpit__position_axiom :
  ((commercialplane__plane__cockpit__position ) >= (0 : int))
 
 val constant commercialplane__plane__extdoor__first__bit 
   : int

 
 val constant commercialplane__plane__extdoor__last__bit 
   : int

 
 val constant commercialplane__plane__extdoor__position 
   : int

 
 axiom commercialplane__plane__extdoor__first__bit_axiom :
  ((commercialplane__plane__extdoor__first__bit ) >= (0 : int))
 
 axiom commercialplane__plane__extdoor__last__bit_axiom :
  ((commercialplane__plane__extdoor__last__bit ) > (commercialplane__plane__extdoor__first__bit ))
 
 axiom commercialplane__plane__extdoor__position_axiom :
  ((commercialplane__plane__extdoor__position ) >= (0 : int))
 
 val constant commercialplane__plane__ignition__first__bit 
   : int

 
 val constant commercialplane__plane__ignition__last__bit 
   : int

 
 val constant commercialplane__plane__ignition__position 
   : int

 
 axiom commercialplane__plane__ignition__first__bit_axiom :
  ((commercialplane__plane__ignition__first__bit ) >= (0 : int))
 
 axiom commercialplane__plane__ignition__last__bit_axiom :
  ((commercialplane__plane__ignition__last__bit ) > (commercialplane__plane__ignition__first__bit ))
 
 axiom commercialplane__plane__ignition__position_axiom :
  ((commercialplane__plane__ignition__position ) >= (0 : int))
 
 val constant commercialplane__plane__mode__first__bit 
   : int

 
 val constant commercialplane__plane__mode__last__bit 
   : int

 
 val constant commercialplane__plane__mode__position 
   : int

 
 axiom commercialplane__plane__mode__first__bit_axiom :
  ((commercialplane__plane__mode__first__bit ) >= (0 : int))
 
 axiom commercialplane__plane__mode__last__bit_axiom :
  ((commercialplane__plane__mode__last__bit ) > (commercialplane__plane__mode__first__bit ))
 
 axiom commercialplane__plane__mode__position_axiom :
  ((commercialplane__plane__mode__position ) >= (0 : int))
 
 val constant commercialplane__plane__fuelwarning__first__bit 
   : int

 
 val constant commercialplane__plane__fuelwarning__last__bit 
   : int

 
 val constant commercialplane__plane__fuelwarning__position 
   : int

 
 axiom commercialplane__plane__fuelwarning__first__bit_axiom :
  ((commercialplane__plane__fuelwarning__first__bit ) >= (0 : int))
 
 axiom commercialplane__plane__fuelwarning__last__bit_axiom :
  ((commercialplane__plane__fuelwarning__last__bit ) > (commercialplane__plane__fuelwarning__first__bit ))
 
 axiom commercialplane__plane__fuelwarning__position_axiom :
  ((commercialplane__plane__fuelwarning__position ) >= (0 : int))
 
 val constant commercialplane__plane__heightwarning__first__bit 
   : int

 
 val constant commercialplane__plane__heightwarning__last__bit 
   : int

 
 val constant commercialplane__plane__heightwarning__position 
   : int

 
 axiom commercialplane__plane__heightwarning__first__bit_axiom :
  ((commercialplane__plane__heightwarning__first__bit ) >= (0 : int))
 
 axiom commercialplane__plane__heightwarning__last__bit_axiom :
  ((commercialplane__plane__heightwarning__last__bit ) > (commercialplane__plane__heightwarning__first__bit ))
 
 axiom commercialplane__plane__heightwarning__position_axiom :
  ((commercialplane__plane__heightwarning__position ) >= (0 : int))
 
 val constant commercialplane__plane__speedwarning__first__bit 
   : int

 
 val constant commercialplane__plane__speedwarning__last__bit 
   : int

 
 val constant commercialplane__plane__speedwarning__position 
   : int

 
 axiom commercialplane__plane__speedwarning__first__bit_axiom :
  ((commercialplane__plane__speedwarning__first__bit ) >= (0 : int))
 
 axiom commercialplane__plane__speedwarning__last__bit_axiom :
  ((commercialplane__plane__speedwarning__last__bit ) > (commercialplane__plane__speedwarning__first__bit ))
 
 axiom commercialplane__plane__speedwarning__position_axiom :
  ((commercialplane__plane__speedwarning__position ) >= (0 : int))
 
 val function user_eq 
   (a : plane) (b : plane) : bool
 
 val constant dummy 
   : plane

 
 type plane__ref =
  { mutable plane__content : plane }
 
 function plane__ref_plane__content__projection 
   (a : plane__ref) : plane =
  a.plane__content
 
 meta "model_projection" function plane__ref_plane__content__projection
 
 meta "inline:no" function plane__ref_plane__content__projection
 
 val plane__havoc 
   (x : plane__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T1b" defined at commercialplane.adb:17, created in Gnat2Why.Types.Translate_Type *)
module Commercialplane__takeoffspeed__T1b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (11 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "item" defined at a-textio.ads:509, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put_line__2__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant item [#"a-textio.ads" 509 0 0][@model_trace:7136] [@name:Item] [@model_projected] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:509, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put_line__2__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T2b" defined at commercialplane.adb:63, created in Gnat2Why.Types.Translate_Type *)
module Commercialplane__fuelwarning__T2b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (19 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T3b" defined at commercialplane.adb:71, created in Gnat2Why.Types.Translate_Type *)
module Commercialplane__speedwarning__T3b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (25 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T4b" defined at commercialplane.adb:75, created in Gnat2Why.Types.Translate_Type *)
module Commercialplane__speedwarning__T4b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (25 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T5b" defined at commercialplane.adb:82, created in Gnat2Why.Types.Translate_Type *)
module Commercialplane__speedwarningresponse__T5b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (42 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T6b" defined at commercialplane.adb:89, created in Gnat2Why.Types.Translate_Type *)
module Commercialplane__altitudewarning__T6b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (25 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T7b" defined at commercialplane.adb:93, created in Gnat2Why.Types.Translate_Type *)
module Commercialplane__altitudewarning__T7b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (25 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T8b" defined at commercialplane.adb:100, created in Gnat2Why.Types.Translate_Type *)
module Commercialplane__altitudewarningresponse__T8b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (49 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end
(* Module for defining a ref holding the value of variable "commercialplane" defined at commercialplane.ads:30, created in Gnat2Why.Decls.Translate_Variable *)
module Commercialplane__commercialplane
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Commercialplane__plane as Commercialplane__plane

 val commercialplane__split_fields [#"commercialplane.ads" 30 0 0][@model_trace:3119] [@name:commercialPlane] [@model_projected]  : Commercialplane__plane.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "commercialplane" defined at commercialplane.ads:30, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Commercialplane__commercialplane___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module declaring the external object "ada__text_io__standard_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_err  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_err  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__file_system," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__file_system
 use        "_gnatprove_standard".Main
 use        "int".Int

 val file_system  : Main.__private__ref 

end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_short_integer as Standard__short_short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_5 : int) (temp___skip_top_level_6 : bool) }

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_integer as Standard__short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_12 : int) (temp___skip_top_level_13 : bool) }

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_19 : int) (temp___skip_top_level_20 : bool) }

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_integer as Standard__long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_26 : int) (temp___skip_top_level_27 : bool) }

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_long_integer as Standard__long_long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_33 : int) (temp___skip_top_level_34 : bool) }

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural as Standard__natural

 predicate dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_40 : int) (temp___skip_top_level_41 : bool) }

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive as Standard__positive

 predicate dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_47 : int) (temp___skip_top_level_48 : bool) }

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__short_float as Standard__short_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) }

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__float as Standard__float

 predicate dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) }

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64
 use        Standard__long_float as Standard__long_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) }

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_75 : int) (temp___skip_top_level_76 : bool) }

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_82 : int) (temp___skip_top_level_83 : bool) }

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_89 : int) (temp___skip_top_level_90 : bool) }

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string

 predicate dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))
 val dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) }

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_string as Standard__wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))
 val dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) }

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_string as Standard__wide_wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))
 val dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) }

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__duration as Standard__duration

 predicate dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) =
  (if (( temp___is_init_112 \/ (Standard__duration.first <= Standard__duration.last) )) then (
   (Standard__duration.dynamic_property Standard__duration.first Standard__duration.last temp___expr_116)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) }

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_8 as Standard__integer_8

 predicate dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_124 : int) (temp___skip_top_level_125 : bool) }

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_16 as Standard__integer_16

 predicate dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_131 : int) (temp___skip_top_level_132 : bool) }

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_32 as Standard__integer_32

 predicate dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_138 : int) (temp___skip_top_level_139 : bool) }

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_64 as Standard__integer_64

 predicate dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_145 : int) (temp___skip_top_level_146 : bool) }

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__universal_integer as Standard__universal_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_152 : int) (temp___skip_top_level_153 : bool) }

end

(* Module for possibly declaring a logic function for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__line_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function line_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) (ada__text_io__file_system : Main.__private) : int
 
 val predicate line_length__2__function_guard 
   (temp___result_154 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) (ada__text_io__file_system : Main.__private)

end

(* Module for possibly declaring a logic function for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__page_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function page_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) (ada__text_io__file_system : Main.__private) : int
 
 val predicate page_length__2__function_guard 
   (temp___result_155 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) (ada__text_io__file_system : Main.__private)

end

(* Module for possibly declaring a logic function for "takeoff__2" defined at commercialplane.ads:45, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Commercialplane__takeoff__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "takeoffspeed" defined at commercialplane.ads:51, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Commercialplane__takeoffspeed
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "takeoffaltitude" defined at commercialplane.ads:56, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Commercialplane__takeoffaltitude
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "flying__2" defined at commercialplane.ads:61, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Commercialplane__flying__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "fuelusage" defined at commercialplane.ads:66, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Commercialplane__fuelusage
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "landing__2" defined at commercialplane.ads:71, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Commercialplane__landing__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "intow" defined at commercialplane.ads:76, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Commercialplane__intow
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "fuelwarning" defined at commercialplane.ads:81, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Commercialplane__fuelwarning
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "speedwarning" defined at commercialplane.ads:86, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Commercialplane__speedwarning
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "speedwarningresponse" defined at commercialplane.ads:91, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Commercialplane__speedwarningresponse
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "altitudewarning" defined at commercialplane.ads:96, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Commercialplane__altitudewarning
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "altitudewarningresponse" defined at commercialplane.ads:101, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Commercialplane__altitudewarningresponse
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "flyingidle" defined at commercialplane.ads:106, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Commercialplane__flyingidle
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "put_line__2" defined at a-textio.ads:508, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__put_line__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__TcountB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__text_io__count as Ada__text_io__count

 predicate dynamic_invariant [@inline] 
   (temp___expr_160 : int) (temp___is_init_156 : bool) (temp___skip_constant_157 : bool) (temp___do_toplevel_158 : bool) (temp___do_typ_inv_159 : bool) =
  (if (( temp___is_init_156 \/ (Ada__text_io__count.first <= Ada__text_io__count.last) )) then (
   (Ada__text_io__count.dynamic_property Ada__text_io__count.first Ada__text_io__count.last temp___expr_160)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_160 : int) (temp___is_init_156 : bool) (temp___skip_constant_157 : bool) (temp___do_toplevel_158 : bool) (temp___do_typ_inv_159 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_160 : int) (temp___is_init_156 : bool) (temp___skip_constant_157 : bool) (temp___do_toplevel_158 : bool) (temp___do_typ_inv_159 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_161 : int) (temp___skip_top_level_162 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_161 : int) (temp___skip_top_level_162 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_161 : int) (temp___skip_top_level_162 : bool) }

end

(* Module giving axioms for type "TfuelB" defined at commercialplane.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Commercialplane__TfuelB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "fuel" defined at commercialplane.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Commercialplane__fuel___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Commercialplane__fuel as Commercialplane__fuel

 predicate dynamic_invariant [@inline] 
   (temp___expr_167 : int) (temp___is_init_163 : bool) (temp___skip_constant_164 : bool) (temp___do_toplevel_165 : bool) (temp___do_typ_inv_166 : bool) =
  (if (( temp___is_init_163 \/ (Commercialplane__fuel.first <= Commercialplane__fuel.last) )) then (
   (Commercialplane__fuel.dynamic_property Commercialplane__fuel.first Commercialplane__fuel.last temp___expr_167)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_167 : int) (temp___is_init_163 : bool) (temp___skip_constant_164 : bool) (temp___do_toplevel_165 : bool) (temp___do_typ_inv_166 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_167 : int) (temp___is_init_163 : bool) (temp___skip_constant_164 : bool) (temp___do_toplevel_165 : bool) (temp___do_typ_inv_166 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_168 : int) (temp___skip_top_level_169 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_168 : int) (temp___skip_top_level_169 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_168 : int) (temp___skip_top_level_169 : bool) }

end

(* Module giving axioms for type "TairspeedB" defined at commercialplane.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Commercialplane__TairspeedB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "airspeed" defined at commercialplane.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Commercialplane__airspeed___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Commercialplane__airspeed as Commercialplane__airspeed

 predicate dynamic_invariant [@inline] 
   (temp___expr_174 : int) (temp___is_init_170 : bool) (temp___skip_constant_171 : bool) (temp___do_toplevel_172 : bool) (temp___do_typ_inv_173 : bool) =
  (if (( temp___is_init_170 \/ (Commercialplane__airspeed.first <= Commercialplane__airspeed.last) )) then (
   (Commercialplane__airspeed.dynamic_property Commercialplane__airspeed.first Commercialplane__airspeed.last temp___expr_174)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_174 : int) (temp___is_init_170 : bool) (temp___skip_constant_171 : bool) (temp___do_toplevel_172 : bool) (temp___do_typ_inv_173 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_174 : int) (temp___is_init_170 : bool) (temp___skip_constant_171 : bool) (temp___do_toplevel_172 : bool) (temp___do_typ_inv_173 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_175 : int) (temp___skip_top_level_176 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_175 : int) (temp___skip_top_level_176 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_175 : int) (temp___skip_top_level_176 : bool) }

end

(* Module giving axioms for type "TaltitudeB" defined at commercialplane.ads:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Commercialplane__TaltitudeB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "altitude" defined at commercialplane.ads:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Commercialplane__altitude___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Commercialplane__altitude as Commercialplane__altitude

 predicate dynamic_invariant [@inline] 
   (temp___expr_181 : int) (temp___is_init_177 : bool) (temp___skip_constant_178 : bool) (temp___do_toplevel_179 : bool) (temp___do_typ_inv_180 : bool) =
  (if (( temp___is_init_177 \/ (Commercialplane__altitude.first <= Commercialplane__altitude.last) )) then (
   (Commercialplane__altitude.dynamic_property Commercialplane__altitude.first Commercialplane__altitude.last temp___expr_181)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_181 : int) (temp___is_init_177 : bool) (temp___skip_constant_178 : bool) (temp___do_toplevel_179 : bool) (temp___do_typ_inv_180 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_181 : int) (temp___is_init_177 : bool) (temp___skip_constant_178 : bool) (temp___do_toplevel_179 : bool) (temp___do_typ_inv_180 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_182 : int) (temp___skip_top_level_183 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_182 : int) (temp___skip_top_level_183 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_182 : int) (temp___skip_top_level_183 : bool) }

end

(* Module giving axioms for type "landinggear" defined at commercialplane.ads:9, created in Gnat2Why.Types.Generate_Type_Completion *)
module Commercialplane__landinggear___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Commercialplane__landinggear as Commercialplane__landinggear

 predicate dynamic_invariant [@inline] 
   (temp___expr_188 : int) (temp___is_init_184 : bool) (temp___skip_constant_185 : bool) (temp___do_toplevel_186 : bool) (temp___do_typ_inv_187 : bool) =
  (if (( temp___is_init_184 \/ (Commercialplane__landinggear.first <= Commercialplane__landinggear.last) )) then (
   (Commercialplane__landinggear.dynamic_property Commercialplane__landinggear.first Commercialplane__landinggear.last temp___expr_188)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_188 : int) (temp___is_init_184 : bool) (temp___skip_constant_185 : bool) (temp___do_toplevel_186 : bool) (temp___do_typ_inv_187 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_188 : int) (temp___is_init_184 : bool) (temp___skip_constant_185 : bool) (temp___do_toplevel_186 : bool) (temp___do_typ_inv_187 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_189 : int) (temp___skip_top_level_190 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_189 : int) (temp___skip_top_level_190 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_189 : int) (temp___skip_top_level_190 : bool) }

end

(* Module giving axioms for type "door" defined at commercialplane.ads:10, created in Gnat2Why.Types.Generate_Type_Completion *)
module Commercialplane__door___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Commercialplane__door as Commercialplane__door

 predicate dynamic_invariant [@inline] 
   (temp___expr_195 : int) (temp___is_init_191 : bool) (temp___skip_constant_192 : bool) (temp___do_toplevel_193 : bool) (temp___do_typ_inv_194 : bool) =
  (if (( temp___is_init_191 \/ (Commercialplane__door.first <= Commercialplane__door.last) )) then (
   (Commercialplane__door.dynamic_property Commercialplane__door.first Commercialplane__door.last temp___expr_195)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_195 : int) (temp___is_init_191 : bool) (temp___skip_constant_192 : bool) (temp___do_toplevel_193 : bool) (temp___do_typ_inv_194 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_195 : int) (temp___is_init_191 : bool) (temp___skip_constant_192 : bool) (temp___do_toplevel_193 : bool) (temp___do_typ_inv_194 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_196 : int) (temp___skip_top_level_197 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_196 : int) (temp___skip_top_level_197 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_196 : int) (temp___skip_top_level_197 : bool) }

end

(* Module giving axioms for type "engine" defined at commercialplane.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Commercialplane__engine___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Commercialplane__engine as Commercialplane__engine

 predicate dynamic_invariant [@inline] 
   (temp___expr_202 : int) (temp___is_init_198 : bool) (temp___skip_constant_199 : bool) (temp___do_toplevel_200 : bool) (temp___do_typ_inv_201 : bool) =
  (if (( temp___is_init_198 \/ (Commercialplane__engine.first <= Commercialplane__engine.last) )) then (
   (Commercialplane__engine.dynamic_property Commercialplane__engine.first Commercialplane__engine.last temp___expr_202)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_202 : int) (temp___is_init_198 : bool) (temp___skip_constant_199 : bool) (temp___do_toplevel_200 : bool) (temp___do_typ_inv_201 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_202 : int) (temp___is_init_198 : bool) (temp___skip_constant_199 : bool) (temp___do_toplevel_200 : bool) (temp___do_typ_inv_201 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_203 : int) (temp___skip_top_level_204 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_203 : int) (temp___skip_top_level_204 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_203 : int) (temp___skip_top_level_204 : bool) }

end

(* Module giving axioms for type "currentactivity" defined at commercialplane.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Commercialplane__currentactivity___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Commercialplane__currentactivity as Commercialplane__currentactivity

 predicate dynamic_invariant [@inline] 
   (temp___expr_209 : int) (temp___is_init_205 : bool) (temp___skip_constant_206 : bool) (temp___do_toplevel_207 : bool) (temp___do_typ_inv_208 : bool) =
  (if (( temp___is_init_205 \/ (Commercialplane__currentactivity.first <= Commercialplane__currentactivity.last) )) then (
   (Commercialplane__currentactivity.dynamic_property Commercialplane__currentactivity.first Commercialplane__currentactivity.last temp___expr_209)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_209 : int) (temp___is_init_205 : bool) (temp___skip_constant_206 : bool) (temp___do_toplevel_207 : bool) (temp___do_typ_inv_208 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_209 : int) (temp___is_init_205 : bool) (temp___skip_constant_206 : bool) (temp___do_toplevel_207 : bool) (temp___do_typ_inv_208 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_210 : int) (temp___skip_top_level_211 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_210 : int) (temp___skip_top_level_211 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_210 : int) (temp___skip_top_level_211 : bool) }

end

(* Module giving axioms for type "warninglight" defined at commercialplane.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Commercialplane__warninglight___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Commercialplane__warninglight as Commercialplane__warninglight

 predicate dynamic_invariant [@inline] 
   (temp___expr_216 : int) (temp___is_init_212 : bool) (temp___skip_constant_213 : bool) (temp___do_toplevel_214 : bool) (temp___do_typ_inv_215 : bool) =
  (if (( temp___is_init_212 \/ (Commercialplane__warninglight.first <= Commercialplane__warninglight.last) )) then (
   (Commercialplane__warninglight.dynamic_property Commercialplane__warninglight.first Commercialplane__warninglight.last temp___expr_216)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_216 : int) (temp___is_init_212 : bool) (temp___skip_constant_213 : bool) (temp___do_toplevel_214 : bool) (temp___do_typ_inv_215 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_216 : int) (temp___is_init_212 : bool) (temp___skip_constant_213 : bool) (temp___do_toplevel_214 : bool) (temp___do_typ_inv_215 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_217 : int) (temp___skip_top_level_218 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_217 : int) (temp___skip_top_level_218 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_217 : int) (temp___skip_top_level_218 : bool) }

end

(* Module giving axioms for type "plane" defined at commercialplane.ads:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Commercialplane__plane___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Commercialplane__plane as Commercialplane__plane

 predicate dynamic_invariant [@inline] 
   (temp___expr_223 : Commercialplane__plane.plane) (temp___is_init_219 : bool) (temp___skip_constant_220 : bool) (temp___do_toplevel_221 : bool) (temp___do_typ_inv_222 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_223 : Commercialplane__plane.plane) (temp___is_init_219 : bool) (temp___skip_constant_220 : bool) (temp___do_toplevel_221 : bool) (temp___do_typ_inv_222 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_223 : Commercialplane__plane.plane) (temp___is_init_219 : bool) (temp___skip_constant_220 : bool) (temp___do_toplevel_221 : bool) (temp___do_typ_inv_222 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_224 : Commercialplane__plane.plane) (temp___skip_top_level_225 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_224 : Commercialplane__plane.plane) (temp___skip_top_level_225 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_224 : Commercialplane__plane.plane) (temp___skip_top_level_225 : bool) }

end

(* Module giving axioms for type "T1b" defined at commercialplane.adb:17, created in Gnat2Why.Types.Generate_Type_Completion *)
module Commercialplane__takeoffspeed__T1b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T2b" defined at commercialplane.adb:63, created in Gnat2Why.Types.Generate_Type_Completion *)
module Commercialplane__fuelwarning__T2b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T3b" defined at commercialplane.adb:71, created in Gnat2Why.Types.Generate_Type_Completion *)
module Commercialplane__speedwarning__T3b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T4b" defined at commercialplane.adb:75, created in Gnat2Why.Types.Generate_Type_Completion *)
module Commercialplane__speedwarning__T4b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T5b" defined at commercialplane.adb:82, created in Gnat2Why.Types.Generate_Type_Completion *)
module Commercialplane__speedwarningresponse__T5b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T6b" defined at commercialplane.adb:89, created in Gnat2Why.Types.Generate_Type_Completion *)
module Commercialplane__altitudewarning__T6b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T7b" defined at commercialplane.adb:93, created in Gnat2Why.Types.Generate_Type_Completion *)
module Commercialplane__altitudewarning__T7b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T8b" defined at commercialplane.adb:100, created in Gnat2Why.Types.Generate_Type_Completion *)
module Commercialplane__altitudewarningresponse__T8b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a value for string literal  defined at commercialplane.adb:17, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_242
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_242 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_242__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_242 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_242 __void_param) (1 : int))) = (84 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_242 __void_param) (2 : int))) = (97 : int)) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_242 __void_param) (3 : int))) = (107 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_242 __void_param) (4 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_242 __void_param) (5 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_242 __void_param) (6 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_242 __void_param) (7 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_242 __void_param) (8 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_242 __void_param) (9 : int))) = (102 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_242 __void_param) (10 : int))) = (102 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_242 __void_param) (11 : int))) = (46 : int)) ) ) ) ))

end

(* Module for defining a value for string literal  defined at commercialplane.adb:63, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_260
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_260 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_260__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_260 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_260 __void_param) (1 : int))) = (87 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_260 __void_param) (2 : int))) = (97 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_260 __void_param) (3 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_260 __void_param) (4 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_260 __void_param) (5 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_260 __void_param) (6 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_260 __void_param) (7 : int))) = (103 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_260 __void_param) (8 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_260 __void_param) (9 : int))) = (45 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_260 __void_param) (10 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_260 __void_param) (11 : int))) = (76 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_260 __void_param) (12 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_260 __void_param) (13 : int))) = (119 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_260 __void_param) (14 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_260 __void_param) (15 : int))) = (102 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_260 __void_param) (16 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_260 __void_param) (17 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_260 __void_param) (18 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_260 __void_param) (19 : int))) = (46 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at commercialplane.adb:71, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_263
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_263 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_263__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_263 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_263 __void_param) (1 : int))) = (87 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_263 __void_param) (2 : int))) = (97 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_263 __void_param) (3 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_263 __void_param) (4 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_263 __void_param) (5 : int))) = (105 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_263 __void_param) (6 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_263 __void_param) (7 : int))) = (103 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_263 __void_param) (8 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_263 __void_param) (9 : int))) = (45 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_263 __void_param) (10 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_263 __void_param) (11 : int))) = (103 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_263 __void_param) (12 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_263 __void_param) (13 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_263 __void_param) (14 : int))) = (110 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_263 __void_param) (15 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_263 __void_param) (16 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_263 __void_param) (17 : int))) = (116 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_263 __void_param) (18 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_263 __void_param) (19 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_263 __void_param) (20 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_263 __void_param) (21 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_263 __void_param) (22 : int))) = (108 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_263 __void_param) (23 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_263 __void_param) (24 : int))) = (119 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_263 __void_param) (25 : int))) = (46 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at commercialplane.adb:75, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_266
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_266 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_266__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_266 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_266 __void_param) (1 : int))) = (87 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_266 __void_param) (2 : int))) = (97 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_266 __void_param) (3 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_266 __void_param) (4 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_266 __void_param) (5 : int))) = (105 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_266 __void_param) (6 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_266 __void_param) (7 : int))) = (103 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_266 __void_param) (8 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_266 __void_param) (9 : int))) = (45 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_266 __void_param) (10 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_266 __void_param) (11 : int))) = (103 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_266 __void_param) (12 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_266 __void_param) (13 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_266 __void_param) (14 : int))) = (110 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_266 __void_param) (15 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_266 __void_param) (16 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_266 __void_param) (17 : int))) = (116 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_266 __void_param) (18 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_266 __void_param) (19 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_266 __void_param) (20 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_266 __void_param) (21 : int))) = (102 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_266 __void_param) (22 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_266 __void_param) (23 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_266 __void_param) (24 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_266 __void_param) (25 : int))) = (46 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at commercialplane.adb:82, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_269
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_269 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_269__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_269 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_269 __void_param) (1 : int))) = (83 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_269 __void_param) (2 : int))) = (108 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_269 __void_param) (3 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_269 __void_param) (4 : int))) = (119 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_269 __void_param) (5 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_269 __void_param) (6 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_269 __void_param) (7 : int))) = (103 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_269 __void_param) (8 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_269 __void_param) (9 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_269 __void_param) (10 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_269 __void_param) (11 : int))) = (119 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_269 __void_param) (12 : int))) = (110 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_269 __void_param) (13 : int))) = (46 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_269 __void_param) (14 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_269 __void_param) (15 : int))) = (99 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_269 __void_param) (16 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_269 __void_param) (17 : int))) = (109 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_269 __void_param) (18 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_269 __void_param) (19 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_269 __void_param) (20 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_269 __void_param) (21 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_269 __void_param) (22 : int))) = (105 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_269 __void_param) (23 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_269 __void_param) (24 : int))) = (108 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_269 __void_param) (25 : int))) = (80 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_269 __void_param) (26 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_269 __void_param) (27 : int))) = (97 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_269 __void_param) (28 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_269 __void_param) (29 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_269 __void_param) (30 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_269 __void_param) (31 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_269 __void_param) (32 : int))) = (101 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_269 __void_param) (33 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_269 __void_param) (34 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_269 __void_param) (35 : int))) = (99 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_269 __void_param) (36 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_269 __void_param) (37 : int))) = (116 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_269 __void_param) (38 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_269 __void_param) (39 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_269 __void_param) (40 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_269 __void_param) (41 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_269 __void_param) (42 : int))) = (32 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at commercialplane.adb:89, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_275
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_275 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_275__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_275 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (1 : int))) = (87 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (2 : int))) = (97 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (3 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (4 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (5 : int))) = (105 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (6 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (7 : int))) = (103 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (8 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (9 : int))) = (45 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (10 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (11 : int))) = (102 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (12 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (13 : int))) = (121 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (14 : int))) = (105 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (15 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (16 : int))) = (103 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (17 : int))) = (32 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (18 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (19 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (20 : int))) = (111 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (21 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (22 : int))) = (108 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (23 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (24 : int))) = (119 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (25 : int))) = (46 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at commercialplane.adb:93, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_278
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_278 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_278__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_278 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_278 __void_param) (1 : int))) = (87 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_278 __void_param) (2 : int))) = (97 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_278 __void_param) (3 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_278 __void_param) (4 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_278 __void_param) (5 : int))) = (105 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_278 __void_param) (6 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_278 __void_param) (7 : int))) = (103 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_278 __void_param) (8 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_278 __void_param) (9 : int))) = (45 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_278 __void_param) (10 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_278 __void_param) (11 : int))) = (102 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_278 __void_param) (12 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_278 __void_param) (13 : int))) = (121 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_278 __void_param) (14 : int))) = (105 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_278 __void_param) (15 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_278 __void_param) (16 : int))) = (103 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_278 __void_param) (17 : int))) = (32 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_278 __void_param) (18 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_278 __void_param) (19 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_278 __void_param) (20 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_278 __void_param) (21 : int))) = (104 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_278 __void_param) (22 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_278 __void_param) (23 : int))) = (103 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_278 __void_param) (24 : int))) = (104 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_278 __void_param) (25 : int))) = (46 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at commercialplane.adb:100, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_281
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_281 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_281__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_281 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (1 : int))) = (68 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (2 : int))) = (101 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (3 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (4 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (5 : int))) = (101 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (6 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (7 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (8 : int))) = (105 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (9 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (10 : int))) = (103 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (11 : int))) = (32 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (12 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (13 : int))) = (108 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (14 : int))) = (116 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (15 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (16 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (17 : int))) = (117 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (18 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (19 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (20 : int))) = (46 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (21 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (22 : int))) = (99 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (23 : int))) = (111 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (24 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (25 : int))) = (109 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (26 : int))) = (101 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (27 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (28 : int))) = (99 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (29 : int))) = (105 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (30 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (31 : int))) = (108 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (32 : int))) = (80 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (33 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (34 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (35 : int))) = (110 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (36 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (37 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (38 : int))) = (97 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (39 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (40 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (41 : int))) = (105 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (42 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (43 : int))) = (117 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (44 : int))) = (100 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (45 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (46 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (47 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (48 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (49 : int))) = (32 : int)) ) ) ) ) ) ))

end
(* Module for declaring a program function (and possibly an axiom) for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__line_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val line_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
 
 axiom line_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   ada__text_io__file_system   : Main.__private [(Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err ada__text_io__file_system)].
   ( true -> (let result = (Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err ada__text_io__file_system) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__page_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val page_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
 
 axiom page_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   ada__text_io__file_system   : Main.__private [(Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err ada__text_io__file_system)].
   ( true -> (let result = (Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err ada__text_io__file_system) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "takeoff__2" defined at commercialplane.ads:45, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Commercialplane__takeoff__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Commercialplane__commercialplane as Commercialplane__commercialplane
 use        Commercialplane__plane as Commercialplane__plane
 use        Commercialplane__plane___axiom as Commercialplane__plane___axiom
 use        Commercialplane__fuel as Commercialplane__fuel
 use        Commercialplane__fuel__rep as Commercialplane__fuel__rep
 use        Commercialplane__door as Commercialplane__door
 use        Commercialplane__door__rep as Commercialplane__door__rep
 use        Commercialplane__engine as Commercialplane__engine
 use        Commercialplane__engine__rep as Commercialplane__engine__rep
 use        Commercialplane__currentactivity as Commercialplane__currentactivity
 use        Commercialplane__currentactivity__rep as Commercialplane__currentactivity__rep

 val takeoff__2 
   (__void_param : unit) : unit
  requires {  ( ( ( ( ( [@GP_Pretty_Ada:3185] ((Commercialplane__currentactivity__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode) = (3 : int)) ) /\ ( [@GP_Pretty_Ada:3191] ((Commercialplane__engine__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__ignition) = (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:3197] ((Commercialplane__door__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__cockpit) = (1 : int)) ) ) /\ ( [@GP_Pretty_Ada:3203] ((Commercialplane__door__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__extdoor) = (1 : int)) ) ) /\ ( [@GP_Pretty_Ada:3209] ((Commercialplane__fuel__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__fueltank) >= (50 : int)) ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:18903] ((Commercialplane__currentactivity__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode) = (0 : int)) ) /\ (Commercialplane__plane___axiom.dynamic_invariant { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content } True True True True) ) }
  reads {Commercialplane__commercialplane.commercialplane__split_fields}
  writes {Commercialplane__commercialplane.commercialplane__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "takeoffspeed" defined at commercialplane.ads:51, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Commercialplane__takeoffspeed___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Commercialplane__commercialplane as Commercialplane__commercialplane
 use        Commercialplane__plane as Commercialplane__plane
 use        Commercialplane__plane___axiom as Commercialplane__plane___axiom
 use        Commercialplane__airspeed as Commercialplane__airspeed
 use        Commercialplane__airspeed__rep as Commercialplane__airspeed__rep
 use        Commercialplane__currentactivity as Commercialplane__currentactivity
 use        Commercialplane__currentactivity__rep as Commercialplane__currentactivity__rep
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val takeoffspeed 
   (__void_param : unit) : unit
  requires {  ( ( ( [@GP_Pretty_Ada:3243] ((Commercialplane__currentactivity__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode) = (0 : int)) ) /\ ( [@GP_Pretty_Ada:3249] ((Commercialplane__airspeed__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity) >= (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:3255] ((Commercialplane__airspeed__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity) < (250 : int)) ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:18970] ((Commercialplane__airspeed__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity) = ((Commercialplane__airspeed__rep.to_rep (old { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity )) + (10 : int))) ) /\ (Commercialplane__plane___axiom.dynamic_invariant { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content } True True True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system, Commercialplane__commercialplane.commercialplane__split_fields}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system, Commercialplane__commercialplane.commercialplane__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "takeoffaltitude" defined at commercialplane.ads:56, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Commercialplane__takeoffaltitude___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Commercialplane__commercialplane as Commercialplane__commercialplane
 use        Commercialplane__plane as Commercialplane__plane
 use        Commercialplane__plane___axiom as Commercialplane__plane___axiom
 use        Commercialplane__altitude as Commercialplane__altitude
 use        Commercialplane__altitude__rep as Commercialplane__altitude__rep
 use        Commercialplane__currentactivity as Commercialplane__currentactivity
 use        Commercialplane__currentactivity__rep as Commercialplane__currentactivity__rep

 val takeoffaltitude 
   (__void_param : unit) : unit
  requires {  ( ( ( [@GP_Pretty_Ada:3293] ((Commercialplane__currentactivity__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode) = (0 : int)) ) /\ ( [@GP_Pretty_Ada:3299] ((Commercialplane__altitude__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height) >= (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:3305] ((Commercialplane__altitude__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height) < (500 : int)) ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:19035] ((Commercialplane__altitude__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height) = ((Commercialplane__altitude__rep.to_rep (old { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height )) + (50 : int))) ) /\ (Commercialplane__plane___axiom.dynamic_invariant { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content } True True True True) ) }
  reads {Commercialplane__commercialplane.commercialplane__split_fields}
  writes {Commercialplane__commercialplane.commercialplane__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "flying__2" defined at commercialplane.ads:61, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Commercialplane__flying__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Commercialplane__commercialplane as Commercialplane__commercialplane
 use        Commercialplane__plane as Commercialplane__plane
 use        Commercialplane__plane___axiom as Commercialplane__plane___axiom
 use        Commercialplane__airspeed as Commercialplane__airspeed
 use        Commercialplane__airspeed__rep as Commercialplane__airspeed__rep
 use        Commercialplane__altitude as Commercialplane__altitude
 use        Commercialplane__altitude__rep as Commercialplane__altitude__rep
 use        Commercialplane__currentactivity as Commercialplane__currentactivity
 use        Commercialplane__currentactivity__rep as Commercialplane__currentactivity__rep

 val flying__2 
   (__void_param : unit) : unit
  requires {  ( ( ( [@GP_Pretty_Ada:3343] ((Commercialplane__currentactivity__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode) = (0 : int)) ) /\ ( [@GP_Pretty_Ada:3349] ((Commercialplane__airspeed__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity) >= (500 : int)) ) ) /\ ( [@GP_Pretty_Ada:3355] ((Commercialplane__altitude__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height) >= (1200 : int)) ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:19095] ((Commercialplane__currentactivity__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode) = (2 : int)) ) /\ (Commercialplane__plane___axiom.dynamic_invariant { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content } True True True True) ) }
  reads {Commercialplane__commercialplane.commercialplane__split_fields}
  writes {Commercialplane__commercialplane.commercialplane__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "fuelusage" defined at commercialplane.ads:66, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Commercialplane__fuelusage___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Commercialplane__commercialplane as Commercialplane__commercialplane
 use        Commercialplane__plane as Commercialplane__plane
 use        Commercialplane__plane___axiom as Commercialplane__plane___axiom
 use        Commercialplane__fuel as Commercialplane__fuel
 use        Commercialplane__fuel__rep as Commercialplane__fuel__rep
 use        Commercialplane__currentactivity as Commercialplane__currentactivity
 use        Commercialplane__currentactivity__rep as Commercialplane__currentactivity__rep

 val fuelusage 
   (__void_param : unit) : unit
  requires {  ( ( [@GP_Pretty_Ada:3387] ((Commercialplane__currentactivity__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode) = (2 : int)) ) /\ ( [@GP_Pretty_Ada:3393] ((Commercialplane__fuel__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__fueltank) >= (25 : int)) ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:19154] ((Commercialplane__fuel__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__fueltank) = ((Commercialplane__fuel__rep.to_rep (old { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__fueltank )) - (10 : int))) ) /\ (Commercialplane__plane___axiom.dynamic_invariant { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content } True True True True) ) }
  reads {Commercialplane__commercialplane.commercialplane__split_fields}
  writes {Commercialplane__commercialplane.commercialplane__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "landing__2" defined at commercialplane.ads:71, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Commercialplane__landing__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Commercialplane__commercialplane as Commercialplane__commercialplane
 use        Commercialplane__plane as Commercialplane__plane
 use        Commercialplane__plane___axiom as Commercialplane__plane___axiom
 use        Commercialplane__airspeed as Commercialplane__airspeed
 use        Commercialplane__airspeed__rep as Commercialplane__airspeed__rep
 use        Commercialplane__altitude as Commercialplane__altitude
 use        Commercialplane__altitude__rep as Commercialplane__altitude__rep
 use        Commercialplane__landinggear as Commercialplane__landinggear
 use        Commercialplane__landinggear__rep as Commercialplane__landinggear__rep
 use        Commercialplane__currentactivity as Commercialplane__currentactivity
 use        Commercialplane__currentactivity__rep as Commercialplane__currentactivity__rep

 val landing__2 
   (__void_param : unit) : unit
  requires {  ( ( ( [@GP_Pretty_Ada:3431] ((Commercialplane__currentactivity__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode) = (1 : int)) ) /\ ( [@GP_Pretty_Ada:3437] ((Commercialplane__airspeed__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity) >= (100 : int)) ) ) /\ ( [@GP_Pretty_Ada:3443] ((Commercialplane__altitude__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height) >= (100 : int)) ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:19214] ((Commercialplane__landinggear__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__landgear) = (0 : int)) ) /\ (Commercialplane__plane___axiom.dynamic_invariant { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content } True True True True) ) }
  reads {Commercialplane__commercialplane.commercialplane__split_fields}
  writes {Commercialplane__commercialplane.commercialplane__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "intow" defined at commercialplane.ads:76, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Commercialplane__intow___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Commercialplane__commercialplane as Commercialplane__commercialplane
 use        Commercialplane__plane as Commercialplane__plane
 use        Commercialplane__plane___axiom as Commercialplane__plane___axiom
 use        Commercialplane__airspeed as Commercialplane__airspeed
 use        Commercialplane__airspeed__rep as Commercialplane__airspeed__rep
 use        Commercialplane__altitude as Commercialplane__altitude
 use        Commercialplane__altitude__rep as Commercialplane__altitude__rep
 use        Commercialplane__engine as Commercialplane__engine
 use        Commercialplane__engine__rep as Commercialplane__engine__rep
 use        Commercialplane__currentactivity as Commercialplane__currentactivity
 use        Commercialplane__currentactivity__rep as Commercialplane__currentactivity__rep

 val intow 
   (__void_param : unit) : unit
  requires {  ( ( ( [@GP_Pretty_Ada:3475] ((Commercialplane__currentactivity__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode) = (3 : int)) ) /\ ( [@GP_Pretty_Ada:3481] ((Commercialplane__airspeed__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity) = (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:3487] ((Commercialplane__altitude__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height) = (0 : int)) ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:19274] ((Commercialplane__engine__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__ignition) = (1 : int)) ) /\ (Commercialplane__plane___axiom.dynamic_invariant { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content } True True True True) ) }
  reads {Commercialplane__commercialplane.commercialplane__split_fields}
  writes {Commercialplane__commercialplane.commercialplane__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "fuelwarning" defined at commercialplane.ads:81, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Commercialplane__fuelwarning___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Commercialplane__commercialplane as Commercialplane__commercialplane
 use        Commercialplane__plane as Commercialplane__plane
 use        Commercialplane__plane___axiom as Commercialplane__plane___axiom
 use        Commercialplane__fuel as Commercialplane__fuel
 use        Commercialplane__fuel__rep as Commercialplane__fuel__rep
 use        Commercialplane__currentactivity as Commercialplane__currentactivity
 use        Commercialplane__currentactivity__rep as Commercialplane__currentactivity__rep
 use        Commercialplane__warninglight as Commercialplane__warninglight
 use        Commercialplane__warninglight__rep as Commercialplane__warninglight__rep
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val fuelwarning 
   (__void_param : unit) : unit
  requires {  ( ( [@GP_Pretty_Ada:3521] ((Commercialplane__currentactivity__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode) = (2 : int)) ) /\ ( [@GP_Pretty_Ada:3527] ((Commercialplane__fuel__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__fueltank) >= (25 : int)) ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:19330] ((Commercialplane__warninglight__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__fuelwarning) = (2 : int)) ) /\ (Commercialplane__plane___axiom.dynamic_invariant { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content } True True True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system, Commercialplane__commercialplane.commercialplane__split_fields}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system, Commercialplane__commercialplane.commercialplane__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "speedwarning" defined at commercialplane.ads:86, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Commercialplane__speedwarning___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Commercialplane__commercialplane as Commercialplane__commercialplane
 use        Commercialplane__plane as Commercialplane__plane
 use        Commercialplane__plane___axiom as Commercialplane__plane___axiom
 use        Commercialplane__airspeed as Commercialplane__airspeed
 use        Commercialplane__airspeed__rep as Commercialplane__airspeed__rep
 use        Commercialplane__currentactivity as Commercialplane__currentactivity
 use        Commercialplane__currentactivity__rep as Commercialplane__currentactivity__rep
 use        Commercialplane__warninglight as Commercialplane__warninglight
 use        Commercialplane__warninglight__rep as Commercialplane__warninglight__rep
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val speedwarning 
   (__void_param : unit) : unit
  requires {  ( ( ( [@GP_Pretty_Ada:3561] ((Commercialplane__currentactivity__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode) = (2 : int)) ) /\ ( [@GP_Pretty_Ada:3567] ((Commercialplane__airspeed__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity) < (250 : int)) ) ) /\ ( [@GP_Pretty_Ada:3573] ((Commercialplane__airspeed__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity) > (1000 : int)) ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:19392] ((Commercialplane__warninglight__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__speedwarning) = (2 : int)) ) /\ (Commercialplane__plane___axiom.dynamic_invariant { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content } True True True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system, Commercialplane__commercialplane.commercialplane__split_fields}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system, Commercialplane__commercialplane.commercialplane__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "speedwarningresponse" defined at commercialplane.ads:91, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Commercialplane__speedwarningresponse___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Commercialplane__commercialplane as Commercialplane__commercialplane
 use        Commercialplane__plane as Commercialplane__plane
 use        Commercialplane__plane___axiom as Commercialplane__plane___axiom
 use        Commercialplane__airspeed as Commercialplane__airspeed
 use        Commercialplane__airspeed__rep as Commercialplane__airspeed__rep
 use        Commercialplane__currentactivity as Commercialplane__currentactivity
 use        Commercialplane__currentactivity__rep as Commercialplane__currentactivity__rep
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val speedwarningresponse 
   (__void_param : unit) : unit
  requires {  ( ( ( [@GP_Pretty_Ada:3607] ((Commercialplane__currentactivity__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode) = (2 : int)) ) /\ ( [@GP_Pretty_Ada:3613] ((Commercialplane__airspeed__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity) <= (1000 : int)) ) ) /\ ( [@GP_Pretty_Ada:3619] ((Commercialplane__airspeed__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity) > (250 : int)) ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:19459] ((Commercialplane__airspeed__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity) = ((Commercialplane__airspeed__rep.to_rep (old { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity )) - (10 : int))) ) /\ (Commercialplane__plane___axiom.dynamic_invariant { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content } True True True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system, Commercialplane__commercialplane.commercialplane__split_fields}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system, Commercialplane__commercialplane.commercialplane__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "altitudewarning" defined at commercialplane.ads:96, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Commercialplane__altitudewarning___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Commercialplane__commercialplane as Commercialplane__commercialplane
 use        Commercialplane__plane as Commercialplane__plane
 use        Commercialplane__plane___axiom as Commercialplane__plane___axiom
 use        Commercialplane__airspeed as Commercialplane__airspeed
 use        Commercialplane__airspeed__rep as Commercialplane__airspeed__rep
 use        Commercialplane__altitude as Commercialplane__altitude
 use        Commercialplane__altitude__rep as Commercialplane__altitude__rep
 use        Commercialplane__currentactivity as Commercialplane__currentactivity
 use        Commercialplane__currentactivity__rep as Commercialplane__currentactivity__rep
 use        Commercialplane__warninglight as Commercialplane__warninglight
 use        Commercialplane__warninglight__rep as Commercialplane__warninglight__rep
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val altitudewarning 
   (__void_param : unit) : unit
  requires {  ( ( ( [@GP_Pretty_Ada:3659] ((Commercialplane__currentactivity__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode) = (2 : int)) ) /\ ( [@GP_Pretty_Ada:3665] ((Commercialplane__altitude__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height) < (500 : int)) ) ) /\ ( [@GP_Pretty_Ada:3671] ((Commercialplane__airspeed__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity) > (1200 : int)) ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:19521] ((Commercialplane__warninglight__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__heightwarning) = (2 : int)) ) /\ (Commercialplane__plane___axiom.dynamic_invariant { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content } True True True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system, Commercialplane__commercialplane.commercialplane__split_fields}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system, Commercialplane__commercialplane.commercialplane__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "altitudewarningresponse" defined at commercialplane.ads:101, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Commercialplane__altitudewarningresponse___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Commercialplane__commercialplane as Commercialplane__commercialplane
 use        Commercialplane__plane as Commercialplane__plane
 use        Commercialplane__plane___axiom as Commercialplane__plane___axiom
 use        Commercialplane__altitude as Commercialplane__altitude
 use        Commercialplane__altitude__rep as Commercialplane__altitude__rep
 use        Commercialplane__currentactivity as Commercialplane__currentactivity
 use        Commercialplane__currentactivity__rep as Commercialplane__currentactivity__rep
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val altitudewarningresponse 
   (__void_param : unit) : unit
  requires {  ( ( ( [@GP_Pretty_Ada:3705] ((Commercialplane__currentactivity__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode) = (2 : int)) ) /\ ( [@GP_Pretty_Ada:3711] ((Commercialplane__altitude__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height) <= (1200 : int)) ) ) /\ ( [@GP_Pretty_Ada:3717] ((Commercialplane__altitude__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height) > (500 : int)) ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:19588] ((Commercialplane__altitude__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height) = ((Commercialplane__altitude__rep.to_rep (old { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height )) - (50 : int))) ) /\ (Commercialplane__plane___axiom.dynamic_invariant { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content } True True True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system, Commercialplane__commercialplane.commercialplane__split_fields}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system, Commercialplane__commercialplane.commercialplane__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "flyingidle" defined at commercialplane.ads:106, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Commercialplane__flyingidle___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Commercialplane__commercialplane as Commercialplane__commercialplane
 use        Commercialplane__plane as Commercialplane__plane
 use        Commercialplane__plane___axiom as Commercialplane__plane___axiom
 use        Commercialplane__airspeed as Commercialplane__airspeed
 use        Commercialplane__airspeed__rep as Commercialplane__airspeed__rep
 use        Commercialplane__altitude as Commercialplane__altitude
 use        Commercialplane__altitude__rep as Commercialplane__altitude__rep
 use        Commercialplane__currentactivity as Commercialplane__currentactivity
 use        Commercialplane__currentactivity__rep as Commercialplane__currentactivity__rep

 val flyingidle 
   (__void_param : unit) : unit
  requires {  ( ( ( ( ( [@GP_Pretty_Ada:3755] ((Commercialplane__currentactivity__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode) = (2 : int)) ) /\ ( [@GP_Pretty_Ada:3761] ((Commercialplane__altitude__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height) >= (500 : int)) ) ) /\ ( [@GP_Pretty_Ada:3767] ((Commercialplane__altitude__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height) <= (1200 : int)) ) ) /\ ( [@GP_Pretty_Ada:3773] ((Commercialplane__airspeed__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity) <= (1000 : int)) ) ) /\ ( [@GP_Pretty_Ada:3779] ((Commercialplane__airspeed__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity) >= (250 : int)) ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:19660] ((Commercialplane__currentactivity__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode) = (2 : int)) ) /\ (Commercialplane__plane___axiom.dynamic_invariant { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content } True True True True) ) }
  reads {Commercialplane__commercialplane.commercialplane__split_fields}
  writes {Commercialplane__commercialplane.commercialplane__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "put_line__2" defined at a-textio.ads:508, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__put_line__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__string as Standard__string
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val put_line__2 
   (item : Standard__string.string) : unit
  requires {  true }
  ensures {  ( ( [@GP_Pretty_Ada:7155] ((old (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content) ) = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content)) ) /\ ( [@GP_Pretty_Ada:7161] ((old (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content) ) = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content)) ) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "commercialplane" defined at commercialplane.ads:3, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Commercialplane__package_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Commercialplane__commercialplane as Commercialplane__commercialplane
 use        Commercialplane__plane as Commercialplane__plane
 use        Commercialplane__plane___axiom as Commercialplane__plane___axiom
 use        Commercialplane__fuel as Commercialplane__fuel
 use        Commercialplane__airspeed as Commercialplane__airspeed
 use        Commercialplane__altitude as Commercialplane__altitude
 use        Commercialplane__landinggear as Commercialplane__landinggear
 use        Commercialplane__landinggear__rep as Commercialplane__landinggear__rep
 use        Commercialplane__door as Commercialplane__door
 use        Commercialplane__door__rep as Commercialplane__door__rep
 use        Commercialplane__engine as Commercialplane__engine
 use        Commercialplane__engine__rep as Commercialplane__engine__rep
 use        Commercialplane__currentactivity as Commercialplane__currentactivity
 use        Commercialplane__currentactivity__rep as Commercialplane__currentactivity__rep
 use        Commercialplane__warninglight as Commercialplane__warninglight
 use        Commercialplane__warninglight__rep as Commercialplane__warninglight__rep
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Commercialplane__fuel___axiom as Commercialplane__fuel___axiom
 use        Commercialplane__airspeed___axiom as Commercialplane__airspeed___axiom
 use        Commercialplane__altitude___axiom as Commercialplane__altitude___axiom
 use        Commercialplane__landinggear___axiom as Commercialplane__landinggear___axiom
 use        Commercialplane__door___axiom as Commercialplane__door___axiom
 use        Commercialplane__engine___axiom as Commercialplane__engine___axiom
 use        Commercialplane__currentactivity___axiom as Commercialplane__currentactivity___axiom
 use        Commercialplane__warninglight___axiom as Commercialplane__warninglight___axiom
 use        Commercialplane__plane___axiom as Commercialplane__plane___axiom
 use        Commercialplane__commercialplane___axiom as Commercialplane__commercialplane___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom

 let def [#"commercialplane.ads" 3 0 0][@GP_Subp:commercialplane.ads:3] 
   (__void_param : unit)
  requires { [#"commercialplane.ads" 3 0 0] true }
   = [@vc:divergent]
  ( [#"commercialplane.ads" 3 0 0] assume { [#"commercialplane.ads" 3 0 0] ( ((Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content) = (0 : int)) /\ ((Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content) = (0 : int)) ) };
  ();
  ([#"commercialplane.ads" 3 0 0] ());
  ([#"commercialplane.ads" 5 0 0] ());
  ([#"commercialplane.ads" 7 0 0] ());
  ([#"commercialplane.ads" 8 0 0] ());
  ([#"commercialplane.ads" 9 0 0] ());
  ([#"commercialplane.ads" 10 0 0] ());
  ([#"commercialplane.ads" 11 0 0] ());
  ([#"commercialplane.ads" 12 0 0] ());
  ([#"commercialplane.ads" 13 0 0] ());
  ([#"commercialplane.ads" 15 0 0] ());
  ([#"commercialplane.ads" 30 0 0] ());
  ([#"commercialplane.ads" 30 0 0] ());
  ([#"commercialplane.ads" 30 0 0] ());
  ([#"commercialplane.ads" 30 0 0] ());
  ([#"commercialplane.ads" 30 0 0] ());
  ([#"commercialplane.ads" 30 0 0] ());
  ([#"commercialplane.ads" 30 0 0] ());
  ([#"commercialplane.ads" 30 0 0] ());
  ([#"commercialplane.ads" 30 0 0] ());
  ([#"commercialplane.ads" 30 0 0] ());
  ([#"commercialplane.ads" 30 0 0] ());
  ([#"commercialplane.ads" 30 0 0] ());
  ([#"commercialplane.ads" 30 0 0] ( (let commercialplane__commercialplane__assume = { Commercialplane__plane.__split_fields = { Commercialplane__plane.rec__commercialplane__plane__fueltank = ( 100 : Commercialplane__fuel.fuel ); Commercialplane__plane.rec__commercialplane__plane__velocity = ( 0 : Commercialplane__airspeed.airspeed ); Commercialplane__plane.rec__commercialplane__plane__height = ( 0 : Commercialplane__altitude.altitude ); Commercialplane__plane.rec__commercialplane__plane__landgear = (Commercialplane__landinggear__rep.of_rep((1 : int))); Commercialplane__plane.rec__commercialplane__plane__cockpit = (Commercialplane__door__rep.of_rep((0 : int))); Commercialplane__plane.rec__commercialplane__plane__extdoor = (Commercialplane__door__rep.of_rep((0 : int))); Commercialplane__plane.rec__commercialplane__plane__ignition = (Commercialplane__engine__rep.of_rep((1 : int))); Commercialplane__plane.rec__commercialplane__plane__mode = (Commercialplane__currentactivity__rep.of_rep((3 : int))); Commercialplane__plane.rec__commercialplane__plane__fuelwarning = (Commercialplane__warninglight__rep.of_rep((0 : int))); Commercialplane__plane.rec__commercialplane__plane__heightwarning = (Commercialplane__warninglight__rep.of_rep((0 : int))); Commercialplane__plane.rec__commercialplane__plane__speedwarning = (Commercialplane__warninglight__rep.of_rep((0 : int))) } } in (
   [#"commercialplane.ads" 30 0 0] (Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content <- ( commercialplane__commercialplane__assume.Commercialplane__plane.__split_fields ))))
  ;
  [#"commercialplane.ads" 30 0 0] assume { [#"commercialplane.ads" 30 0 0] (Commercialplane__plane___axiom.dynamic_invariant { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content } True False True True) } ));
  ([#"commercialplane.ads" 45 0 0] ());
  ([#"commercialplane.ads" 49 0 0] ());
  ([#"commercialplane.ads" 47 0 0] ());
  ([#"commercialplane.ads" 46 0 0] ());
  ([#"commercialplane.ads" 51 0 0] ());
  ([#"commercialplane.ads" 54 0 0] ());
  ([#"commercialplane.ads" 53 0 0] ());
  ([#"commercialplane.ads" 52 0 0] ());
  ([#"commercialplane.ads" 56 0 0] ());
  ([#"commercialplane.ads" 59 0 0] ());
  ([#"commercialplane.ads" 58 0 0] ());
  ([#"commercialplane.ads" 57 0 0] ());
  ([#"commercialplane.ads" 61 0 0] ());
  ([#"commercialplane.ads" 64 0 0] ());
  ([#"commercialplane.ads" 63 0 0] ());
  ([#"commercialplane.ads" 62 0 0] ());
  ([#"commercialplane.ads" 66 0 0] ());
  ([#"commercialplane.ads" 69 0 0] ());
  ([#"commercialplane.ads" 68 0 0] ());
  ([#"commercialplane.ads" 67 0 0] ());
  ([#"commercialplane.ads" 71 0 0] ());
  ([#"commercialplane.ads" 74 0 0] ());
  ([#"commercialplane.ads" 73 0 0] ());
  ([#"commercialplane.ads" 72 0 0] ());
  ([#"commercialplane.ads" 76 0 0] ());
  ([#"commercialplane.ads" 79 0 0] ());
  ([#"commercialplane.ads" 78 0 0] ());
  ([#"commercialplane.ads" 77 0 0] ());
  ([#"commercialplane.ads" 81 0 0] ());
  ([#"commercialplane.ads" 84 0 0] ());
  ([#"commercialplane.ads" 83 0 0] ());
  ([#"commercialplane.ads" 82 0 0] ());
  ([#"commercialplane.ads" 86 0 0] ());
  ([#"commercialplane.ads" 89 0 0] ());
  ([#"commercialplane.ads" 88 0 0] ());
  ([#"commercialplane.ads" 87 0 0] ());
  ([#"commercialplane.ads" 91 0 0] ());
  ([#"commercialplane.ads" 94 0 0] ());
  ([#"commercialplane.ads" 93 0 0] ());
  ([#"commercialplane.ads" 92 0 0] ());
  ([#"commercialplane.ads" 96 0 0] ());
  ([#"commercialplane.ads" 99 0 0] ());
  ([#"commercialplane.ads" 98 0 0] ());
  ([#"commercialplane.ads" 97 0 0] ());
  ([#"commercialplane.ads" 101 0 0] ());
  ([#"commercialplane.ads" 104 0 0] ());
  ([#"commercialplane.ads" 103 0 0] ());
  ([#"commercialplane.ads" 102 0 0] ());
  ([#"commercialplane.ads" 106 0 0] ());
  ([#"commercialplane.ads" 110 0 0] ());
  ([#"commercialplane.ads" 108 0 0] ());
  ([#"commercialplane.ads" 107 0 0] ());
   assume {  ( ((Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content) = (0 : int)) /\ ((Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content) = (0 : int)) ) };
  ();
  ([#"commercialplane.adb" 3 0 0] ());
  ([#"commercialplane.adb" 5 0 0] ());
  ([#"commercialplane.adb" 14 0 0] ());
  ([#"commercialplane.adb" 20 0 0] ());
  ([#"commercialplane.adb" 29 0 0] ());
  ([#"commercialplane.adb" 37 0 0] ());
  ([#"commercialplane.adb" 44 0 0] ());
  ([#"commercialplane.adb" 52 0 0] ());
  ([#"commercialplane.adb" 59 0 0] ());
  ([#"commercialplane.adb" 67 0 0] ());
  ([#"commercialplane.adb" 79 0 0] ());
  ([#"commercialplane.adb" 85 0 0] ());
  ([#"commercialplane.adb" 97 0 0] ());
  ([#"commercialplane.adb" 103 0 0] ());
  ();
  ( [@GP_Sloc:commercialplane.adb:111:1] ([#"commercialplane.adb" 111 0 0] ()) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "takeoff__2" defined at commercialplane.ads:45, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Commercialplane__takeoff__2__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Commercialplane__commercialplane as Commercialplane__commercialplane
 use        Commercialplane__plane as Commercialplane__plane
 use        Commercialplane__plane___axiom as Commercialplane__plane___axiom
 use        Commercialplane__fuel as Commercialplane__fuel
 use        Commercialplane__fuel__rep as Commercialplane__fuel__rep
 use        Commercialplane__door as Commercialplane__door
 use        Commercialplane__door__rep as Commercialplane__door__rep
 use        Commercialplane__engine as Commercialplane__engine
 use        Commercialplane__engine__rep as Commercialplane__engine__rep
 use        Commercialplane__currentactivity as Commercialplane__currentactivity
 use        Commercialplane__currentactivity__rep as Commercialplane__currentactivity__rep
 use        Commercialplane__fuel___axiom as Commercialplane__fuel___axiom
 use        Commercialplane__airspeed___axiom as Commercialplane__airspeed___axiom
 use        Commercialplane__altitude___axiom as Commercialplane__altitude___axiom
 use        Commercialplane__landinggear___axiom as Commercialplane__landinggear___axiom
 use        Commercialplane__door___axiom as Commercialplane__door___axiom
 use        Commercialplane__engine___axiom as Commercialplane__engine___axiom
 use        Commercialplane__currentactivity___axiom as Commercialplane__currentactivity___axiom
 use        Commercialplane__warninglight___axiom as Commercialplane__warninglight___axiom
 use        Commercialplane__plane___axiom as Commercialplane__plane___axiom
 use        Commercialplane__commercialplane___axiom as Commercialplane__commercialplane___axiom

 let def [#"commercialplane.ads" 45 0 0][@GP_Subp:commercialplane.ads:45] 
   (__void_param : unit)
  requires { [#"commercialplane.ads" 45 0 0] true }
  ensures { [#"commercialplane.ads" 45 0 0] ([#"commercialplane.ads" 49 0 0] ( [@comment:        Post => commercialPlane.mode = TakeOff;                 ^ commercialplane.ads:49:17:VC_POSTCONDITION] [@GP_Reason:VC_POSTCONDITION] [@GP_Shape:pragargs__cmp] [@GP_Sloc:commercialplane.ads:49:17] [@model_vc_post] [@GP_Id:0] ( [@GP_Pretty_Ada:18903] [@GP_Sloc:commercialplane.ads:49:17] ((Commercialplane__currentactivity__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode) = (0 : int)) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram commercialplane.ads:45 *)
  ;
   assume {  (Commercialplane__plane___axiom.dynamic_invariant { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram commercialplane.ads:45 *)
  ;
  () (* Check for RTE in the Pre of the subprogram commercialplane.ads:45 *)
  ;
   begin ensures {true} let _ = (let _ = (Boolean.andb((Boolean.andb((Boolean.andb((Boolean.andb(((Commercialplane__currentactivity__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode)) = (3 : int))) (((Commercialplane__engine__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__ignition)) = (0 : int))))) (((Commercialplane__door__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__cockpit)) = (1 : int))))) (((Commercialplane__door__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__extdoor)) = (1 : int))))) (((Commercialplane__fuel__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__fueltank)) >= (50 : int)))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram commercialplane.ads:45 *)
  ;
   assume {  ( ( ( ( ( [@GP_Pretty_Ada:3185] ((Commercialplane__currentactivity__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode) = (3 : int)) ) /\ ( [@GP_Pretty_Ada:3191] ((Commercialplane__engine__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__ignition) = (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:3197] ((Commercialplane__door__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__cockpit) = (1 : int)) ) ) /\ ( [@GP_Pretty_Ada:3203] ((Commercialplane__door__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__extdoor) = (1 : int)) ) ) /\ ( [@GP_Pretty_Ada:3209] ((Commercialplane__fuel__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__fueltank) >= (50 : int)) ) ) };
   try
   ( ();
   ( [@GP_Sloc:commercialplane.adb:7:11] ([#"commercialplane.adb" 7 0 0] ()) );
   ( [@GP_Sloc:commercialplane.adb:7:43] ([#"commercialplane.adb" 7 0 0] ()) );
   ( [@GP_Sloc:commercialplane.adb:8:11] ([#"commercialplane.adb" 8 0 0] ()) );
   ( [@GP_Sloc:commercialplane.adb:8:48] ([#"commercialplane.adb" 8 0 0] ()) );
   ( [@GP_Sloc:commercialplane.adb:9:7] ([#"commercialplane.adb" 9 0 0] ()) );
   ( [@GP_Sloc:commercialplane.adb:7:7] ([#"commercialplane.adb" 7 0 0] (if (( ([#"commercialplane.adb" 7 0 0] [#"commercialplane.adb" 7 0 0] (([@branch_id=2324] Main.spark__branch).bool__content <- ( (Boolean.andb((Boolean.andb((Boolean.andb((Boolean.andb(((Commercialplane__currentactivity__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode)) = (3 : int))) (((Commercialplane__door__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__cockpit)) = (1 : int))))) (((Commercialplane__door__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__extdoor)) = (1 : int))))) (((Commercialplane__fuel__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__fueltank)) >= (50 : int))))) (((Commercialplane__engine__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__ignition)) = (0 : int)))) )));
   ( [@branch_id=2324] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:commercialplane.adb:10:10] ([#"commercialplane.adb" 10 0 0] ()) );
    ( [@GP_Sloc:commercialplane.adb:10:31] ([#"commercialplane.adb" 10 0 0] (let temp___239 [@mlw:proxy_symbol] [@introduced] = (let temp___238 [@mlw:proxy_symbol] [@introduced] = { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content } in (
     ( [#"commercialplane.adb" 10 0 0] begin ensures {true} let _ = (let _ = temp___238.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode in (
      ()))
      in () end ;
     { ( temp___238 ) with Commercialplane__plane.__split_fields = { ( temp___238.Commercialplane__plane.__split_fields ) with Commercialplane__plane.rec__commercialplane__plane__mode = (Commercialplane__currentactivity__rep.of_rep((0 : int))) } } )))
     in (
     [#"commercialplane.adb" 10 0 0] (Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content <- ( temp___239.Commercialplane__plane.__split_fields ))))
    ) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = ((Commercialplane__currentactivity__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode)) = (0 : int)) in (
   ()))
   in () end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "takeoffspeed" defined at commercialplane.ads:51, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Commercialplane__takeoffspeed__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__string as Standard__string
 use        Commercialplane__commercialplane as Commercialplane__commercialplane
 use        Commercialplane__plane as Commercialplane__plane
 use        Commercialplane__plane___axiom as Commercialplane__plane___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom
 use        Commercialplane__airspeed as Commercialplane__airspeed
 use        Commercialplane__airspeed__rep as Commercialplane__airspeed__rep
 use        Commercialplane__currentactivity as Commercialplane__currentactivity
 use        Commercialplane__currentactivity__rep as Commercialplane__currentactivity__rep
 use        Temp___String_Literal_242 as Temp___String_Literal_242
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Commercialplane__fuel___axiom as Commercialplane__fuel___axiom
 use        Commercialplane__airspeed___axiom as Commercialplane__airspeed___axiom
 use        Commercialplane__altitude___axiom as Commercialplane__altitude___axiom
 use        Commercialplane__landinggear___axiom as Commercialplane__landinggear___axiom
 use        Commercialplane__door___axiom as Commercialplane__door___axiom
 use        Commercialplane__engine___axiom as Commercialplane__engine___axiom
 use        Commercialplane__currentactivity___axiom as Commercialplane__currentactivity___axiom
 use        Commercialplane__warninglight___axiom as Commercialplane__warninglight___axiom
 use        Commercialplane__plane___axiom as Commercialplane__plane___axiom
 use        Commercialplane__commercialplane___axiom as Commercialplane__commercialplane___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom

 let def [#"commercialplane.ads" 51 0 0][@GP_Subp:commercialplane.ads:51] 
   (__void_param : unit)
  requires { [#"commercialplane.ads" 51 0 0] true }
  ensures { [#"commercialplane.ads" 51 0 0] ([#"commercialplane.ads" 54 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Shape:pragargs__cmp] [@GP_Sloc:commercialplane.ads:54:17] [@comment:        Post => commercialPlane.velocity = commercialPlane.velocity'Old + 10;                 ^ commercialplane.ads:54:17:VC_POSTCONDITION] [@model_vc_post] [@GP_Id:2] ( [@GP_Pretty_Ada:18970] [@GP_Sloc:commercialplane.ads:54:17] ((Commercialplane__airspeed__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity) = ((Commercialplane__airspeed__rep.to_rep (old { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity )) + (10 : int))) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram commercialplane.ads:51 *)
  ;
   assume {  (Commercialplane__plane___axiom.dynamic_invariant { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram commercialplane.ads:51 *)
  ;
  () (* Check for RTE in the Pre of the subprogram commercialplane.ads:51 *)
  ;
   begin ensures {true} let _ = (let _ = (Boolean.andb((Boolean.andb(((Commercialplane__currentactivity__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode)) = (0 : int))) (((Commercialplane__airspeed__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity)) >= (0 : int))))) (((Commercialplane__airspeed__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity)) < (250 : int)))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram commercialplane.ads:51 *)
  ;
   assume {  ( ( ( [@GP_Pretty_Ada:3243] ((Commercialplane__currentactivity__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode) = (0 : int)) ) /\ ( [@GP_Pretty_Ada:3249] ((Commercialplane__airspeed__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity) >= (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:3255] ((Commercialplane__airspeed__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity) < (250 : int)) ) ) };
   begin ensures {true} let _ = (let _ = { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity in (
   ()))
   in () end ;
  (let temp___old_243 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
  ensures { (result = (Commercialplane__airspeed__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity))} 
  in _f) in (
   (  try
    ( ();
    ( [@GP_Sloc:commercialplane.adb:16:7] ([#"commercialplane.adb" 16 0 0] ()) );
    ( [@GP_Sloc:commercialplane.adb:16:35] ([#"commercialplane.adb" 16 0 0] ()) );
    ( [@GP_Sloc:commercialplane.adb:16:32] ([#"commercialplane.adb" 16 0 0] (let temp___241 [@mlw:proxy_symbol] [@introduced] = (let temp___240 [@mlw:proxy_symbol] [@introduced] = { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content } in (
     ( [#"commercialplane.adb" 16 0 0] begin ensures {true} let _ = (let _ = temp___240.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity in (
      ()))
      in () end ;
     { ( temp___240 ) with Commercialplane__plane.__split_fields = { ( temp___240.Commercialplane__plane.__split_fields ) with Commercialplane__plane.rec__commercialplane__plane__velocity = (Commercialplane__airspeed__rep.of_rep(([#"commercialplane.adb" 16 0 0] ( [@GP_Shape:commercialplane_assign__add] [@vc:annotation] [@comment:      commercialPlane.velocity := commercialPlane.velocity + 10;                                                            ^ commercialplane.adb:16:60:VC_RANGE_CHECK] [@GP_Sloc:commercialplane.adb:16:60] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:1] (Commercialplane__airspeed.range_check_(((Commercialplane__airspeed__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity)) + (10 : int)))) )))) } } )))
     in (
      (Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content <- ( temp___241.Commercialplane__plane.__split_fields ))))
    ) );
    ( [@GP_Sloc:commercialplane.adb:17:7] ([#"commercialplane.adb" 17 0 0] ()) );
    ( [@GP_Sloc:commercialplane.adb:17:7] ([#"commercialplane.adb" 17 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_242.temp___String_Literal_242(()))) ((1 : int)) ((11 : int))))) )) );
     raise Return__exc )
   with
    Return__exc -> ()
   end;
    begin ensures {true} let _ = (let _ = ((Commercialplane__airspeed__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity)) = (temp___old_243 + (10 : int))) in (
    ()))
    in () end  )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "takeoffaltitude" defined at commercialplane.ads:56, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Commercialplane__takeoffaltitude__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Commercialplane__commercialplane as Commercialplane__commercialplane
 use        Commercialplane__plane as Commercialplane__plane
 use        Commercialplane__plane___axiom as Commercialplane__plane___axiom
 use        Commercialplane__altitude as Commercialplane__altitude
 use        Commercialplane__altitude__rep as Commercialplane__altitude__rep
 use        Commercialplane__landinggear as Commercialplane__landinggear
 use        Commercialplane__landinggear__rep as Commercialplane__landinggear__rep
 use        Commercialplane__currentactivity as Commercialplane__currentactivity
 use        Commercialplane__currentactivity__rep as Commercialplane__currentactivity__rep
 use        Commercialplane__fuel___axiom as Commercialplane__fuel___axiom
 use        Commercialplane__airspeed___axiom as Commercialplane__airspeed___axiom
 use        Commercialplane__altitude___axiom as Commercialplane__altitude___axiom
 use        Commercialplane__landinggear___axiom as Commercialplane__landinggear___axiom
 use        Commercialplane__door___axiom as Commercialplane__door___axiom
 use        Commercialplane__engine___axiom as Commercialplane__engine___axiom
 use        Commercialplane__currentactivity___axiom as Commercialplane__currentactivity___axiom
 use        Commercialplane__warninglight___axiom as Commercialplane__warninglight___axiom
 use        Commercialplane__plane___axiom as Commercialplane__plane___axiom
 use        Commercialplane__commercialplane___axiom as Commercialplane__commercialplane___axiom

 let def [#"commercialplane.ads" 56 0 0][@GP_Subp:commercialplane.ads:56] 
   (__void_param : unit)
  requires { [#"commercialplane.ads" 56 0 0] true }
  ensures { [#"commercialplane.ads" 56 0 0] ([#"commercialplane.ads" 59 0 0] ( [@comment:        Post => commercialPlane.height = commercialPlane.height'Old + 50;                 ^ commercialplane.ads:59:17:VC_POSTCONDITION] [@GP_Reason:VC_POSTCONDITION] [@GP_Shape:pragargs__cmp] [@GP_Sloc:commercialplane.ads:59:17] [@model_vc_post] [@GP_Id:4] ( [@GP_Sloc:commercialplane.ads:59:17] [@GP_Pretty_Ada:19035] ((Commercialplane__altitude__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height) = ((Commercialplane__altitude__rep.to_rep (old { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height )) + (50 : int))) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram commercialplane.ads:56 *)
  ;
   assume {  (Commercialplane__plane___axiom.dynamic_invariant { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram commercialplane.ads:56 *)
  ;
  () (* Check for RTE in the Pre of the subprogram commercialplane.ads:56 *)
  ;
   begin ensures {true} let _ = (let _ = (Boolean.andb((Boolean.andb(((Commercialplane__currentactivity__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode)) = (0 : int))) (((Commercialplane__altitude__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height)) >= (0 : int))))) (((Commercialplane__altitude__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height)) < (500 : int)))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram commercialplane.ads:56 *)
  ;
   assume {  ( ( ( [@GP_Pretty_Ada:3293] ((Commercialplane__currentactivity__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode) = (0 : int)) ) /\ ( [@GP_Pretty_Ada:3299] ((Commercialplane__altitude__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height) >= (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:3305] ((Commercialplane__altitude__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height) < (500 : int)) ) ) };
   begin ensures {true} let _ = (let _ = { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height in (
   ()))
   in () end ;
  (let temp___old_248 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
  ensures { (result = (Commercialplane__altitude__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height))} 
  in _f) in (
   (  try
    ( ();
    ( [@GP_Sloc:commercialplane.adb:22:7] ([#"commercialplane.adb" 22 0 0] ()) );
    ( [@GP_Sloc:commercialplane.adb:22:33] ([#"commercialplane.adb" 22 0 0] ()) );
    ( [@GP_Sloc:commercialplane.adb:22:30] ([#"commercialplane.adb" 22 0 0] (let temp___245 [@mlw:proxy_symbol] [@introduced] = (let temp___244 [@mlw:proxy_symbol] [@introduced] = { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content } in (
     ( [#"commercialplane.adb" 22 0 0] begin ensures {true} let _ = (let _ = temp___244.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height in (
      ()))
      in () end ;
     { ( temp___244 ) with Commercialplane__plane.__split_fields = { ( temp___244.Commercialplane__plane.__split_fields ) with Commercialplane__plane.rec__commercialplane__plane__height = (Commercialplane__altitude__rep.of_rep(([#"commercialplane.adb" 22 0 0] ( [@GP_Shape:commercialplane_assign__add] [@vc:annotation] [@GP_Sloc:commercialplane.adb:22:56] [@comment:      commercialPlane.height := commercialPlane.height + 50;                                                        ^ commercialplane.adb:22:56:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:3] (Commercialplane__altitude.range_check_(((Commercialplane__altitude__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height)) + (50 : int)))) )))) } } )))
     in (
      (Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content <- ( temp___245.Commercialplane__plane.__split_fields ))))
    ) );
    ( [@GP_Sloc:commercialplane.adb:23:11] ([#"commercialplane.adb" 23 0 0] ()) );
    ( [@GP_Sloc:commercialplane.adb:23:44] ([#"commercialplane.adb" 23 0 0] ()) );
    ( [@GP_Sloc:commercialplane.adb:23:7] ([#"commercialplane.adb" 23 0 0] (if (( ([#"commercialplane.adb" 23 0 0] [#"commercialplane.adb" 23 0 0] (([@branch_id=2404] Main.spark__branch).bool__content <- ( (Boolean.andb(((Commercialplane__altitude__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height)) > (100 : int))) (((Commercialplane__landinggear__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__landgear)) = (0 : int)))) )));
    ( [@branch_id=2404] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:commercialplane.adb:24:10] ([#"commercialplane.adb" 24 0 0] ()) );
     ( [@GP_Sloc:commercialplane.adb:24:35] ([#"commercialplane.adb" 24 0 0] (let temp___247 [@mlw:proxy_symbol] [@introduced] = (let temp___246 [@mlw:proxy_symbol] [@introduced] = { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content } in (
      ( [#"commercialplane.adb" 24 0 0] begin ensures {true} let _ = (let _ = temp___246.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__landgear in (
       ()))
       in () end ;
      { ( temp___246 ) with Commercialplane__plane.__split_fields = { ( temp___246.Commercialplane__plane.__split_fields ) with Commercialplane__plane.rec__commercialplane__plane__landgear = (Commercialplane__landinggear__rep.of_rep((1 : int))) } } )))
      in (
      [#"commercialplane.adb" 24 0 0] (Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content <- ( temp___247.Commercialplane__plane.__split_fields ))))
     ) ) )) else (
     ()))) );
     raise Return__exc )
   with
    Return__exc -> ()
   end;
    begin ensures {true} let _ = (let _ = ((Commercialplane__altitude__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height)) = (temp___old_248 + (50 : int))) in (
    ()))
    in () end  )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "flying__2" defined at commercialplane.ads:61, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Commercialplane__flying__2__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Commercialplane__commercialplane as Commercialplane__commercialplane
 use        Commercialplane__plane as Commercialplane__plane
 use        Commercialplane__plane___axiom as Commercialplane__plane___axiom
 use        Commercialplane__airspeed as Commercialplane__airspeed
 use        Commercialplane__airspeed__rep as Commercialplane__airspeed__rep
 use        Commercialplane__altitude as Commercialplane__altitude
 use        Commercialplane__altitude__rep as Commercialplane__altitude__rep
 use        Commercialplane__currentactivity as Commercialplane__currentactivity
 use        Commercialplane__currentactivity__rep as Commercialplane__currentactivity__rep
 use        Commercialplane__fuel___axiom as Commercialplane__fuel___axiom
 use        Commercialplane__airspeed___axiom as Commercialplane__airspeed___axiom
 use        Commercialplane__altitude___axiom as Commercialplane__altitude___axiom
 use        Commercialplane__landinggear___axiom as Commercialplane__landinggear___axiom
 use        Commercialplane__door___axiom as Commercialplane__door___axiom
 use        Commercialplane__engine___axiom as Commercialplane__engine___axiom
 use        Commercialplane__currentactivity___axiom as Commercialplane__currentactivity___axiom
 use        Commercialplane__warninglight___axiom as Commercialplane__warninglight___axiom
 use        Commercialplane__plane___axiom as Commercialplane__plane___axiom
 use        Commercialplane__commercialplane___axiom as Commercialplane__commercialplane___axiom

 let def [#"commercialplane.ads" 61 0 0][@GP_Subp:commercialplane.ads:61] 
   (__void_param : unit)
  requires { [#"commercialplane.ads" 61 0 0] true }
  ensures { [#"commercialplane.ads" 61 0 0] ([#"commercialplane.ads" 64 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@comment:        Post => commercialPlane.mode = Flying;                 ^ commercialplane.ads:64:17:VC_POSTCONDITION] [@GP_Shape:pragargs__cmp] [@GP_Sloc:commercialplane.ads:64:17] [@model_vc_post] [@GP_Id:5] ( [@GP_Pretty_Ada:19095] [@GP_Sloc:commercialplane.ads:64:17] ((Commercialplane__currentactivity__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode) = (2 : int)) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram commercialplane.ads:61 *)
  ;
   assume {  (Commercialplane__plane___axiom.dynamic_invariant { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram commercialplane.ads:61 *)
  ;
  () (* Check for RTE in the Pre of the subprogram commercialplane.ads:61 *)
  ;
   begin ensures {true} let _ = (let _ = (Boolean.andb((Boolean.andb(((Commercialplane__currentactivity__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode)) = (0 : int))) (((Commercialplane__airspeed__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity)) >= (500 : int))))) (((Commercialplane__altitude__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height)) >= (1200 : int)))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram commercialplane.ads:61 *)
  ;
   assume {  ( ( ( [@GP_Pretty_Ada:3343] ((Commercialplane__currentactivity__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode) = (0 : int)) ) /\ ( [@GP_Pretty_Ada:3349] ((Commercialplane__airspeed__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity) >= (500 : int)) ) ) /\ ( [@GP_Pretty_Ada:3355] ((Commercialplane__altitude__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height) >= (1200 : int)) ) ) };
   try
   ( ();
   ( [@GP_Sloc:commercialplane.adb:31:11] ([#"commercialplane.adb" 31 0 0] ()) );
   ( [@GP_Sloc:commercialplane.adb:31:46] ([#"commercialplane.adb" 31 0 0] ()) );
   ( [@GP_Sloc:commercialplane.adb:32:11] ([#"commercialplane.adb" 32 0 0] ()) );
   ( [@GP_Sloc:commercialplane.adb:31:7] ([#"commercialplane.adb" 31 0 0] (if (( ([#"commercialplane.adb" 31 0 0] [#"commercialplane.adb" 31 0 0] (([@branch_id=2433] Main.spark__branch).bool__content <- ( (Boolean.andb((Boolean.andb(((Commercialplane__currentactivity__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode)) = (0 : int))) (((Commercialplane__airspeed__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity)) >= (250 : int))))) (((Commercialplane__altitude__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height)) >= (500 : int)))) )));
   ( [@branch_id=2433] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:commercialplane.adb:33:10] ([#"commercialplane.adb" 33 0 0] ()) );
    ( [@GP_Sloc:commercialplane.adb:33:31] ([#"commercialplane.adb" 33 0 0] (let temp___250 [@mlw:proxy_symbol] [@introduced] = (let temp___249 [@mlw:proxy_symbol] [@introduced] = { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content } in (
     ( [#"commercialplane.adb" 33 0 0] begin ensures {true} let _ = (let _ = temp___249.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode in (
      ()))
      in () end ;
     { ( temp___249 ) with Commercialplane__plane.__split_fields = { ( temp___249.Commercialplane__plane.__split_fields ) with Commercialplane__plane.rec__commercialplane__plane__mode = (Commercialplane__currentactivity__rep.of_rep((2 : int))) } } )))
     in (
     [#"commercialplane.adb" 33 0 0] (Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content <- ( temp___250.Commercialplane__plane.__split_fields ))))
    ) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = ((Commercialplane__currentactivity__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode)) = (2 : int)) in (
   ()))
   in () end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "fuelusage" defined at commercialplane.ads:66, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Commercialplane__fuelusage__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Commercialplane__commercialplane as Commercialplane__commercialplane
 use        Commercialplane__plane as Commercialplane__plane
 use        Commercialplane__plane___axiom as Commercialplane__plane___axiom
 use        Commercialplane__fuel as Commercialplane__fuel
 use        Commercialplane__fuel__rep as Commercialplane__fuel__rep
 use        Commercialplane__currentactivity as Commercialplane__currentactivity
 use        Commercialplane__currentactivity__rep as Commercialplane__currentactivity__rep
 use        Commercialplane__fuel___axiom as Commercialplane__fuel___axiom
 use        Commercialplane__airspeed___axiom as Commercialplane__airspeed___axiom
 use        Commercialplane__altitude___axiom as Commercialplane__altitude___axiom
 use        Commercialplane__landinggear___axiom as Commercialplane__landinggear___axiom
 use        Commercialplane__door___axiom as Commercialplane__door___axiom
 use        Commercialplane__engine___axiom as Commercialplane__engine___axiom
 use        Commercialplane__currentactivity___axiom as Commercialplane__currentactivity___axiom
 use        Commercialplane__warninglight___axiom as Commercialplane__warninglight___axiom
 use        Commercialplane__plane___axiom as Commercialplane__plane___axiom
 use        Commercialplane__commercialplane___axiom as Commercialplane__commercialplane___axiom

 let def [#"commercialplane.ads" 66 0 0][@GP_Subp:commercialplane.ads:66] 
   (__void_param : unit)
  requires { [#"commercialplane.ads" 66 0 0] true }
  ensures { [#"commercialplane.ads" 66 0 0] ([#"commercialplane.ads" 69 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Shape:pragargs__cmp] [@GP_Sloc:commercialplane.ads:69:17] [@comment:        Post => commercialPlane.fuelTank = commercialPlane.fuelTank'Old - 10;                 ^ commercialplane.ads:69:17:VC_POSTCONDITION] [@model_vc_post] [@GP_Id:7] ( [@GP_Sloc:commercialplane.ads:69:17] [@GP_Pretty_Ada:19154] ((Commercialplane__fuel__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__fueltank) = ((Commercialplane__fuel__rep.to_rep (old { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__fueltank )) - (10 : int))) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram commercialplane.ads:66 *)
  ;
   assume {  (Commercialplane__plane___axiom.dynamic_invariant { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram commercialplane.ads:66 *)
  ;
  () (* Check for RTE in the Pre of the subprogram commercialplane.ads:66 *)
  ;
   begin ensures {true} let _ = (let _ = (Boolean.andb(((Commercialplane__currentactivity__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode)) = (2 : int))) (((Commercialplane__fuel__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__fueltank)) >= (25 : int)))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram commercialplane.ads:66 *)
  ;
   assume {  ( ( [@GP_Pretty_Ada:3387] ((Commercialplane__currentactivity__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode) = (2 : int)) ) /\ ( [@GP_Pretty_Ada:3393] ((Commercialplane__fuel__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__fueltank) >= (25 : int)) ) ) };
   begin ensures {true} let _ = (let _ = { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__fueltank in (
   ()))
   in () end ;
  (let temp___old_253 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
  ensures { (result = (Commercialplane__fuel__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__fueltank))} 
  in _f) in (
   (  try
    ( ();
    ( [@GP_Sloc:commercialplane.adb:39:11] ([#"commercialplane.adb" 39 0 0] ()) );
    ( [@GP_Sloc:commercialplane.adb:39:45] ([#"commercialplane.adb" 39 0 0] ()) );
    ( [@GP_Sloc:commercialplane.adb:39:7] ([#"commercialplane.adb" 39 0 0] (if (( ([#"commercialplane.adb" 39 0 0] [#"commercialplane.adb" 39 0 0] (([@branch_id=2467] Main.spark__branch).bool__content <- ( (Boolean.andb(((Commercialplane__currentactivity__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode)) = (2 : int))) (((Commercialplane__fuel__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__fueltank)) >= (10 : int)))) )));
    ( [@branch_id=2467] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:commercialplane.adb:40:10] ([#"commercialplane.adb" 40 0 0] ()) );
     ( [@GP_Sloc:commercialplane.adb:40:38] ([#"commercialplane.adb" 40 0 0] ()) );
     ( [@GP_Sloc:commercialplane.adb:40:35] ([#"commercialplane.adb" 40 0 0] (let temp___252 [@mlw:proxy_symbol] [@introduced] = (let temp___251 [@mlw:proxy_symbol] [@introduced] = { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content } in (
      ( [#"commercialplane.adb" 40 0 0] begin ensures {true} let _ = (let _ = temp___251.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__fueltank in (
       ()))
       in () end ;
      { ( temp___251 ) with Commercialplane__plane.__split_fields = { ( temp___251.Commercialplane__plane.__split_fields ) with Commercialplane__plane.rec__commercialplane__plane__fueltank = (Commercialplane__fuel__rep.of_rep(([#"commercialplane.adb" 40 0 0] ( [@vc:annotation] [@GP_Sloc:commercialplane.adb:40:63] [@comment:         commercialPlane.fuelTank := commercialPlane.fuelTank -10;                                                               ^ commercialplane.adb:40:63:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:6] [@GP_Shape:if__commercialplane_assign__sub] (Commercialplane__fuel.range_check_(((Commercialplane__fuel__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__fueltank)) - (10 : int)))) )))) } } )))
      in (
       (Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content <- ( temp___252.Commercialplane__plane.__split_fields ))))
     ) ) )) else (
     ()))) );
     raise Return__exc )
   with
    Return__exc -> ()
   end;
    begin ensures {true} let _ = (let _ = ((Commercialplane__fuel__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__fueltank)) = (temp___old_253 - (10 : int))) in (
    ()))
    in () end  )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "landing__2" defined at commercialplane.ads:71, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Commercialplane__landing__2__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Commercialplane__commercialplane as Commercialplane__commercialplane
 use        Commercialplane__plane as Commercialplane__plane
 use        Commercialplane__plane___axiom as Commercialplane__plane___axiom
 use        Commercialplane__airspeed as Commercialplane__airspeed
 use        Commercialplane__airspeed__rep as Commercialplane__airspeed__rep
 use        Commercialplane__altitude as Commercialplane__altitude
 use        Commercialplane__altitude__rep as Commercialplane__altitude__rep
 use        Commercialplane__landinggear as Commercialplane__landinggear
 use        Commercialplane__landinggear__rep as Commercialplane__landinggear__rep
 use        Commercialplane__currentactivity as Commercialplane__currentactivity
 use        Commercialplane__currentactivity__rep as Commercialplane__currentactivity__rep
 use        Commercialplane__fuel___axiom as Commercialplane__fuel___axiom
 use        Commercialplane__airspeed___axiom as Commercialplane__airspeed___axiom
 use        Commercialplane__altitude___axiom as Commercialplane__altitude___axiom
 use        Commercialplane__landinggear___axiom as Commercialplane__landinggear___axiom
 use        Commercialplane__door___axiom as Commercialplane__door___axiom
 use        Commercialplane__engine___axiom as Commercialplane__engine___axiom
 use        Commercialplane__currentactivity___axiom as Commercialplane__currentactivity___axiom
 use        Commercialplane__warninglight___axiom as Commercialplane__warninglight___axiom
 use        Commercialplane__plane___axiom as Commercialplane__plane___axiom
 use        Commercialplane__commercialplane___axiom as Commercialplane__commercialplane___axiom

 let def [#"commercialplane.ads" 71 0 0][@GP_Subp:commercialplane.ads:71] 
   (__void_param : unit)
  requires { [#"commercialplane.ads" 71 0 0] true }
  ensures { [#"commercialplane.ads" 71 0 0] ([#"commercialplane.ads" 74 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Shape:pragargs__cmp] [@comment:        Post => commercialPlane.landGear = Lowered;                 ^ commercialplane.ads:74:17:VC_POSTCONDITION] [@GP_Sloc:commercialplane.ads:74:17] [@model_vc_post] [@GP_Id:8] ( [@GP_Pretty_Ada:19214] [@GP_Sloc:commercialplane.ads:74:17] ((Commercialplane__landinggear__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__landgear) = (0 : int)) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram commercialplane.ads:71 *)
  ;
   assume {  (Commercialplane__plane___axiom.dynamic_invariant { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram commercialplane.ads:71 *)
  ;
  () (* Check for RTE in the Pre of the subprogram commercialplane.ads:71 *)
  ;
   begin ensures {true} let _ = (let _ = (Boolean.andb((Boolean.andb(((Commercialplane__currentactivity__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode)) = (1 : int))) (((Commercialplane__airspeed__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity)) >= (100 : int))))) (((Commercialplane__altitude__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height)) >= (100 : int)))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram commercialplane.ads:71 *)
  ;
   assume {  ( ( ( [@GP_Pretty_Ada:3431] ((Commercialplane__currentactivity__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode) = (1 : int)) ) /\ ( [@GP_Pretty_Ada:3437] ((Commercialplane__airspeed__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity) >= (100 : int)) ) ) /\ ( [@GP_Pretty_Ada:3443] ((Commercialplane__altitude__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height) >= (100 : int)) ) ) };
   try
   ( ();
   ( [@GP_Sloc:commercialplane.adb:46:11] ([#"commercialplane.adb" 46 0 0] ()) );
   ( [@GP_Sloc:commercialplane.adb:46:46] ([#"commercialplane.adb" 46 0 0] ()) );
   ( [@GP_Sloc:commercialplane.adb:47:13] ([#"commercialplane.adb" 47 0 0] ()) );
   ( [@GP_Sloc:commercialplane.adb:46:7] ([#"commercialplane.adb" 46 0 0] (if (( ([#"commercialplane.adb" 46 0 0] [#"commercialplane.adb" 46 0 0] (([@branch_id=2499] Main.spark__branch).bool__content <- ( (Boolean.andb((Boolean.andb(((Commercialplane__currentactivity__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode)) = (1 : int))) (((Commercialplane__airspeed__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity)) >= (100 : int))))) (((Commercialplane__altitude__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height)) >= (100 : int)))) )));
   ( [@branch_id=2499] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:commercialplane.adb:48:10] ([#"commercialplane.adb" 48 0 0] ()) );
    ( [@GP_Sloc:commercialplane.adb:48:35] ([#"commercialplane.adb" 48 0 0] (let temp___255 [@mlw:proxy_symbol] [@introduced] = (let temp___254 [@mlw:proxy_symbol] [@introduced] = { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content } in (
     ( [#"commercialplane.adb" 48 0 0] begin ensures {true} let _ = (let _ = temp___254.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__landgear in (
      ()))
      in () end ;
     { ( temp___254 ) with Commercialplane__plane.__split_fields = { ( temp___254.Commercialplane__plane.__split_fields ) with Commercialplane__plane.rec__commercialplane__plane__landgear = (Commercialplane__landinggear__rep.of_rep((0 : int))) } } )))
     in (
     [#"commercialplane.adb" 48 0 0] (Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content <- ( temp___255.Commercialplane__plane.__split_fields ))))
    ) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = ((Commercialplane__landinggear__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__landgear)) = (0 : int)) in (
   ()))
   in () end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "intow" defined at commercialplane.ads:76, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Commercialplane__intow__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Commercialplane__commercialplane as Commercialplane__commercialplane
 use        Commercialplane__plane as Commercialplane__plane
 use        Commercialplane__plane___axiom as Commercialplane__plane___axiom
 use        Commercialplane__airspeed as Commercialplane__airspeed
 use        Commercialplane__airspeed__rep as Commercialplane__airspeed__rep
 use        Commercialplane__altitude as Commercialplane__altitude
 use        Commercialplane__altitude__rep as Commercialplane__altitude__rep
 use        Commercialplane__engine as Commercialplane__engine
 use        Commercialplane__engine__rep as Commercialplane__engine__rep
 use        Commercialplane__currentactivity as Commercialplane__currentactivity
 use        Commercialplane__currentactivity__rep as Commercialplane__currentactivity__rep
 use        Commercialplane__fuel___axiom as Commercialplane__fuel___axiom
 use        Commercialplane__airspeed___axiom as Commercialplane__airspeed___axiom
 use        Commercialplane__altitude___axiom as Commercialplane__altitude___axiom
 use        Commercialplane__landinggear___axiom as Commercialplane__landinggear___axiom
 use        Commercialplane__door___axiom as Commercialplane__door___axiom
 use        Commercialplane__engine___axiom as Commercialplane__engine___axiom
 use        Commercialplane__currentactivity___axiom as Commercialplane__currentactivity___axiom
 use        Commercialplane__warninglight___axiom as Commercialplane__warninglight___axiom
 use        Commercialplane__plane___axiom as Commercialplane__plane___axiom
 use        Commercialplane__commercialplane___axiom as Commercialplane__commercialplane___axiom

 let def [#"commercialplane.ads" 76 0 0][@GP_Subp:commercialplane.ads:76] 
   (__void_param : unit)
  requires { [#"commercialplane.ads" 76 0 0] true }
  ensures { [#"commercialplane.ads" 76 0 0] ([#"commercialplane.ads" 79 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Shape:pragargs__cmp] [@GP_Sloc:commercialplane.ads:79:17] [@model_vc_post] [@comment:        Post => commercialPlane.ignition = Off;                 ^ commercialplane.ads:79:17:VC_POSTCONDITION] [@GP_Id:9] ( [@GP_Sloc:commercialplane.ads:79:17] [@GP_Pretty_Ada:19274] ((Commercialplane__engine__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__ignition) = (1 : int)) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram commercialplane.ads:76 *)
  ;
   assume {  (Commercialplane__plane___axiom.dynamic_invariant { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram commercialplane.ads:76 *)
  ;
  () (* Check for RTE in the Pre of the subprogram commercialplane.ads:76 *)
  ;
   begin ensures {true} let _ = (let _ = (Boolean.andb((Boolean.andb(((Commercialplane__currentactivity__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode)) = (3 : int))) (((Commercialplane__airspeed__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity)) = (0 : int))))) (((Commercialplane__altitude__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height)) = (0 : int)))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram commercialplane.ads:76 *)
  ;
   assume {  ( ( ( [@GP_Pretty_Ada:3475] ((Commercialplane__currentactivity__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode) = (3 : int)) ) /\ ( [@GP_Pretty_Ada:3481] ((Commercialplane__airspeed__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity) = (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:3487] ((Commercialplane__altitude__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height) = (0 : int)) ) ) };
   try
   ( ();
   ( [@GP_Sloc:commercialplane.adb:54:11] ([#"commercialplane.adb" 54 0 0] ()) );
   ( [@GP_Sloc:commercialplane.adb:54:43] ([#"commercialplane.adb" 54 0 0] ()) );
   ( [@GP_Sloc:commercialplane.adb:54:76] ([#"commercialplane.adb" 54 0 0] ()) );
   ( [@GP_Sloc:commercialplane.adb:54:7] ([#"commercialplane.adb" 54 0 0] (if (( ([#"commercialplane.adb" 54 0 0] [#"commercialplane.adb" 54 0 0] (([@branch_id=2533] Main.spark__branch).bool__content <- ( (Boolean.andb((Boolean.andb(((Commercialplane__currentactivity__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode)) = (3 : int))) (((Commercialplane__airspeed__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity)) = (0 : int))))) (((Commercialplane__altitude__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height)) = (0 : int)))) )));
   ( [@branch_id=2533] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:commercialplane.adb:55:10] ([#"commercialplane.adb" 55 0 0] ()) );
    ( [@GP_Sloc:commercialplane.adb:55:35] ([#"commercialplane.adb" 55 0 0] (let temp___257 [@mlw:proxy_symbol] [@introduced] = (let temp___256 [@mlw:proxy_symbol] [@introduced] = { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content } in (
     ( [#"commercialplane.adb" 55 0 0] begin ensures {true} let _ = (let _ = temp___256.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__ignition in (
      ()))
      in () end ;
     { ( temp___256 ) with Commercialplane__plane.__split_fields = { ( temp___256.Commercialplane__plane.__split_fields ) with Commercialplane__plane.rec__commercialplane__plane__ignition = (Commercialplane__engine__rep.of_rep((1 : int))) } } )))
     in (
     [#"commercialplane.adb" 55 0 0] (Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content <- ( temp___257.Commercialplane__plane.__split_fields ))))
    ) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = ((Commercialplane__engine__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__ignition)) = (1 : int)) in (
   ()))
   in () end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "fuelwarning" defined at commercialplane.ads:81, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Commercialplane__fuelwarning__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__string as Standard__string
 use        Commercialplane__commercialplane as Commercialplane__commercialplane
 use        Commercialplane__plane as Commercialplane__plane
 use        Commercialplane__plane___axiom as Commercialplane__plane___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom
 use        Commercialplane__fuel as Commercialplane__fuel
 use        Commercialplane__fuel__rep as Commercialplane__fuel__rep
 use        Commercialplane__currentactivity as Commercialplane__currentactivity
 use        Commercialplane__currentactivity__rep as Commercialplane__currentactivity__rep
 use        Commercialplane__warninglight as Commercialplane__warninglight
 use        Commercialplane__warninglight__rep as Commercialplane__warninglight__rep
 use        Temp___String_Literal_260 as Temp___String_Literal_260
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Commercialplane__fuel___axiom as Commercialplane__fuel___axiom
 use        Commercialplane__airspeed___axiom as Commercialplane__airspeed___axiom
 use        Commercialplane__altitude___axiom as Commercialplane__altitude___axiom
 use        Commercialplane__landinggear___axiom as Commercialplane__landinggear___axiom
 use        Commercialplane__door___axiom as Commercialplane__door___axiom
 use        Commercialplane__engine___axiom as Commercialplane__engine___axiom
 use        Commercialplane__currentactivity___axiom as Commercialplane__currentactivity___axiom
 use        Commercialplane__warninglight___axiom as Commercialplane__warninglight___axiom
 use        Commercialplane__plane___axiom as Commercialplane__plane___axiom
 use        Commercialplane__commercialplane___axiom as Commercialplane__commercialplane___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom

 let def [#"commercialplane.ads" 81 0 0][@GP_Subp:commercialplane.ads:81] 
   (__void_param : unit)
  requires { [#"commercialplane.ads" 81 0 0] true }
  ensures { [#"commercialplane.ads" 81 0 0] ([#"commercialplane.ads" 84 0 0] ( [@GP_Id:10] [@GP_Reason:VC_POSTCONDITION] [@GP_Shape:pragargs__cmp] [@GP_Sloc:commercialplane.ads:84:17] [@model_vc_post] [@comment:        Post => commercialPlane.fuelWarning = Red;                 ^ commercialplane.ads:84:17:VC_POSTCONDITION] ( [@GP_Sloc:commercialplane.ads:84:17] [@GP_Pretty_Ada:19330] ((Commercialplane__warninglight__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__fuelwarning) = (2 : int)) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram commercialplane.ads:81 *)
  ;
   assume {  (Commercialplane__plane___axiom.dynamic_invariant { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram commercialplane.ads:81 *)
  ;
  () (* Check for RTE in the Pre of the subprogram commercialplane.ads:81 *)
  ;
   begin ensures {true} let _ = (let _ = (Boolean.andb(((Commercialplane__currentactivity__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode)) = (2 : int))) (((Commercialplane__fuel__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__fueltank)) >= (25 : int)))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram commercialplane.ads:81 *)
  ;
   assume {  ( ( [@GP_Pretty_Ada:3521] ((Commercialplane__currentactivity__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode) = (2 : int)) ) /\ ( [@GP_Pretty_Ada:3527] ((Commercialplane__fuel__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__fueltank) >= (25 : int)) ) ) };
   try
   ( ();
   ( [@GP_Sloc:commercialplane.adb:61:11] ([#"commercialplane.adb" 61 0 0] ()) );
   ( [@GP_Sloc:commercialplane.adb:61:45] ([#"commercialplane.adb" 61 0 0] ()) );
   ( [@GP_Sloc:commercialplane.adb:61:7] ([#"commercialplane.adb" 61 0 0] (if (( ([#"commercialplane.adb" 61 0 0] [#"commercialplane.adb" 61 0 0] (([@branch_id=2567] Main.spark__branch).bool__content <- ( (Boolean.andb(((Commercialplane__currentactivity__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode)) = (2 : int))) (((Commercialplane__fuel__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__fueltank)) >= (25 : int)))) )));
   ( [@branch_id=2567] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:commercialplane.adb:62:10] ([#"commercialplane.adb" 62 0 0] ()) );
    ( [@GP_Sloc:commercialplane.adb:62:38] ([#"commercialplane.adb" 62 0 0] (let temp___259 [@mlw:proxy_symbol] [@introduced] = (let temp___258 [@mlw:proxy_symbol] [@introduced] = { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content } in (
     ( [#"commercialplane.adb" 62 0 0] begin ensures {true} let _ = (let _ = temp___258.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__fuelwarning in (
      ()))
      in () end ;
     { ( temp___258 ) with Commercialplane__plane.__split_fields = { ( temp___258.Commercialplane__plane.__split_fields ) with Commercialplane__plane.rec__commercialplane__plane__fuelwarning = (Commercialplane__warninglight__rep.of_rep((2 : int))) } } )))
     in (
     [#"commercialplane.adb" 62 0 0] (Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content <- ( temp___259.Commercialplane__plane.__split_fields ))))
    ) );
    ( [@GP_Sloc:commercialplane.adb:63:11] ([#"commercialplane.adb" 63 0 0] ()) );
    ( [@GP_Sloc:commercialplane.adb:63:11] ([#"commercialplane.adb" 63 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_260.temp___String_Literal_260(()))) ((1 : int)) ((19 : int))))) )) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = ((Commercialplane__warninglight__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__fuelwarning)) = (2 : int)) in (
   ()))
   in () end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "speedwarning" defined at commercialplane.ads:86, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Commercialplane__speedwarning__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__string as Standard__string
 use        Commercialplane__commercialplane as Commercialplane__commercialplane
 use        Commercialplane__plane as Commercialplane__plane
 use        Commercialplane__plane___axiom as Commercialplane__plane___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom
 use        Commercialplane__airspeed as Commercialplane__airspeed
 use        Commercialplane__airspeed__rep as Commercialplane__airspeed__rep
 use        Commercialplane__currentactivity as Commercialplane__currentactivity
 use        Commercialplane__currentactivity__rep as Commercialplane__currentactivity__rep
 use        Commercialplane__warninglight as Commercialplane__warninglight
 use        Commercialplane__warninglight__rep as Commercialplane__warninglight__rep
 use        Temp___String_Literal_263 as Temp___String_Literal_263
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_266 as Temp___String_Literal_266
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Commercialplane__fuel___axiom as Commercialplane__fuel___axiom
 use        Commercialplane__airspeed___axiom as Commercialplane__airspeed___axiom
 use        Commercialplane__altitude___axiom as Commercialplane__altitude___axiom
 use        Commercialplane__landinggear___axiom as Commercialplane__landinggear___axiom
 use        Commercialplane__door___axiom as Commercialplane__door___axiom
 use        Commercialplane__engine___axiom as Commercialplane__engine___axiom
 use        Commercialplane__currentactivity___axiom as Commercialplane__currentactivity___axiom
 use        Commercialplane__warninglight___axiom as Commercialplane__warninglight___axiom
 use        Commercialplane__plane___axiom as Commercialplane__plane___axiom
 use        Commercialplane__commercialplane___axiom as Commercialplane__commercialplane___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom

 let def [#"commercialplane.ads" 86 0 0][@GP_Subp:commercialplane.ads:86] 
   (__void_param : unit)
  requires { [#"commercialplane.ads" 86 0 0] true }
  ensures { [#"commercialplane.ads" 86 0 0] ([#"commercialplane.ads" 89 0 0] ( [@GP_Id:11] [@GP_Reason:VC_POSTCONDITION] [@GP_Shape:pragargs__cmp] [@GP_Sloc:commercialplane.ads:89:17] [@model_vc_post] [@comment:        Post => commercialPlane.speedWarning = Red;                 ^ commercialplane.ads:89:17:VC_POSTCONDITION] ( [@GP_Pretty_Ada:19392] [@GP_Sloc:commercialplane.ads:89:17] ((Commercialplane__warninglight__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__speedwarning) = (2 : int)) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram commercialplane.ads:86 *)
  ;
   assume {  (Commercialplane__plane___axiom.dynamic_invariant { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram commercialplane.ads:86 *)
  ;
  () (* Check for RTE in the Pre of the subprogram commercialplane.ads:86 *)
  ;
   begin ensures {true} let _ = (let _ = (Boolean.andb((Boolean.andb(((Commercialplane__currentactivity__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode)) = (2 : int))) (((Commercialplane__airspeed__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity)) < (250 : int))))) (((Commercialplane__airspeed__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity)) > (1000 : int)))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram commercialplane.ads:86 *)
  ;
   assume {  ( ( ( [@GP_Pretty_Ada:3561] ((Commercialplane__currentactivity__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode) = (2 : int)) ) /\ ( [@GP_Pretty_Ada:3567] ((Commercialplane__airspeed__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity) < (250 : int)) ) ) /\ ( [@GP_Pretty_Ada:3573] ((Commercialplane__airspeed__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity) > (1000 : int)) ) ) };
   try
   ( ();
   ( [@GP_Sloc:commercialplane.adb:69:11] ([#"commercialplane.adb" 69 0 0] ()) );
   ( [@GP_Sloc:commercialplane.adb:69:45] ([#"commercialplane.adb" 69 0 0] ()) );
   ( [@GP_Sloc:commercialplane.adb:69:7] ([#"commercialplane.adb" 69 0 0] (if (( ([#"commercialplane.adb" 69 0 0] [#"commercialplane.adb" 69 0 0] (([@branch_id=2598] Main.spark__branch).bool__content <- ( (Boolean.andb(((Commercialplane__currentactivity__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode)) = (2 : int))) (((Commercialplane__airspeed__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity)) <= (250 : int)))) )));
   ( [@branch_id=2598] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:commercialplane.adb:70:10] ([#"commercialplane.adb" 70 0 0] ()) );
    ( [@GP_Sloc:commercialplane.adb:70:39] ([#"commercialplane.adb" 70 0 0] (let temp___262 [@mlw:proxy_symbol] [@introduced] = (let temp___261 [@mlw:proxy_symbol] [@introduced] = { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content } in (
     ( [#"commercialplane.adb" 70 0 0] begin ensures {true} let _ = (let _ = temp___261.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__speedwarning in (
      ()))
      in () end ;
     { ( temp___261 ) with Commercialplane__plane.__split_fields = { ( temp___261.Commercialplane__plane.__split_fields ) with Commercialplane__plane.rec__commercialplane__plane__speedwarning = (Commercialplane__warninglight__rep.of_rep((2 : int))) } } )))
     in (
     [#"commercialplane.adb" 70 0 0] (Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content <- ( temp___262.Commercialplane__plane.__split_fields ))))
    ) );
    ( [@GP_Sloc:commercialplane.adb:71:11] ([#"commercialplane.adb" 71 0 0] ()) );
    ( [@GP_Sloc:commercialplane.adb:71:11] ([#"commercialplane.adb" 71 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_263.temp___String_Literal_263(()))) ((1 : int)) ((25 : int))))) )) ) )) else (
    ()))) );
   ( [@GP_Sloc:commercialplane.adb:73:11] ([#"commercialplane.adb" 73 0 0] ()) );
   ( [@GP_Sloc:commercialplane.adb:73:45] ([#"commercialplane.adb" 73 0 0] ()) );
   ( [@GP_Sloc:commercialplane.adb:73:7] ([#"commercialplane.adb" 73 0 0] (if (( ([#"commercialplane.adb" 73 0 0] [#"commercialplane.adb" 73 0 0] (([@branch_id=2618] Main.spark__branch).bool__content <- ( (Boolean.andb(((Commercialplane__currentactivity__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode)) = (2 : int))) (((Commercialplane__airspeed__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity)) >= (1000 : int)))) )));
   ( [@branch_id=2618] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:commercialplane.adb:74:10] ([#"commercialplane.adb" 74 0 0] ()) );
    ( [@GP_Sloc:commercialplane.adb:74:39] ([#"commercialplane.adb" 74 0 0] (let temp___265 [@mlw:proxy_symbol] [@introduced] = (let temp___264 [@mlw:proxy_symbol] [@introduced] = { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content } in (
     ( [#"commercialplane.adb" 74 0 0] begin ensures {true} let _ = (let _ = temp___264.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__speedwarning in (
      ()))
      in () end ;
     { ( temp___264 ) with Commercialplane__plane.__split_fields = { ( temp___264.Commercialplane__plane.__split_fields ) with Commercialplane__plane.rec__commercialplane__plane__speedwarning = (Commercialplane__warninglight__rep.of_rep((2 : int))) } } )))
     in (
     [#"commercialplane.adb" 74 0 0] (Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content <- ( temp___265.Commercialplane__plane.__split_fields ))))
    ) );
    ( [@GP_Sloc:commercialplane.adb:75:11] ([#"commercialplane.adb" 75 0 0] ()) );
    ( [@GP_Sloc:commercialplane.adb:75:11] ([#"commercialplane.adb" 75 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_266.temp___String_Literal_266(()))) ((1 : int)) ((25 : int))))) )) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = ((Commercialplane__warninglight__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__speedwarning)) = (2 : int)) in (
   ()))
   in () end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "speedwarningresponse" defined at commercialplane.ads:91, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Commercialplane__speedwarningresponse__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Integer as Integer
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard_String__Img as Standard_String__Img
 use        Standard__positive as Standard__positive
 use        Array__Int__Standard__character__Concat as Array__Int__Standard__character__Concat
 use        Standard__string as Standard__string
 use        Commercialplane__commercialplane as Commercialplane__commercialplane
 use        Commercialplane__plane as Commercialplane__plane
 use        Commercialplane__plane___axiom as Commercialplane__plane___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom
 use        Commercialplane__airspeed as Commercialplane__airspeed
 use        Commercialplane__airspeed__rep as Commercialplane__airspeed__rep
 use        Commercialplane__currentactivity as Commercialplane__currentactivity
 use        Commercialplane__currentactivity__rep as Commercialplane__currentactivity__rep
 use        Temp___String_Literal_269 as Temp___String_Literal_269
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Commercialplane__fuel___axiom as Commercialplane__fuel___axiom
 use        Commercialplane__airspeed___axiom as Commercialplane__airspeed___axiom
 use        Commercialplane__altitude___axiom as Commercialplane__altitude___axiom
 use        Commercialplane__landinggear___axiom as Commercialplane__landinggear___axiom
 use        Commercialplane__door___axiom as Commercialplane__door___axiom
 use        Commercialplane__engine___axiom as Commercialplane__engine___axiom
 use        Commercialplane__currentactivity___axiom as Commercialplane__currentactivity___axiom
 use        Commercialplane__warninglight___axiom as Commercialplane__warninglight___axiom
 use        Commercialplane__plane___axiom as Commercialplane__plane___axiom
 use        Commercialplane__commercialplane___axiom as Commercialplane__commercialplane___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom

 let def [#"commercialplane.ads" 91 0 0][@GP_Subp:commercialplane.ads:91] 
   (__void_param : unit)
  requires { [#"commercialplane.ads" 91 0 0] true }
  ensures { [#"commercialplane.ads" 91 0 0] ([#"commercialplane.ads" 94 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Id:14] [@comment:        Post => commercialPlane.velocity = commercialPlane.velocity'Old - 10;                 ^ commercialplane.ads:94:17:VC_POSTCONDITION] [@GP_Shape:pragargs__cmp] [@GP_Sloc:commercialplane.ads:94:17] [@model_vc_post] ( [@GP_Pretty_Ada:19459] [@GP_Sloc:commercialplane.ads:94:17] ((Commercialplane__airspeed__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity) = ((Commercialplane__airspeed__rep.to_rep (old { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity )) - (10 : int))) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram commercialplane.ads:91 *)
  ;
   assume {  (Commercialplane__plane___axiom.dynamic_invariant { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram commercialplane.ads:91 *)
  ;
  () (* Check for RTE in the Pre of the subprogram commercialplane.ads:91 *)
  ;
   begin ensures {true} let _ = (let _ = (Boolean.andb((Boolean.andb(((Commercialplane__currentactivity__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode)) = (2 : int))) (((Commercialplane__airspeed__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity)) <= (1000 : int))))) (((Commercialplane__airspeed__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity)) > (250 : int)))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram commercialplane.ads:91 *)
  ;
   assume {  ( ( ( [@GP_Pretty_Ada:3607] ((Commercialplane__currentactivity__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode) = (2 : int)) ) /\ ( [@GP_Pretty_Ada:3613] ((Commercialplane__airspeed__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity) <= (1000 : int)) ) ) /\ ( [@GP_Pretty_Ada:3619] ((Commercialplane__airspeed__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity) > (250 : int)) ) ) };
   begin ensures {true} let _ = (let _ = { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity in (
   ()))
   in () end ;
  (let temp___old_272 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
  ensures { (result = (Commercialplane__airspeed__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity))} 
  in _f) in (
   (  try
    ( ();
    ( [@GP_Sloc:commercialplane.adb:81:7] ([#"commercialplane.adb" 81 0 0] ()) );
    ( [@GP_Sloc:commercialplane.adb:81:35] ([#"commercialplane.adb" 81 0 0] ()) );
    ( [@GP_Sloc:commercialplane.adb:81:32] ([#"commercialplane.adb" 81 0 0] (let temp___268 [@mlw:proxy_symbol] [@introduced] = (let temp___267 [@mlw:proxy_symbol] [@introduced] = { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content } in (
     ( [#"commercialplane.adb" 81 0 0] begin ensures {true} let _ = (let _ = temp___267.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity in (
      ()))
      in () end ;
     { ( temp___267 ) with Commercialplane__plane.__split_fields = { ( temp___267.Commercialplane__plane.__split_fields ) with Commercialplane__plane.rec__commercialplane__plane__velocity = (Commercialplane__airspeed__rep.of_rep(([#"commercialplane.adb" 81 0 0] ( [@GP_Id:12] [@vc:annotation] [@GP_Shape:commercialplane_assign__sub] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:commercialplane.adb:81:60] [@comment:      commercialPlane.velocity := commercialPlane.velocity - 10;                                                            ^ commercialplane.adb:81:60:VC_RANGE_CHECK] (Commercialplane__airspeed.range_check_(((Commercialplane__airspeed__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity)) - (10 : int)))) )))) } } )))
     in (
      (Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content <- ( temp___268.Commercialplane__plane.__split_fields ))))
    ) );
    ( [@GP_Sloc:commercialplane.adb:82:7] ([#"commercialplane.adb" 82 0 0] ()) );
    ( [@GP_Sloc:commercialplane.adb:82:7] ([#"commercialplane.adb" 82 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((let temp___271 [@mlw:proxy_symbol] [@introduced] = (Standard_String__Img.to_string((Commercialplane__airspeed.attr__ATTRIBUTE_IMAGE((Commercialplane__airspeed__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity))))) ((7 : int))) in (
    (let temp___270 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_269.temp___String_Literal_269(())) in (
     (Standard__string.of_array((Array__Int__Standard__character__Concat.concat(temp___270) ((1 : int)) ((42 : int)) ((Standard__string.to_array(temp___271))) ((Standard__string.first(temp___271))) ((Standard__string.last(temp___271))))) ((1 : int)) (([#"commercialplane.adb" 82 0 0] ( [@comment:      Put_Line("Slowing down. commercialPlane velocity is "&commercialPlane.velocity'Image);                                                            ^ commercialplane.adb:82:60:VC_RANGE_CHECK] [@GP_Id:13] [@GP_Sloc:commercialplane.adb:82:60] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:call_put_line__2__concat] (Standard__positive.range_check_((((1 : int) + ((Integer.length((1 : int)) ((42 : int))) + (Integer.length((Standard__string.first(temp___271))) ((Standard__string.last(temp___271)))))) - (1 : int)))) ))))))
    ))
    )) )) );
     raise Return__exc )
   with
    Return__exc -> ()
   end;
    begin ensures {true} let _ = (let _ = ((Commercialplane__airspeed__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity)) = (temp___old_272 - (10 : int))) in (
    ()))
    in () end  )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "altitudewarning" defined at commercialplane.ads:96, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Commercialplane__altitudewarning__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__string as Standard__string
 use        Commercialplane__commercialplane as Commercialplane__commercialplane
 use        Commercialplane__plane as Commercialplane__plane
 use        Commercialplane__plane___axiom as Commercialplane__plane___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom
 use        Commercialplane__airspeed as Commercialplane__airspeed
 use        Commercialplane__airspeed__rep as Commercialplane__airspeed__rep
 use        Commercialplane__altitude as Commercialplane__altitude
 use        Commercialplane__altitude__rep as Commercialplane__altitude__rep
 use        Commercialplane__currentactivity as Commercialplane__currentactivity
 use        Commercialplane__currentactivity__rep as Commercialplane__currentactivity__rep
 use        Commercialplane__warninglight as Commercialplane__warninglight
 use        Commercialplane__warninglight__rep as Commercialplane__warninglight__rep
 use        Temp___String_Literal_275 as Temp___String_Literal_275
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_278 as Temp___String_Literal_278
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Commercialplane__fuel___axiom as Commercialplane__fuel___axiom
 use        Commercialplane__airspeed___axiom as Commercialplane__airspeed___axiom
 use        Commercialplane__altitude___axiom as Commercialplane__altitude___axiom
 use        Commercialplane__landinggear___axiom as Commercialplane__landinggear___axiom
 use        Commercialplane__door___axiom as Commercialplane__door___axiom
 use        Commercialplane__engine___axiom as Commercialplane__engine___axiom
 use        Commercialplane__currentactivity___axiom as Commercialplane__currentactivity___axiom
 use        Commercialplane__warninglight___axiom as Commercialplane__warninglight___axiom
 use        Commercialplane__plane___axiom as Commercialplane__plane___axiom
 use        Commercialplane__commercialplane___axiom as Commercialplane__commercialplane___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom

 let def [#"commercialplane.ads" 96 0 0][@GP_Subp:commercialplane.ads:96] 
   (__void_param : unit)
  requires { [#"commercialplane.ads" 96 0 0] true }
  ensures { [#"commercialplane.ads" 96 0 0] ([#"commercialplane.ads" 99 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Id:15] [@GP_Shape:pragargs__cmp] [@GP_Sloc:commercialplane.ads:99:17] [@model_vc_post] [@comment:        Post => commercialPlane.heightWarning = Red;                 ^ commercialplane.ads:99:17:VC_POSTCONDITION] ( [@GP_Pretty_Ada:19521] [@GP_Sloc:commercialplane.ads:99:17] ((Commercialplane__warninglight__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__heightwarning) = (2 : int)) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram commercialplane.ads:96 *)
  ;
   assume {  (Commercialplane__plane___axiom.dynamic_invariant { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram commercialplane.ads:96 *)
  ;
  () (* Check for RTE in the Pre of the subprogram commercialplane.ads:96 *)
  ;
   begin ensures {true} let _ = (let _ = (Boolean.andb((Boolean.andb(((Commercialplane__currentactivity__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode)) = (2 : int))) (((Commercialplane__altitude__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height)) < (500 : int))))) (((Commercialplane__airspeed__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity)) > (1200 : int)))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram commercialplane.ads:96 *)
  ;
   assume {  ( ( ( [@GP_Pretty_Ada:3659] ((Commercialplane__currentactivity__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode) = (2 : int)) ) /\ ( [@GP_Pretty_Ada:3665] ((Commercialplane__altitude__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height) < (500 : int)) ) ) /\ ( [@GP_Pretty_Ada:3671] ((Commercialplane__airspeed__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity) > (1200 : int)) ) ) };
   try
   ( ();
   ( [@GP_Sloc:commercialplane.adb:87:11] ([#"commercialplane.adb" 87 0 0] ()) );
   ( [@GP_Sloc:commercialplane.adb:87:45] ([#"commercialplane.adb" 87 0 0] ()) );
   ( [@GP_Sloc:commercialplane.adb:87:7] ([#"commercialplane.adb" 87 0 0] (if (( ([#"commercialplane.adb" 87 0 0] [#"commercialplane.adb" 87 0 0] (([@branch_id=2678] Main.spark__branch).bool__content <- ( (Boolean.andb(((Commercialplane__currentactivity__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode)) = (2 : int))) (((Commercialplane__altitude__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height)) < (500 : int)))) )));
   ( [@branch_id=2678] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:commercialplane.adb:88:10] ([#"commercialplane.adb" 88 0 0] ()) );
    ( [@GP_Sloc:commercialplane.adb:88:40] ([#"commercialplane.adb" 88 0 0] (let temp___274 [@mlw:proxy_symbol] [@introduced] = (let temp___273 [@mlw:proxy_symbol] [@introduced] = { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content } in (
     ( [#"commercialplane.adb" 88 0 0] begin ensures {true} let _ = (let _ = temp___273.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__heightwarning in (
      ()))
      in () end ;
     { ( temp___273 ) with Commercialplane__plane.__split_fields = { ( temp___273.Commercialplane__plane.__split_fields ) with Commercialplane__plane.rec__commercialplane__plane__heightwarning = (Commercialplane__warninglight__rep.of_rep((2 : int))) } } )))
     in (
     [#"commercialplane.adb" 88 0 0] (Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content <- ( temp___274.Commercialplane__plane.__split_fields ))))
    ) );
    ( [@GP_Sloc:commercialplane.adb:89:13] ([#"commercialplane.adb" 89 0 0] ()) );
    ( [@GP_Sloc:commercialplane.adb:89:13] ([#"commercialplane.adb" 89 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_275.temp___String_Literal_275(()))) ((1 : int)) ((25 : int))))) )) ) )) else (
    ()))) );
   ( [@GP_Sloc:commercialplane.adb:91:11] ([#"commercialplane.adb" 91 0 0] ()) );
   ( [@GP_Sloc:commercialplane.adb:91:45] ([#"commercialplane.adb" 91 0 0] ()) );
   ( [@GP_Sloc:commercialplane.adb:91:7] ([#"commercialplane.adb" 91 0 0] (if (( ([#"commercialplane.adb" 91 0 0] [#"commercialplane.adb" 91 0 0] (([@branch_id=2698] Main.spark__branch).bool__content <- ( (Boolean.andb(((Commercialplane__currentactivity__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode)) = (2 : int))) (((Commercialplane__altitude__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height)) > (1200 : int)))) )));
   ( [@branch_id=2698] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:commercialplane.adb:92:10] ([#"commercialplane.adb" 92 0 0] ()) );
    ( [@GP_Sloc:commercialplane.adb:92:40] ([#"commercialplane.adb" 92 0 0] (let temp___277 [@mlw:proxy_symbol] [@introduced] = (let temp___276 [@mlw:proxy_symbol] [@introduced] = { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content } in (
     ( [#"commercialplane.adb" 92 0 0] begin ensures {true} let _ = (let _ = temp___276.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__heightwarning in (
      ()))
      in () end ;
     { ( temp___276 ) with Commercialplane__plane.__split_fields = { ( temp___276.Commercialplane__plane.__split_fields ) with Commercialplane__plane.rec__commercialplane__plane__heightwarning = (Commercialplane__warninglight__rep.of_rep((2 : int))) } } )))
     in (
     [#"commercialplane.adb" 92 0 0] (Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content <- ( temp___277.Commercialplane__plane.__split_fields ))))
    ) );
    ( [@GP_Sloc:commercialplane.adb:93:11] ([#"commercialplane.adb" 93 0 0] ()) );
    ( [@GP_Sloc:commercialplane.adb:93:11] ([#"commercialplane.adb" 93 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_278.temp___String_Literal_278(()))) ((1 : int)) ((25 : int))))) )) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = ((Commercialplane__warninglight__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__heightwarning)) = (2 : int)) in (
   ()))
   in () end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "altitudewarningresponse" defined at commercialplane.ads:101, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Commercialplane__altitudewarningresponse__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Integer as Integer
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard_String__Img as Standard_String__Img
 use        Standard__positive as Standard__positive
 use        Array__Int__Standard__character__Concat as Array__Int__Standard__character__Concat
 use        Standard__string as Standard__string
 use        Commercialplane__commercialplane as Commercialplane__commercialplane
 use        Commercialplane__plane as Commercialplane__plane
 use        Commercialplane__plane___axiom as Commercialplane__plane___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom
 use        Commercialplane__altitude as Commercialplane__altitude
 use        Commercialplane__altitude__rep as Commercialplane__altitude__rep
 use        Commercialplane__currentactivity as Commercialplane__currentactivity
 use        Commercialplane__currentactivity__rep as Commercialplane__currentactivity__rep
 use        Temp___String_Literal_281 as Temp___String_Literal_281
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Commercialplane__fuel___axiom as Commercialplane__fuel___axiom
 use        Commercialplane__airspeed___axiom as Commercialplane__airspeed___axiom
 use        Commercialplane__altitude___axiom as Commercialplane__altitude___axiom
 use        Commercialplane__landinggear___axiom as Commercialplane__landinggear___axiom
 use        Commercialplane__door___axiom as Commercialplane__door___axiom
 use        Commercialplane__engine___axiom as Commercialplane__engine___axiom
 use        Commercialplane__currentactivity___axiom as Commercialplane__currentactivity___axiom
 use        Commercialplane__warninglight___axiom as Commercialplane__warninglight___axiom
 use        Commercialplane__plane___axiom as Commercialplane__plane___axiom
 use        Commercialplane__commercialplane___axiom as Commercialplane__commercialplane___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom

 let def [#"commercialplane.ads" 101 0 0][@GP_Subp:commercialplane.ads:101] 
   (__void_param : unit)
  requires { [#"commercialplane.ads" 101 0 0] true }
  ensures { [#"commercialplane.ads" 101 0 0] ([#"commercialplane.ads" 104 0 0] ( [@comment:        Post => commercialPlane.height = commercialPlane.height'Old - 50;                 ^ commercialplane.ads:104:17:VC_POSTCONDITION] [@GP_Reason:VC_POSTCONDITION] [@GP_Id:18] [@GP_Shape:pragargs__cmp] [@model_vc_post] [@GP_Sloc:commercialplane.ads:104:17] ( [@GP_Pretty_Ada:19588] [@GP_Sloc:commercialplane.ads:104:17] ((Commercialplane__altitude__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height) = ((Commercialplane__altitude__rep.to_rep (old { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height )) - (50 : int))) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram commercialplane.ads:101 *)
  ;
   assume {  (Commercialplane__plane___axiom.dynamic_invariant { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram commercialplane.ads:101 *)
  ;
  () (* Check for RTE in the Pre of the subprogram commercialplane.ads:101 *)
  ;
   begin ensures {true} let _ = (let _ = (Boolean.andb((Boolean.andb(((Commercialplane__currentactivity__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode)) = (2 : int))) (((Commercialplane__altitude__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height)) <= (1200 : int))))) (((Commercialplane__altitude__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height)) > (500 : int)))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram commercialplane.ads:101 *)
  ;
   assume {  ( ( ( [@GP_Pretty_Ada:3705] ((Commercialplane__currentactivity__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode) = (2 : int)) ) /\ ( [@GP_Pretty_Ada:3711] ((Commercialplane__altitude__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height) <= (1200 : int)) ) ) /\ ( [@GP_Pretty_Ada:3717] ((Commercialplane__altitude__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height) > (500 : int)) ) ) };
   begin ensures {true} let _ = (let _ = { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height in (
   ()))
   in () end ;
  (let temp___old_284 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
  ensures { (result = (Commercialplane__altitude__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height))} 
  in _f) in (
   (  try
    ( ();
    ( [@GP_Sloc:commercialplane.adb:99:7] ([#"commercialplane.adb" 99 0 0] ()) );
    ( [@GP_Sloc:commercialplane.adb:99:33] ([#"commercialplane.adb" 99 0 0] ()) );
    ( [@GP_Sloc:commercialplane.adb:99:30] ([#"commercialplane.adb" 99 0 0] (let temp___280 [@mlw:proxy_symbol] [@introduced] = (let temp___279 [@mlw:proxy_symbol] [@introduced] = { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content } in (
     ( [#"commercialplane.adb" 99 0 0] begin ensures {true} let _ = (let _ = temp___279.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height in (
      ()))
      in () end ;
     { ( temp___279 ) with Commercialplane__plane.__split_fields = { ( temp___279.Commercialplane__plane.__split_fields ) with Commercialplane__plane.rec__commercialplane__plane__height = (Commercialplane__altitude__rep.of_rep(([#"commercialplane.adb" 99 0 0] ( [@GP_Id:16] [@vc:annotation] [@GP_Shape:commercialplane_assign__sub] [@GP_Sloc:commercialplane.adb:99:56] [@GP_Reason:VC_RANGE_CHECK] [@comment:      commercialPlane.height := commercialPlane.height - 50;                                                        ^ commercialplane.adb:99:56:VC_RANGE_CHECK] (Commercialplane__altitude.range_check_(((Commercialplane__altitude__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height)) - (50 : int)))) )))) } } )))
     in (
      (Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content <- ( temp___280.Commercialplane__plane.__split_fields ))))
    ) );
    ( [@GP_Sloc:commercialplane.adb:100:7] ([#"commercialplane.adb" 100 0 0] ()) );
    ( [@GP_Sloc:commercialplane.adb:100:7] ([#"commercialplane.adb" 100 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((let temp___283 [@mlw:proxy_symbol] [@introduced] = (Standard_String__Img.to_string((Commercialplane__altitude.attr__ATTRIBUTE_IMAGE((Commercialplane__altitude__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height))))) ((7 : int))) in (
    (let temp___282 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_281.temp___String_Literal_281(())) in (
     (Standard__string.of_array((Array__Int__Standard__character__Concat.concat(temp___282) ((1 : int)) ((49 : int)) ((Standard__string.to_array(temp___283))) ((Standard__string.first(temp___283))) ((Standard__string.last(temp___283))))) ((1 : int)) (([#"commercialplane.adb" 100 0 0] ( [@comment:      Put_Line("Decreasing altitude. commercialPlane altitude is "&commercialPlane.height'Image);                                                                   ^ commercialplane.adb:100:67:VC_RANGE_CHECK] [@GP_Id:17] [@GP_Sloc:commercialplane.adb:100:67] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:call_put_line__2__concat] (Standard__positive.range_check_((((1 : int) + ((Integer.length((1 : int)) ((49 : int))) + (Integer.length((Standard__string.first(temp___283))) ((Standard__string.last(temp___283)))))) - (1 : int)))) ))))))
    ))
    )) )) );
     raise Return__exc )
   with
    Return__exc -> ()
   end;
    begin ensures {true} let _ = (let _ = ((Commercialplane__altitude__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height)) = (temp___old_284 - (50 : int))) in (
    ()))
    in () end  )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "flyingidle" defined at commercialplane.ads:106, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Commercialplane__flyingidle__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Commercialplane__commercialplane as Commercialplane__commercialplane
 use        Commercialplane__plane as Commercialplane__plane
 use        Commercialplane__plane___axiom as Commercialplane__plane___axiom
 use        Commercialplane__airspeed as Commercialplane__airspeed
 use        Commercialplane__airspeed__rep as Commercialplane__airspeed__rep
 use        Commercialplane__altitude as Commercialplane__altitude
 use        Commercialplane__altitude__rep as Commercialplane__altitude__rep
 use        Commercialplane__currentactivity as Commercialplane__currentactivity
 use        Commercialplane__currentactivity__rep as Commercialplane__currentactivity__rep
 use        Commercialplane__fuel___axiom as Commercialplane__fuel___axiom
 use        Commercialplane__airspeed___axiom as Commercialplane__airspeed___axiom
 use        Commercialplane__altitude___axiom as Commercialplane__altitude___axiom
 use        Commercialplane__landinggear___axiom as Commercialplane__landinggear___axiom
 use        Commercialplane__door___axiom as Commercialplane__door___axiom
 use        Commercialplane__engine___axiom as Commercialplane__engine___axiom
 use        Commercialplane__currentactivity___axiom as Commercialplane__currentactivity___axiom
 use        Commercialplane__warninglight___axiom as Commercialplane__warninglight___axiom
 use        Commercialplane__plane___axiom as Commercialplane__plane___axiom
 use        Commercialplane__commercialplane___axiom as Commercialplane__commercialplane___axiom

 let def [#"commercialplane.ads" 106 0 0][@GP_Subp:commercialplane.ads:106] 
   (__void_param : unit)
  requires { [#"commercialplane.ads" 106 0 0] true }
  ensures { [#"commercialplane.ads" 106 0 0] ([#"commercialplane.ads" 110 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Id:19] [@GP_Shape:pragargs__cmp] [@comment:        Post => commercialPlane.mode = Flying;                 ^ commercialplane.ads:110:17:VC_POSTCONDITION] [@GP_Sloc:commercialplane.ads:110:17] [@model_vc_post] ( [@GP_Pretty_Ada:19660] [@GP_Sloc:commercialplane.ads:110:17] ((Commercialplane__currentactivity__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode) = (2 : int)) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram commercialplane.ads:106 *)
  ;
   assume {  (Commercialplane__plane___axiom.dynamic_invariant { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram commercialplane.ads:106 *)
  ;
  () (* Check for RTE in the Pre of the subprogram commercialplane.ads:106 *)
  ;
   begin ensures {true} let _ = (let _ = (Boolean.andb((Boolean.andb((Boolean.andb((Boolean.andb(((Commercialplane__currentactivity__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode)) = (2 : int))) (((Commercialplane__altitude__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height)) >= (500 : int))))) (((Commercialplane__altitude__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height)) <= (1200 : int))))) (((Commercialplane__airspeed__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity)) <= (1000 : int))))) (((Commercialplane__airspeed__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity)) >= (250 : int)))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram commercialplane.ads:106 *)
  ;
   assume {  ( ( ( ( ( [@GP_Pretty_Ada:3755] ((Commercialplane__currentactivity__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode) = (2 : int)) ) /\ ( [@GP_Pretty_Ada:3761] ((Commercialplane__altitude__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height) >= (500 : int)) ) ) /\ ( [@GP_Pretty_Ada:3767] ((Commercialplane__altitude__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height) <= (1200 : int)) ) ) /\ ( [@GP_Pretty_Ada:3773] ((Commercialplane__airspeed__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity) <= (1000 : int)) ) ) /\ ( [@GP_Pretty_Ada:3779] ((Commercialplane__airspeed__rep.to_rep { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity) >= (250 : int)) ) ) };
   try
   ( ();
   ( [@GP_Sloc:commercialplane.adb:105:11] ([#"commercialplane.adb" 105 0 0] ()) );
   ( [@GP_Sloc:commercialplane.adb:105:45] ([#"commercialplane.adb" 105 0 0] ()) );
   ( [@GP_Sloc:commercialplane.adb:105:80] ([#"commercialplane.adb" 105 0 0] ()) );
   ( [@GP_Sloc:commercialplane.adb:106:11] ([#"commercialplane.adb" 106 0 0] ()) );
   ( [@GP_Sloc:commercialplane.adb:106:47] ([#"commercialplane.adb" 106 0 0] ()) );
   ( [@GP_Sloc:commercialplane.adb:105:7] ([#"commercialplane.adb" 105 0 0] (if (( ([#"commercialplane.adb" 105 0 0] [#"commercialplane.adb" 105 0 0] (([@branch_id=2758] Main.spark__branch).bool__content <- ( (Boolean.andb((Boolean.andb((Boolean.andb((Boolean.andb(((Commercialplane__currentactivity__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode)) = (2 : int))) (((Commercialplane__altitude__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height)) <= (1200 : int))))) (((Commercialplane__altitude__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__height)) > (500 : int))))) (((Commercialplane__airspeed__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity)) <= (250 : int))))) (((Commercialplane__airspeed__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__velocity)) > (1000 : int)))) )));
   ( [@branch_id=2758] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:commercialplane.adb:107:10] ([#"commercialplane.adb" 107 0 0] ()) );
    ( [@GP_Sloc:commercialplane.adb:107:31] ([#"commercialplane.adb" 107 0 0] (let temp___286 [@mlw:proxy_symbol] [@introduced] = (let temp___285 [@mlw:proxy_symbol] [@introduced] = { Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content } in (
     ( [#"commercialplane.adb" 107 0 0] begin ensures {true} let _ = (let _ = temp___285.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode in (
      ()))
      in () end ;
     { ( temp___285 ) with Commercialplane__plane.__split_fields = { ( temp___285.Commercialplane__plane.__split_fields ) with Commercialplane__plane.rec__commercialplane__plane__mode = (Commercialplane__currentactivity__rep.of_rep((2 : int))) } } )))
     in (
     [#"commercialplane.adb" 107 0 0] (Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content <- ( temp___286.Commercialplane__plane.__split_fields ))))
    ) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = ((Commercialplane__currentactivity__rep.to_rep({ Commercialplane__plane.__split_fields = Commercialplane__commercialplane.commercialplane__split_fields.Commercialplane__plane.__split_fields__content }.Commercialplane__plane.__split_fields.Commercialplane__plane.rec__commercialplane__plane__mode)) = (2 : int)) in (
   ()))
   in () end  )
end
