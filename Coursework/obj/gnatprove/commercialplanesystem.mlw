(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_short_integer =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content : short_short_integer }
 
 function short_short_integer__ref_short_short_integer__content__projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref_short_short_integer__content__projection
 
 meta "inline:no" function short_short_integer__ref_short_short_integer__content__projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer as Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_integer =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content : short_integer }
 
 function short_integer__ref_short_integer__content__projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref_short_integer__content__projection
 
 meta "inline:no" function short_integer__ref_short_integer__content__projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer as Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content : integer }
 
 function integer__ref_integer__content__projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref_integer__content__projection
 
 meta "inline:no" function integer__ref_integer__content__projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer as Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content : long_integer }
 
 function long_integer__ref_long_integer__content__projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref_long_integer__content__projection
 
 meta "inline:no" function long_integer__ref_long_integer__content__projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer as Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content : long_long_integer }
 
 function long_long_integer__ref_long_long_integer__content__projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref_long_long_integer__content__projection
 
 meta "inline:no" function long_long_integer__ref_long_long_integer__content__projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer as Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type natural =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content : natural }
 
 function natural__ref_natural__content__projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref_natural__content__projection
 
 meta "inline:no" function natural__ref_natural__content__projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural as Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type positive =
  < range 1 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content : positive }
 
 function positive__ref_positive__content__projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref_positive__content__projection
 
 meta "inline:no" function positive__ref_positive__content__projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive as Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type short_float 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content : short_float }
 
 function short_float__ref_short_float__content__projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref_short_float__content__projection
 
 meta "inline:no" function short_float__ref_short_float__content__projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float as Standard__short_float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type float__ 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = float__, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float____ref =
  { mutable float____content : float__ }
 
 function float____ref_float____content__projection 
   (a : float____ref) : float__ =
  a.float____content
 
 meta "model_projection" function float____ref_float____content__projection
 
 meta "inline:no" function float____ref_float____content__projection
 
 val float____havoc 
   (x : float____ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float as Standard__float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__float.float__, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64

 type long_float 
 
 val constant first 
   : Float64.t
  ensures { result =  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)) }
 
 val constant last 
   : Float64.t
  ensures { result =  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t) }
 
 predicate in_range 
   (x : Float64.t) =
  (Float64.t'isFinite x)
 val in_range 
   (x : Float64.t) : bool
  ensures { result <-> in_range (x : Float64.t) }
 
 clone export "ada__model".Static_Float64 with axiom .,
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content : long_float }
 
 function long_float__ref_long_float__content__projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref_long_float__content__projection
 
 meta "inline:no" function long_float__ref_long_float__content__projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float as Standard__long_float
 use        "_gnatprove_standard".Float64 as Float64
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float64 with axiom .,
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (255 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content : character }
 
 function character__ref_character__content__projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref_character__content__projection
 
 meta "inline:no" function character__ref_character__content__projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character as Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (65535 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content : wide_character }
 
 function wide_character__ref_wide_character__content__projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref_wide_character__content__projection
 
 meta "inline:no" function wide_character__ref_wide_character__content__projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character as Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content : wide_wide_character }
 
 function wide_wide_character__ref_wide_wide_character__content__projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref_wide_wide_character__content__projection
 
 meta "inline:no" function wide_wide_character__ref_wide_wide_character__content__projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type string__ref =
  { mutable string__content : string }
 
 function string__ref_string__content__projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref_string__content__projection
 
 meta "inline:no" function string__ref_string__content__projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module defining to_string/of_string functions, created in Gnat2Why.Types.Translate_Type *)
module Standard_String__Img
 use        "int".Int
 use        Standard__string as Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 val function to_string 
   (x : Main.__image) (s : int) : Standard__string.string
 
 val function from_string 
   (x : Standard__string.string) : Main.__image
 
 axiom to_string__first :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ((Standard__string.first (to_string x s)) = (1 : int))))
 
 axiom to_string__length :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ( (s >= (0 : int)) -> ((Standard__string.length (to_string x s)) <= s) )))

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character
 use        Standard__wide_character__rep as Standard__wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character__rep as Standard__wide_character__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_character as Standard__wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_string__ref =
  { mutable wide_string__content : wide_string }
 
 function wide_string__ref_wide_string__content__projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref_wide_string__content__projection
 
 meta "inline:no" function wide_string__ref_wide_string__content__projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content : wide_wide_string }
 
 function wide_wide_string__ref_wide_wide_string__content__projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref_wide_wide_string__content__projection
 
 meta "inline:no" function wide_wide_string__ref_wide_wide_string__content__projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 function num_small 
   : int =
  (1 : int)
 
 function den_small 
   : int =
  (1000000000 : int)
 
 clone export "ada__model".Fixed_Point_Rep with axiom .,
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 type duration 
 
 val constant num_small 
   : Main.__fixed
  ensures { result =  (1 : int) }
 
 val constant den_small 
   : Main.__fixed
  ensures { result =  (1000000000 : int) }
 
 val constant first 
   : Main.__fixed
  ensures { result =  ( ( -9223372036854775808 ) : int ) }
 
 val constant last 
   : Main.__fixed
  ensures { result =  ( 9223372036854775807 : int ) }
 
 predicate in_range 
   (x : Main.__fixed) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : Main.__fixed) : bool
  ensures { result <-> in_range (x : Main.__fixed) }
 
 clone export "ada__model".Static_Fixed_Point with axiom .,
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content : duration }
 
 function duration__ref_duration__content__projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref_duration__content__projection
 
 meta "inline:no" function duration__ref_duration__content__projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration__rep
 use        Standard__duration as Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Fixed with axiom .,
 type t = Standard__duration.duration, 
 predicate in_range = Standard__duration.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_8 =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content : integer_8 }
 
 function integer_8__ref_integer_8__content__projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref_integer_8__content__projection
 
 meta "inline:no" function integer_8__ref_integer_8__content__projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8 as Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content : integer_16 }
 
 function integer_16__ref_integer_16__content__projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref_integer_16__content__projection
 
 meta "inline:no" function integer_16__ref_integer_16__content__projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16 as Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content : integer_32 }
 
 function integer_32__ref_integer_32__content__projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref_integer_32__content__projection
 
 meta "inline:no" function integer_32__ref_integer_32__content__projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32 as Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content : integer_64 }
 
 function integer_64__ref_integer_64__content__projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref_integer_64__content__projection
 
 meta "inline:no" function integer_64__ref_integer_64__content__projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64 as Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content : universal_integer }
 
 function universal_integer__ref_universal_integer__content__projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref_universal_integer__content__projection
 
 meta "inline:no" function universal_integer__ref_universal_integer__content__projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer as Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tcountB =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tcountB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tcountB__ref =
  { mutable tcountB__content : tcountB }
 
 function tcountB__ref_tcountB__content__projection 
   (a : tcountB__ref) : tcountB =
  a.tcountB__content
 
 meta "model_projection" function tcountB__ref_tcountB__content__projection
 
 meta "inline:no" function tcountB__ref_tcountB__content__projection
 
 val tcountB__havoc 
   (x : tcountB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB__rep
 use        Ada__text_io__TcountB as Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__TcountB.tcountB) : int =
  (Ada__text_io__TcountB.tcountB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__TcountB.tcountB, 
 predicate in_range = Ada__text_io__TcountB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type count =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = count, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type count__ref =
  { mutable count__content : count }
 
 function count__ref_count__content__projection 
   (a : count__ref) : count =
  a.count__content
 
 meta "model_projection" function count__ref_count__content__projection
 
 meta "inline:no" function count__ref_count__content__projection
 
 val count__havoc 
   (x : count__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count__rep
 use        Ada__text_io__count as Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__count.count) : int =
  (Ada__text_io__count.count'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__count.count, 
 predicate in_range = Ada__text_io__count.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "landinggear" defined at commercialplanesystem.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Commercialplanesystem__landinggear
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type landinggear 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = landinggear, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type landinggear__ref =
  { mutable landinggear__content : landinggear }
 
 function landinggear__ref_landinggear__content__projection 
   (a : landinggear__ref) : landinggear =
  a.landinggear__content
 
 meta "model_projection" function landinggear__ref_landinggear__content__projection
 
 meta "inline:no" function landinggear__ref_landinggear__content__projection
 
 val landinggear__havoc 
   (x : landinggear__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "landinggear" defined at commercialplanesystem.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Commercialplanesystem__landinggear__rep
 use        Commercialplanesystem__landinggear as Commercialplanesystem__landinggear
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Commercialplanesystem__landinggear.landinggear, 
 predicate in_range = Commercialplanesystem__landinggear.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "currentactivity" defined at commercialplanesystem.ads:9, created in Gnat2Why.Types.Translate_Type *)
module Commercialplanesystem__currentactivity
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type currentactivity 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = currentactivity, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type currentactivity__ref =
  { mutable currentactivity__content : currentactivity }
 
 function currentactivity__ref_currentactivity__content__projection 
   (a : currentactivity__ref) : currentactivity =
  a.currentactivity__content
 
 meta "model_projection" function currentactivity__ref_currentactivity__content__projection
 
 meta "inline:no" function currentactivity__ref_currentactivity__content__projection
 
 val currentactivity__havoc 
   (x : currentactivity__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "currentactivity" defined at commercialplanesystem.ads:9, created in Gnat2Why.Types.Translate_Type *)
module Commercialplanesystem__currentactivity__rep
 use        Commercialplanesystem__currentactivity as Commercialplanesystem__currentactivity
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Commercialplanesystem__currentactivity.currentactivity, 
 predicate in_range = Commercialplanesystem__currentactivity.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TpassengersB" defined at commercialplanesystem.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Commercialplanesystem__TpassengersB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tpassengersB =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tpassengersB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tpassengersB__ref =
  { mutable tpassengersB__content : tpassengersB }
 
 function tpassengersB__ref_tpassengersB__content__projection 
   (a : tpassengersB__ref) : tpassengersB =
  a.tpassengersB__content
 
 meta "model_projection" function tpassengersB__ref_tpassengersB__content__projection
 
 meta "inline:no" function tpassengersB__ref_tpassengersB__content__projection
 
 val tpassengersB__havoc 
   (x : tpassengersB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TpassengersB" defined at commercialplanesystem.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Commercialplanesystem__TpassengersB__rep
 use        Commercialplanesystem__TpassengersB as Commercialplanesystem__TpassengersB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Commercialplanesystem__TpassengersB.tpassengersB) : int =
  (Commercialplanesystem__TpassengersB.tpassengersB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Commercialplanesystem__TpassengersB.tpassengersB, 
 predicate in_range = Commercialplanesystem__TpassengersB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "passengers" defined at commercialplanesystem.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Commercialplanesystem__passengers
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type passengers =
  < range 0 100 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (100 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = passengers, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type passengers__ref =
  { mutable passengers__content : passengers }
 
 function passengers__ref_passengers__content__projection 
   (a : passengers__ref) : passengers =
  a.passengers__content
 
 meta "model_projection" function passengers__ref_passengers__content__projection
 
 meta "inline:no" function passengers__ref_passengers__content__projection
 
 val passengers__havoc 
   (x : passengers__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "passengers" defined at commercialplanesystem.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Commercialplanesystem__passengers__rep
 use        Commercialplanesystem__passengers as Commercialplanesystem__passengers
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Commercialplanesystem__passengers.passengers) : int =
  (Commercialplanesystem__passengers.passengers'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Commercialplanesystem__passengers.passengers, 
 predicate in_range = Commercialplanesystem__passengers.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "engine_status" defined at engine.ads:3, created in Gnat2Why.Types.Translate_Type *)
module Engine__engine_status
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type engine_status 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = engine_status, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type engine_status__ref =
  { mutable engine_status__content : engine_status }
 
 function engine_status__ref_engine_status__content__projection 
   (a : engine_status__ref) : engine_status =
  a.engine_status__content
 
 meta "model_projection" function engine_status__ref_engine_status__content__projection
 
 meta "inline:no" function engine_status__ref_engine_status__content__projection
 
 val engine_status__havoc 
   (x : engine_status__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "engine_status" defined at engine.ads:3, created in Gnat2Why.Types.Translate_Type *)
module Engine__engine_status__rep
 use        Engine__engine_status as Engine__engine_status
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Engine__engine_status.engine_status, 
 predicate in_range = Engine__engine_status.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "engine_state" defined at engine.ads:5, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Engine__engine_state__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Engine__engine_status as Engine__engine_status
 use        Engine__engine_status__rep as Engine__engine_status__rep

 type __split_fields =
  { rec__engine__engine_state__status [@model_trace:.13607] [@name:status] : Engine__engine_status.engine_status }
 
 function __split_fields_rec__engine__engine_state__status__projection [@model_trace:.13607] [@name:status] 
   (a : __split_fields) : Engine__engine_status.engine_status =
  a.rec__engine__engine_state__status
 
 meta "model_projection" function __split_fields_rec__engine__engine_state__status__projection
 
 meta "inline:no" function __split_fields_rec__engine__engine_state__status__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__projection
 
 meta "inline:no" function __rep___split_fields__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate engine__engine_state__status__pred 
   (a : __rep) =
  true
 val engine__engine_state__status__pred 
   (a : __rep) : bool
  ensures { result <-> engine__engine_state__status__pred (a : __rep) }
 
 val rec__engine__engine_state__status_ 
   (a : __rep) : Engine__engine_status.engine_status
  requires {  (engine__engine_state__status__pred a) }
  ensures {  (result = a.__split_fields.rec__engine__engine_state__status) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (((Engine__engine_status__rep.to_rep a.__split_fields.rec__engine__engine_state__status) = (Engine__engine_status__rep.to_rep b.__split_fields.rec__engine__engine_state__status))) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "engine_state" defined at engine.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Engine__engine_state
 use export Engine__engine_state__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type engine_state =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant engine__engine_state__status__first__bit 
   : int

 
 val constant engine__engine_state__status__last__bit 
   : int

 
 val constant engine__engine_state__status__position 
   : int

 
 axiom engine__engine_state__status__first__bit_axiom :
  ((engine__engine_state__status__first__bit ) >= (0 : int))
 
 axiom engine__engine_state__status__last__bit_axiom :
  ((engine__engine_state__status__last__bit ) > (engine__engine_state__status__first__bit ))
 
 axiom engine__engine_state__status__position_axiom :
  ((engine__engine_state__status__position ) >= (0 : int))
 
 val function user_eq 
   (a : engine_state) (b : engine_state) : bool
 
 val constant dummy 
   : engine_state

 
 type engine_state__ref =
  { mutable engine_state__content : engine_state }
 
 function engine_state__ref_engine_state__content__projection 
   (a : engine_state__ref) : engine_state =
  a.engine_state__content
 
 meta "model_projection" function engine_state__ref_engine_state__content__projection
 
 meta "inline:no" function engine_state__ref_engine_state__content__projection
 
 val engine_state__havoc 
   (x : engine_state__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "door_state" defined at door.ads:3, created in Gnat2Why.Types.Translate_Type *)
module Door__door_state
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type door_state 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = door_state, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type door_state__ref =
  { mutable door_state__content : door_state }
 
 function door_state__ref_door_state__content__projection 
   (a : door_state__ref) : door_state =
  a.door_state__content
 
 meta "model_projection" function door_state__ref_door_state__content__projection
 
 meta "inline:no" function door_state__ref_door_state__content__projection
 
 val door_state__havoc 
   (x : door_state__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "door_state" defined at door.ads:3, created in Gnat2Why.Types.Translate_Type *)
module Door__door_state__rep
 use        Door__door_state as Door__door_state
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Door__door_state.door_state, 
 predicate in_range = Door__door_state.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "doorsystem" defined at door.ads:5, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Door__doorsystem__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Door__door_state as Door__door_state
 use        Door__door_state__rep as Door__door_state__rep

 type __split_fields =
  { rec__door__doorsystem__door [@model_trace:.13747] [@name:door] : Door__door_state.door_state }
 
 function __split_fields_rec__door__doorsystem__door__projection [@model_trace:.13747] [@name:door] 
   (a : __split_fields) : Door__door_state.door_state =
  a.rec__door__doorsystem__door
 
 meta "model_projection" function __split_fields_rec__door__doorsystem__door__projection
 
 meta "inline:no" function __split_fields_rec__door__doorsystem__door__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__2__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__2__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__2__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__2__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__2__projection
 
 meta "inline:no" function __rep___split_fields__2__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate door__doorsystem__door__pred 
   (a : __rep) =
  true
 val door__doorsystem__door__pred 
   (a : __rep) : bool
  ensures { result <-> door__doorsystem__door__pred (a : __rep) }
 
 val rec__door__doorsystem__door_ 
   (a : __rep) : Door__door_state.door_state
  requires {  (door__doorsystem__door__pred a) }
  ensures {  (result = a.__split_fields.rec__door__doorsystem__door) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (((Door__door_state__rep.to_rep a.__split_fields.rec__door__doorsystem__door) = (Door__door_state__rep.to_rep b.__split_fields.rec__door__doorsystem__door))) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "doorsystem" defined at door.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Door__doorsystem
 use export Door__doorsystem__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type doorsystem =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant door__doorsystem__door__first__bit 
   : int

 
 val constant door__doorsystem__door__last__bit 
   : int

 
 val constant door__doorsystem__door__position 
   : int

 
 axiom door__doorsystem__door__first__bit_axiom :
  ((door__doorsystem__door__first__bit ) >= (0 : int))
 
 axiom door__doorsystem__door__last__bit_axiom :
  ((door__doorsystem__door__last__bit ) > (door__doorsystem__door__first__bit ))
 
 axiom door__doorsystem__door__position_axiom :
  ((door__doorsystem__door__position ) >= (0 : int))
 
 val function user_eq 
   (a : doorsystem) (b : doorsystem) : bool
 
 val constant dummy 
   : doorsystem

 
 type doorsystem__ref =
  { mutable doorsystem__content : doorsystem }
 
 function doorsystem__ref_doorsystem__content__projection 
   (a : doorsystem__ref) : doorsystem =
  a.doorsystem__content
 
 meta "model_projection" function doorsystem__ref_doorsystem__content__projection
 
 meta "inline:no" function doorsystem__ref_doorsystem__content__projection
 
 val doorsystem__havoc 
   (x : doorsystem__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TfuelB" defined at dashboard.ads:3, created in Gnat2Why.Types.Translate_Type *)
module Dashboard__TfuelB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tfuelB =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tfuelB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tfuelB__ref =
  { mutable tfuelB__content : tfuelB }
 
 function tfuelB__ref_tfuelB__content__projection 
   (a : tfuelB__ref) : tfuelB =
  a.tfuelB__content
 
 meta "model_projection" function tfuelB__ref_tfuelB__content__projection
 
 meta "inline:no" function tfuelB__ref_tfuelB__content__projection
 
 val tfuelB__havoc 
   (x : tfuelB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TfuelB" defined at dashboard.ads:3, created in Gnat2Why.Types.Translate_Type *)
module Dashboard__TfuelB__rep
 use        Dashboard__TfuelB as Dashboard__TfuelB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Dashboard__TfuelB.tfuelB) : int =
  (Dashboard__TfuelB.tfuelB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Dashboard__TfuelB.tfuelB, 
 predicate in_range = Dashboard__TfuelB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "fuel" defined at dashboard.ads:3, created in Gnat2Why.Types.Translate_Type *)
module Dashboard__fuel
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type fuel =
  < range 0 100 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (100 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = fuel, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type fuel__ref =
  { mutable fuel__content : fuel }
 
 function fuel__ref_fuel__content__projection 
   (a : fuel__ref) : fuel =
  a.fuel__content
 
 meta "model_projection" function fuel__ref_fuel__content__projection
 
 meta "inline:no" function fuel__ref_fuel__content__projection
 
 val fuel__havoc 
   (x : fuel__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "fuel" defined at dashboard.ads:3, created in Gnat2Why.Types.Translate_Type *)
module Dashboard__fuel__rep
 use        Dashboard__fuel as Dashboard__fuel
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Dashboard__fuel.fuel) : int =
  (Dashboard__fuel.fuel'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Dashboard__fuel.fuel, 
 predicate in_range = Dashboard__fuel.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TairspeedB" defined at dashboard.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Dashboard__TairspeedB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tairspeedB =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tairspeedB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tairspeedB__ref =
  { mutable tairspeedB__content : tairspeedB }
 
 function tairspeedB__ref_tairspeedB__content__projection 
   (a : tairspeedB__ref) : tairspeedB =
  a.tairspeedB__content
 
 meta "model_projection" function tairspeedB__ref_tairspeedB__content__projection
 
 meta "inline:no" function tairspeedB__ref_tairspeedB__content__projection
 
 val tairspeedB__havoc 
   (x : tairspeedB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TairspeedB" defined at dashboard.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Dashboard__TairspeedB__rep
 use        Dashboard__TairspeedB as Dashboard__TairspeedB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Dashboard__TairspeedB.tairspeedB) : int =
  (Dashboard__TairspeedB.tairspeedB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Dashboard__TairspeedB.tairspeedB, 
 predicate in_range = Dashboard__TairspeedB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "airspeed" defined at dashboard.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Dashboard__airspeed
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type airspeed =
  < range 0 1000 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (1000 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = airspeed, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type airspeed__ref =
  { mutable airspeed__content : airspeed }
 
 function airspeed__ref_airspeed__content__projection 
   (a : airspeed__ref) : airspeed =
  a.airspeed__content
 
 meta "model_projection" function airspeed__ref_airspeed__content__projection
 
 meta "inline:no" function airspeed__ref_airspeed__content__projection
 
 val airspeed__havoc 
   (x : airspeed__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "airspeed" defined at dashboard.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Dashboard__airspeed__rep
 use        Dashboard__airspeed as Dashboard__airspeed
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Dashboard__airspeed.airspeed) : int =
  (Dashboard__airspeed.airspeed'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Dashboard__airspeed.airspeed, 
 predicate in_range = Dashboard__airspeed.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TaltitudeB" defined at dashboard.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Dashboard__TaltitudeB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type taltitudeB =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = taltitudeB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type taltitudeB__ref =
  { mutable taltitudeB__content : taltitudeB }
 
 function taltitudeB__ref_taltitudeB__content__projection 
   (a : taltitudeB__ref) : taltitudeB =
  a.taltitudeB__content
 
 meta "model_projection" function taltitudeB__ref_taltitudeB__content__projection
 
 meta "inline:no" function taltitudeB__ref_taltitudeB__content__projection
 
 val taltitudeB__havoc 
   (x : taltitudeB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TaltitudeB" defined at dashboard.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Dashboard__TaltitudeB__rep
 use        Dashboard__TaltitudeB as Dashboard__TaltitudeB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Dashboard__TaltitudeB.taltitudeB) : int =
  (Dashboard__TaltitudeB.taltitudeB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Dashboard__TaltitudeB.taltitudeB, 
 predicate in_range = Dashboard__TaltitudeB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "altitude" defined at dashboard.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Dashboard__altitude
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type altitude =
  < range 0 1200 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (1200 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = altitude, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type altitude__ref =
  { mutable altitude__content : altitude }
 
 function altitude__ref_altitude__content__projection 
   (a : altitude__ref) : altitude =
  a.altitude__content
 
 meta "model_projection" function altitude__ref_altitude__content__projection
 
 meta "inline:no" function altitude__ref_altitude__content__projection
 
 val altitude__havoc 
   (x : altitude__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "altitude" defined at dashboard.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Dashboard__altitude__rep
 use        Dashboard__altitude as Dashboard__altitude
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Dashboard__altitude.altitude) : int =
  (Dashboard__altitude.altitude'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Dashboard__altitude.altitude, 
 predicate in_range = Dashboard__altitude.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "dashboardsystem" defined at dashboard.ads:7, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Dashboard__dashboardsystem__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Dashboard__fuel as Dashboard__fuel
 use        Dashboard__fuel__rep as Dashboard__fuel__rep
 use        Dashboard__airspeed as Dashboard__airspeed
 use        Dashboard__airspeed__rep as Dashboard__airspeed__rep
 use        Dashboard__altitude as Dashboard__altitude
 use        Dashboard__altitude__rep as Dashboard__altitude__rep

 type __split_fields =
  { rec__dashboard__dashboardsystem__fuel_tank [@model_trace:.13919] [@name:fuel_tank] : Dashboard__fuel.fuel; rec__dashboard__dashboardsystem__velocity [@model_trace:.13929] [@name:velocity] : Dashboard__airspeed.airspeed; rec__dashboard__dashboardsystem__height [@model_trace:.13939] [@name:height] : Dashboard__altitude.altitude }
 
 function __split_fields_rec__dashboard__dashboardsystem__fuel_tank__projection [@model_trace:.13919] [@name:fuel_tank] 
   (a : __split_fields) : Dashboard__fuel.fuel =
  a.rec__dashboard__dashboardsystem__fuel_tank
 
 meta "model_projection" function __split_fields_rec__dashboard__dashboardsystem__fuel_tank__projection
 
 meta "inline:no" function __split_fields_rec__dashboard__dashboardsystem__fuel_tank__projection
 
 function __split_fields_rec__dashboard__dashboardsystem__velocity__projection [@model_trace:.13929] [@name:velocity] 
   (a : __split_fields) : Dashboard__airspeed.airspeed =
  a.rec__dashboard__dashboardsystem__velocity
 
 meta "model_projection" function __split_fields_rec__dashboard__dashboardsystem__velocity__projection
 
 meta "inline:no" function __split_fields_rec__dashboard__dashboardsystem__velocity__projection
 
 function __split_fields_rec__dashboard__dashboardsystem__height__projection [@model_trace:.13939] [@name:height] 
   (a : __split_fields) : Dashboard__altitude.altitude =
  a.rec__dashboard__dashboardsystem__height
 
 meta "model_projection" function __split_fields_rec__dashboard__dashboardsystem__height__projection
 
 meta "inline:no" function __split_fields_rec__dashboard__dashboardsystem__height__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__3__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__3__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__3__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__3__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__3__projection
 
 meta "inline:no" function __rep___split_fields__3__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate dashboard__dashboardsystem__fuel_tank__pred 
   (a : __rep) =
  true
 val dashboard__dashboardsystem__fuel_tank__pred 
   (a : __rep) : bool
  ensures { result <-> dashboard__dashboardsystem__fuel_tank__pred (a : __rep) }
 
 val rec__dashboard__dashboardsystem__fuel_tank_ 
   (a : __rep) : Dashboard__fuel.fuel
  requires {  (dashboard__dashboardsystem__fuel_tank__pred a) }
  ensures {  (result = a.__split_fields.rec__dashboard__dashboardsystem__fuel_tank) }
 
 predicate dashboard__dashboardsystem__velocity__pred 
   (a : __rep) =
  true
 val dashboard__dashboardsystem__velocity__pred 
   (a : __rep) : bool
  ensures { result <-> dashboard__dashboardsystem__velocity__pred (a : __rep) }
 
 val rec__dashboard__dashboardsystem__velocity_ 
   (a : __rep) : Dashboard__airspeed.airspeed
  requires {  (dashboard__dashboardsystem__velocity__pred a) }
  ensures {  (result = a.__split_fields.rec__dashboard__dashboardsystem__velocity) }
 
 predicate dashboard__dashboardsystem__height__pred 
   (a : __rep) =
  true
 val dashboard__dashboardsystem__height__pred 
   (a : __rep) : bool
  ensures { result <-> dashboard__dashboardsystem__height__pred (a : __rep) }
 
 val rec__dashboard__dashboardsystem__height_ 
   (a : __rep) : Dashboard__altitude.altitude
  requires {  (dashboard__dashboardsystem__height__pred a) }
  ensures {  (result = a.__split_fields.rec__dashboard__dashboardsystem__height) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ( ((Dashboard__fuel__rep.to_rep a.__split_fields.rec__dashboard__dashboardsystem__fuel_tank) = (Dashboard__fuel__rep.to_rep b.__split_fields.rec__dashboard__dashboardsystem__fuel_tank)) /\ ((Dashboard__airspeed__rep.to_rep a.__split_fields.rec__dashboard__dashboardsystem__velocity) = (Dashboard__airspeed__rep.to_rep b.__split_fields.rec__dashboard__dashboardsystem__velocity)) )/\((Dashboard__altitude__rep.to_rep a.__split_fields.rec__dashboard__dashboardsystem__height) = (Dashboard__altitude__rep.to_rep b.__split_fields.rec__dashboard__dashboardsystem__height)) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "dashboardsystem" defined at dashboard.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Dashboard__dashboardsystem
 use export Dashboard__dashboardsystem__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type dashboardsystem =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant dashboard__dashboardsystem__fuel_tank__first__bit 
   : int

 
 val constant dashboard__dashboardsystem__fuel_tank__last__bit 
   : int

 
 val constant dashboard__dashboardsystem__fuel_tank__position 
   : int

 
 axiom dashboard__dashboardsystem__fuel_tank__first__bit_axiom :
  ((dashboard__dashboardsystem__fuel_tank__first__bit ) >= (0 : int))
 
 axiom dashboard__dashboardsystem__fuel_tank__last__bit_axiom :
  ((dashboard__dashboardsystem__fuel_tank__last__bit ) > (dashboard__dashboardsystem__fuel_tank__first__bit ))
 
 axiom dashboard__dashboardsystem__fuel_tank__position_axiom :
  ((dashboard__dashboardsystem__fuel_tank__position ) >= (0 : int))
 
 val constant dashboard__dashboardsystem__velocity__first__bit 
   : int

 
 val constant dashboard__dashboardsystem__velocity__last__bit 
   : int

 
 val constant dashboard__dashboardsystem__velocity__position 
   : int

 
 axiom dashboard__dashboardsystem__velocity__first__bit_axiom :
  ((dashboard__dashboardsystem__velocity__first__bit ) >= (0 : int))
 
 axiom dashboard__dashboardsystem__velocity__last__bit_axiom :
  ((dashboard__dashboardsystem__velocity__last__bit ) > (dashboard__dashboardsystem__velocity__first__bit ))
 
 axiom dashboard__dashboardsystem__velocity__position_axiom :
  ((dashboard__dashboardsystem__velocity__position ) >= (0 : int))
 
 val constant dashboard__dashboardsystem__height__first__bit 
   : int

 
 val constant dashboard__dashboardsystem__height__last__bit 
   : int

 
 val constant dashboard__dashboardsystem__height__position 
   : int

 
 axiom dashboard__dashboardsystem__height__first__bit_axiom :
  ((dashboard__dashboardsystem__height__first__bit ) >= (0 : int))
 
 axiom dashboard__dashboardsystem__height__last__bit_axiom :
  ((dashboard__dashboardsystem__height__last__bit ) > (dashboard__dashboardsystem__height__first__bit ))
 
 axiom dashboard__dashboardsystem__height__position_axiom :
  ((dashboard__dashboardsystem__height__position ) >= (0 : int))
 
 val function user_eq 
   (a : dashboardsystem) (b : dashboardsystem) : bool
 
 val constant dummy 
   : dashboardsystem

 
 type dashboardsystem__ref =
  { mutable dashboardsystem__content : dashboardsystem }
 
 function dashboardsystem__ref_dashboardsystem__content__projection 
   (a : dashboardsystem__ref) : dashboardsystem =
  a.dashboardsystem__content
 
 meta "model_projection" function dashboardsystem__ref_dashboardsystem__content__projection
 
 meta "inline:no" function dashboardsystem__ref_dashboardsystem__content__projection
 
 val dashboardsystem__havoc 
   (x : dashboardsystem__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "warninglight" defined at warningsystem.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Warningsystem__warninglight
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type warninglight 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = warninglight, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type warninglight__ref =
  { mutable warninglight__content : warninglight }
 
 function warninglight__ref_warninglight__content__projection 
   (a : warninglight__ref) : warninglight =
  a.warninglight__content
 
 meta "model_projection" function warninglight__ref_warninglight__content__projection
 
 meta "inline:no" function warninglight__ref_warninglight__content__projection
 
 val warninglight__havoc 
   (x : warninglight__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "warninglight" defined at warningsystem.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Warningsystem__warninglight__rep
 use        Warningsystem__warninglight as Warningsystem__warninglight
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Warningsystem__warninglight.warninglight, 
 predicate in_range = Warningsystem__warninglight.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "warning_system" defined at warningsystem.ads:7, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Warningsystem__warning_system__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Warningsystem__warninglight as Warningsystem__warninglight
 use        Warningsystem__warninglight__rep as Warningsystem__warninglight__rep

 type __split_fields =
  { rec__warningsystem__warning_system__fuelwarning [@model_trace:.14019] [@name:fuelWarning] : Warningsystem__warninglight.warninglight; rec__warningsystem__warning_system__heightwarning [@model_trace:.14029] [@name:heightWarning] : Warningsystem__warninglight.warninglight; rec__warningsystem__warning_system__speedwarning [@model_trace:.14039] [@name:speedWarning] : Warningsystem__warninglight.warninglight }
 
 function __split_fields_rec__warningsystem__warning_system__fuelwarning__projection [@model_trace:.14019] [@name:fuelWarning] 
   (a : __split_fields) : Warningsystem__warninglight.warninglight =
  a.rec__warningsystem__warning_system__fuelwarning
 
 meta "model_projection" function __split_fields_rec__warningsystem__warning_system__fuelwarning__projection
 
 meta "inline:no" function __split_fields_rec__warningsystem__warning_system__fuelwarning__projection
 
 function __split_fields_rec__warningsystem__warning_system__heightwarning__projection [@model_trace:.14029] [@name:heightWarning] 
   (a : __split_fields) : Warningsystem__warninglight.warninglight =
  a.rec__warningsystem__warning_system__heightwarning
 
 meta "model_projection" function __split_fields_rec__warningsystem__warning_system__heightwarning__projection
 
 meta "inline:no" function __split_fields_rec__warningsystem__warning_system__heightwarning__projection
 
 function __split_fields_rec__warningsystem__warning_system__speedwarning__projection [@model_trace:.14039] [@name:speedWarning] 
   (a : __split_fields) : Warningsystem__warninglight.warninglight =
  a.rec__warningsystem__warning_system__speedwarning
 
 meta "model_projection" function __split_fields_rec__warningsystem__warning_system__speedwarning__projection
 
 meta "inline:no" function __split_fields_rec__warningsystem__warning_system__speedwarning__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__4__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__4__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__4__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__4__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__4__projection
 
 meta "inline:no" function __rep___split_fields__4__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate warningsystem__warning_system__fuelwarning__pred 
   (a : __rep) =
  true
 val warningsystem__warning_system__fuelwarning__pred 
   (a : __rep) : bool
  ensures { result <-> warningsystem__warning_system__fuelwarning__pred (a : __rep) }
 
 val rec__warningsystem__warning_system__fuelwarning_ 
   (a : __rep) : Warningsystem__warninglight.warninglight
  requires {  (warningsystem__warning_system__fuelwarning__pred a) }
  ensures {  (result = a.__split_fields.rec__warningsystem__warning_system__fuelwarning) }
 
 predicate warningsystem__warning_system__heightwarning__pred 
   (a : __rep) =
  true
 val warningsystem__warning_system__heightwarning__pred 
   (a : __rep) : bool
  ensures { result <-> warningsystem__warning_system__heightwarning__pred (a : __rep) }
 
 val rec__warningsystem__warning_system__heightwarning_ 
   (a : __rep) : Warningsystem__warninglight.warninglight
  requires {  (warningsystem__warning_system__heightwarning__pred a) }
  ensures {  (result = a.__split_fields.rec__warningsystem__warning_system__heightwarning) }
 
 predicate warningsystem__warning_system__speedwarning__pred 
   (a : __rep) =
  true
 val warningsystem__warning_system__speedwarning__pred 
   (a : __rep) : bool
  ensures { result <-> warningsystem__warning_system__speedwarning__pred (a : __rep) }
 
 val rec__warningsystem__warning_system__speedwarning_ 
   (a : __rep) : Warningsystem__warninglight.warninglight
  requires {  (warningsystem__warning_system__speedwarning__pred a) }
  ensures {  (result = a.__split_fields.rec__warningsystem__warning_system__speedwarning) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ( ((Warningsystem__warninglight__rep.to_rep a.__split_fields.rec__warningsystem__warning_system__fuelwarning) = (Warningsystem__warninglight__rep.to_rep b.__split_fields.rec__warningsystem__warning_system__fuelwarning)) /\ ((Warningsystem__warninglight__rep.to_rep a.__split_fields.rec__warningsystem__warning_system__heightwarning) = (Warningsystem__warninglight__rep.to_rep b.__split_fields.rec__warningsystem__warning_system__heightwarning)) )/\((Warningsystem__warninglight__rep.to_rep a.__split_fields.rec__warningsystem__warning_system__speedwarning) = (Warningsystem__warninglight__rep.to_rep b.__split_fields.rec__warningsystem__warning_system__speedwarning)) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "warning_system" defined at warningsystem.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Warningsystem__warning_system
 use export Warningsystem__warning_system__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type warning_system =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant warningsystem__warning_system__fuelwarning__first__bit 
   : int

 
 val constant warningsystem__warning_system__fuelwarning__last__bit 
   : int

 
 val constant warningsystem__warning_system__fuelwarning__position 
   : int

 
 axiom warningsystem__warning_system__fuelwarning__first__bit_axiom :
  ((warningsystem__warning_system__fuelwarning__first__bit ) >= (0 : int))
 
 axiom warningsystem__warning_system__fuelwarning__last__bit_axiom :
  ((warningsystem__warning_system__fuelwarning__last__bit ) > (warningsystem__warning_system__fuelwarning__first__bit ))
 
 axiom warningsystem__warning_system__fuelwarning__position_axiom :
  ((warningsystem__warning_system__fuelwarning__position ) >= (0 : int))
 
 val constant warningsystem__warning_system__heightwarning__first__bit 
   : int

 
 val constant warningsystem__warning_system__heightwarning__last__bit 
   : int

 
 val constant warningsystem__warning_system__heightwarning__position 
   : int

 
 axiom warningsystem__warning_system__heightwarning__first__bit_axiom :
  ((warningsystem__warning_system__heightwarning__first__bit ) >= (0 : int))
 
 axiom warningsystem__warning_system__heightwarning__last__bit_axiom :
  ((warningsystem__warning_system__heightwarning__last__bit ) > (warningsystem__warning_system__heightwarning__first__bit ))
 
 axiom warningsystem__warning_system__heightwarning__position_axiom :
  ((warningsystem__warning_system__heightwarning__position ) >= (0 : int))
 
 val constant warningsystem__warning_system__speedwarning__first__bit 
   : int

 
 val constant warningsystem__warning_system__speedwarning__last__bit 
   : int

 
 val constant warningsystem__warning_system__speedwarning__position 
   : int

 
 axiom warningsystem__warning_system__speedwarning__first__bit_axiom :
  ((warningsystem__warning_system__speedwarning__first__bit ) >= (0 : int))
 
 axiom warningsystem__warning_system__speedwarning__last__bit_axiom :
  ((warningsystem__warning_system__speedwarning__last__bit ) > (warningsystem__warning_system__speedwarning__first__bit ))
 
 axiom warningsystem__warning_system__speedwarning__position_axiom :
  ((warningsystem__warning_system__speedwarning__position ) >= (0 : int))
 
 val function user_eq 
   (a : warning_system) (b : warning_system) : bool
 
 val constant dummy 
   : warning_system

 
 type warning_system__ref =
  { mutable warning_system__content : warning_system }
 
 function warning_system__ref_warning_system__content__projection 
   (a : warning_system__ref) : warning_system =
  a.warning_system__content
 
 meta "model_projection" function warning_system__ref_warning_system__content__projection
 
 meta "inline:no" function warning_system__ref_warning_system__content__projection
 
 val warning_system__havoc 
   (x : warning_system__ref) : unit
  writes {x}

end

(* Module for axiomatizing the record theory associated to type "plane" defined at commercialplanesystem.ads:18, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Commercialplanesystem__plane__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Engine__engine_state as Engine__engine_state
 use        Door__doorsystem as Door__doorsystem
 use        Dashboard__dashboardsystem as Dashboard__dashboardsystem
 use        Warningsystem__warning_system as Warningsystem__warning_system
 use        Commercialplanesystem__landinggear as Commercialplanesystem__landinggear
 use        Commercialplanesystem__landinggear__rep as Commercialplanesystem__landinggear__rep
 use        Commercialplanesystem__currentactivity as Commercialplanesystem__currentactivity
 use        Commercialplanesystem__currentactivity__rep as Commercialplanesystem__currentactivity__rep
 use        Commercialplanesystem__passengers as Commercialplanesystem__passengers
 use        Commercialplanesystem__passengers__rep as Commercialplanesystem__passengers__rep

 type __split_fields =
  { rec__commercialplanesystem__plane__dashboard_system [@model_trace:.2845] [@name:dashboard_system] : Dashboard__dashboardsystem.dashboardsystem; rec__commercialplanesystem__plane__landgear [@name:landGear] [@model_trace:.2855] : Commercialplanesystem__landinggear.landinggear; rec__commercialplanesystem__plane__cockpit [@model_trace:.2865] [@name:cockpit] : Door__doorsystem.doorsystem; rec__commercialplanesystem__plane__extdoor [@model_trace:.2875] [@name:extDoor] : Door__doorsystem.doorsystem; rec__commercialplanesystem__plane__ignition [@name:ignition] [@model_trace:.2885] : Engine__engine_state.engine_state; rec__commercialplanesystem__plane__mode [@name:mode] [@model_trace:.2895] : Commercialplanesystem__currentactivity.currentactivity; rec__commercialplanesystem__plane__num_passengers [@name:num_passengers] [@model_trace:.2905] : Commercialplanesystem__passengers.passengers; rec__commercialplanesystem__plane__warning_lights [@model_trace:.2915] [@name:warning_lights] : Warningsystem__warning_system.warning_system }
 
 function __split_fields_rec__commercialplanesystem__plane__dashboard_system__projection [@model_trace:.2845] [@name:dashboard_system] 
   (a : __split_fields) : Dashboard__dashboardsystem.dashboardsystem =
  a.rec__commercialplanesystem__plane__dashboard_system
 
 meta "model_projection" function __split_fields_rec__commercialplanesystem__plane__dashboard_system__projection
 
 meta "inline:no" function __split_fields_rec__commercialplanesystem__plane__dashboard_system__projection
 
 function __split_fields_rec__commercialplanesystem__plane__landgear__projection [@name:landGear] [@model_trace:.2855] 
   (a : __split_fields) : Commercialplanesystem__landinggear.landinggear =
  a.rec__commercialplanesystem__plane__landgear
 
 meta "model_projection" function __split_fields_rec__commercialplanesystem__plane__landgear__projection
 
 meta "inline:no" function __split_fields_rec__commercialplanesystem__plane__landgear__projection
 
 function __split_fields_rec__commercialplanesystem__plane__cockpit__projection [@model_trace:.2865] [@name:cockpit] 
   (a : __split_fields) : Door__doorsystem.doorsystem =
  a.rec__commercialplanesystem__plane__cockpit
 
 meta "model_projection" function __split_fields_rec__commercialplanesystem__plane__cockpit__projection
 
 meta "inline:no" function __split_fields_rec__commercialplanesystem__plane__cockpit__projection
 
 function __split_fields_rec__commercialplanesystem__plane__extdoor__projection [@model_trace:.2875] [@name:extDoor] 
   (a : __split_fields) : Door__doorsystem.doorsystem =
  a.rec__commercialplanesystem__plane__extdoor
 
 meta "model_projection" function __split_fields_rec__commercialplanesystem__plane__extdoor__projection
 
 meta "inline:no" function __split_fields_rec__commercialplanesystem__plane__extdoor__projection
 
 function __split_fields_rec__commercialplanesystem__plane__ignition__projection [@name:ignition] [@model_trace:.2885] 
   (a : __split_fields) : Engine__engine_state.engine_state =
  a.rec__commercialplanesystem__plane__ignition
 
 meta "model_projection" function __split_fields_rec__commercialplanesystem__plane__ignition__projection
 
 meta "inline:no" function __split_fields_rec__commercialplanesystem__plane__ignition__projection
 
 function __split_fields_rec__commercialplanesystem__plane__mode__projection [@name:mode] [@model_trace:.2895] 
   (a : __split_fields) : Commercialplanesystem__currentactivity.currentactivity =
  a.rec__commercialplanesystem__plane__mode
 
 meta "model_projection" function __split_fields_rec__commercialplanesystem__plane__mode__projection
 
 meta "inline:no" function __split_fields_rec__commercialplanesystem__plane__mode__projection
 
 function __split_fields_rec__commercialplanesystem__plane__num_passengers__projection [@name:num_passengers] [@model_trace:.2905] 
   (a : __split_fields) : Commercialplanesystem__passengers.passengers =
  a.rec__commercialplanesystem__plane__num_passengers
 
 meta "model_projection" function __split_fields_rec__commercialplanesystem__plane__num_passengers__projection
 
 meta "inline:no" function __split_fields_rec__commercialplanesystem__plane__num_passengers__projection
 
 function __split_fields_rec__commercialplanesystem__plane__warning_lights__projection [@model_trace:.2915] [@name:warning_lights] 
   (a : __split_fields) : Warningsystem__warning_system.warning_system =
  a.rec__commercialplanesystem__plane__warning_lights
 
 meta "model_projection" function __split_fields_rec__commercialplanesystem__plane__warning_lights__projection
 
 meta "inline:no" function __split_fields_rec__commercialplanesystem__plane__warning_lights__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__5__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__5__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__5__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__5__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__5__projection
 
 meta "inline:no" function __rep___split_fields__5__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate commercialplanesystem__plane__dashboard_system__pred 
   (a : __rep) =
  true
 val commercialplanesystem__plane__dashboard_system__pred 
   (a : __rep) : bool
  ensures { result <-> commercialplanesystem__plane__dashboard_system__pred (a : __rep) }
 
 val rec__commercialplanesystem__plane__dashboard_system_ 
   (a : __rep) : Dashboard__dashboardsystem.dashboardsystem
  requires {  (commercialplanesystem__plane__dashboard_system__pred a) }
  ensures {  (result = a.__split_fields.rec__commercialplanesystem__plane__dashboard_system) }
 
 predicate commercialplanesystem__plane__landgear__pred 
   (a : __rep) =
  true
 val commercialplanesystem__plane__landgear__pred 
   (a : __rep) : bool
  ensures { result <-> commercialplanesystem__plane__landgear__pred (a : __rep) }
 
 val rec__commercialplanesystem__plane__landgear_ 
   (a : __rep) : Commercialplanesystem__landinggear.landinggear
  requires {  (commercialplanesystem__plane__landgear__pred a) }
  ensures {  (result = a.__split_fields.rec__commercialplanesystem__plane__landgear) }
 
 predicate commercialplanesystem__plane__cockpit__pred 
   (a : __rep) =
  true
 val commercialplanesystem__plane__cockpit__pred 
   (a : __rep) : bool
  ensures { result <-> commercialplanesystem__plane__cockpit__pred (a : __rep) }
 
 val rec__commercialplanesystem__plane__cockpit_ 
   (a : __rep) : Door__doorsystem.doorsystem
  requires {  (commercialplanesystem__plane__cockpit__pred a) }
  ensures {  (result = a.__split_fields.rec__commercialplanesystem__plane__cockpit) }
 
 predicate commercialplanesystem__plane__extdoor__pred 
   (a : __rep) =
  true
 val commercialplanesystem__plane__extdoor__pred 
   (a : __rep) : bool
  ensures { result <-> commercialplanesystem__plane__extdoor__pred (a : __rep) }
 
 val rec__commercialplanesystem__plane__extdoor_ 
   (a : __rep) : Door__doorsystem.doorsystem
  requires {  (commercialplanesystem__plane__extdoor__pred a) }
  ensures {  (result = a.__split_fields.rec__commercialplanesystem__plane__extdoor) }
 
 predicate commercialplanesystem__plane__ignition__pred 
   (a : __rep) =
  true
 val commercialplanesystem__plane__ignition__pred 
   (a : __rep) : bool
  ensures { result <-> commercialplanesystem__plane__ignition__pred (a : __rep) }
 
 val rec__commercialplanesystem__plane__ignition_ 
   (a : __rep) : Engine__engine_state.engine_state
  requires {  (commercialplanesystem__plane__ignition__pred a) }
  ensures {  (result = a.__split_fields.rec__commercialplanesystem__plane__ignition) }
 
 predicate commercialplanesystem__plane__mode__pred 
   (a : __rep) =
  true
 val commercialplanesystem__plane__mode__pred 
   (a : __rep) : bool
  ensures { result <-> commercialplanesystem__plane__mode__pred (a : __rep) }
 
 val rec__commercialplanesystem__plane__mode_ 
   (a : __rep) : Commercialplanesystem__currentactivity.currentactivity
  requires {  (commercialplanesystem__plane__mode__pred a) }
  ensures {  (result = a.__split_fields.rec__commercialplanesystem__plane__mode) }
 
 predicate commercialplanesystem__plane__num_passengers__pred 
   (a : __rep) =
  true
 val commercialplanesystem__plane__num_passengers__pred 
   (a : __rep) : bool
  ensures { result <-> commercialplanesystem__plane__num_passengers__pred (a : __rep) }
 
 val rec__commercialplanesystem__plane__num_passengers_ 
   (a : __rep) : Commercialplanesystem__passengers.passengers
  requires {  (commercialplanesystem__plane__num_passengers__pred a) }
  ensures {  (result = a.__split_fields.rec__commercialplanesystem__plane__num_passengers) }
 
 predicate commercialplanesystem__plane__warning_lights__pred 
   (a : __rep) =
  true
 val commercialplanesystem__plane__warning_lights__pred 
   (a : __rep) : bool
  ensures { result <-> commercialplanesystem__plane__warning_lights__pred (a : __rep) }
 
 val rec__commercialplanesystem__plane__warning_lights_ 
   (a : __rep) : Warningsystem__warning_system.warning_system
  requires {  (commercialplanesystem__plane__warning_lights__pred a) }
  ensures {  (result = a.__split_fields.rec__commercialplanesystem__plane__warning_lights) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ( (Dashboard__dashboardsystem.bool_eq a.__split_fields.rec__commercialplanesystem__plane__dashboard_system b.__split_fields.rec__commercialplanesystem__plane__dashboard_system) /\ ((Commercialplanesystem__landinggear__rep.to_rep a.__split_fields.rec__commercialplanesystem__plane__landgear) = (Commercialplanesystem__landinggear__rep.to_rep b.__split_fields.rec__commercialplanesystem__plane__landgear)) )/\( ( ( (Door__doorsystem.bool_eq a.__split_fields.rec__commercialplanesystem__plane__cockpit b.__split_fields.rec__commercialplanesystem__plane__cockpit)/\(Door__doorsystem.bool_eq a.__split_fields.rec__commercialplanesystem__plane__extdoor b.__split_fields.rec__commercialplanesystem__plane__extdoor) )/\(Engine__engine_state.bool_eq a.__split_fields.rec__commercialplanesystem__plane__ignition b.__split_fields.rec__commercialplanesystem__plane__ignition) )/\( ( ((Commercialplanesystem__currentactivity__rep.to_rep a.__split_fields.rec__commercialplanesystem__plane__mode) = (Commercialplanesystem__currentactivity__rep.to_rep b.__split_fields.rec__commercialplanesystem__plane__mode))/\((Commercialplanesystem__passengers__rep.to_rep a.__split_fields.rec__commercialplanesystem__plane__num_passengers) = (Commercialplanesystem__passengers__rep.to_rep b.__split_fields.rec__commercialplanesystem__plane__num_passengers)) )/\(Warningsystem__warning_system.bool_eq a.__split_fields.rec__commercialplanesystem__plane__warning_lights b.__split_fields.rec__commercialplanesystem__plane__warning_lights) ) ) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "plane" defined at commercialplanesystem.ads:18, created in Gnat2Why.Types.Translate_Type *)
module Commercialplanesystem__plane
 use export Commercialplanesystem__plane__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type plane =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant commercialplanesystem__plane__dashboard_system__first__bit 
   : int

 
 val constant commercialplanesystem__plane__dashboard_system__last__bit 
   : int

 
 val constant commercialplanesystem__plane__dashboard_system__position 
   : int

 
 axiom commercialplanesystem__plane__dashboard_system__first__bit_axiom :
  ((commercialplanesystem__plane__dashboard_system__first__bit ) >= (0 : int))
 
 axiom commercialplanesystem__plane__dashboard_system__last__bit_axiom :
  ((commercialplanesystem__plane__dashboard_system__last__bit ) > (commercialplanesystem__plane__dashboard_system__first__bit ))
 
 axiom commercialplanesystem__plane__dashboard_system__position_axiom :
  ((commercialplanesystem__plane__dashboard_system__position ) >= (0 : int))
 
 val constant commercialplanesystem__plane__landgear__first__bit 
   : int

 
 val constant commercialplanesystem__plane__landgear__last__bit 
   : int

 
 val constant commercialplanesystem__plane__landgear__position 
   : int

 
 axiom commercialplanesystem__plane__landgear__first__bit_axiom :
  ((commercialplanesystem__plane__landgear__first__bit ) >= (0 : int))
 
 axiom commercialplanesystem__plane__landgear__last__bit_axiom :
  ((commercialplanesystem__plane__landgear__last__bit ) > (commercialplanesystem__plane__landgear__first__bit ))
 
 axiom commercialplanesystem__plane__landgear__position_axiom :
  ((commercialplanesystem__plane__landgear__position ) >= (0 : int))
 
 val constant commercialplanesystem__plane__cockpit__first__bit 
   : int

 
 val constant commercialplanesystem__plane__cockpit__last__bit 
   : int

 
 val constant commercialplanesystem__plane__cockpit__position 
   : int

 
 axiom commercialplanesystem__plane__cockpit__first__bit_axiom :
  ((commercialplanesystem__plane__cockpit__first__bit ) >= (0 : int))
 
 axiom commercialplanesystem__plane__cockpit__last__bit_axiom :
  ((commercialplanesystem__plane__cockpit__last__bit ) > (commercialplanesystem__plane__cockpit__first__bit ))
 
 axiom commercialplanesystem__plane__cockpit__position_axiom :
  ((commercialplanesystem__plane__cockpit__position ) >= (0 : int))
 
 val constant commercialplanesystem__plane__extdoor__first__bit 
   : int

 
 val constant commercialplanesystem__plane__extdoor__last__bit 
   : int

 
 val constant commercialplanesystem__plane__extdoor__position 
   : int

 
 axiom commercialplanesystem__plane__extdoor__first__bit_axiom :
  ((commercialplanesystem__plane__extdoor__first__bit ) >= (0 : int))
 
 axiom commercialplanesystem__plane__extdoor__last__bit_axiom :
  ((commercialplanesystem__plane__extdoor__last__bit ) > (commercialplanesystem__plane__extdoor__first__bit ))
 
 axiom commercialplanesystem__plane__extdoor__position_axiom :
  ((commercialplanesystem__plane__extdoor__position ) >= (0 : int))
 
 val constant commercialplanesystem__plane__ignition__first__bit 
   : int

 
 val constant commercialplanesystem__plane__ignition__last__bit 
   : int

 
 val constant commercialplanesystem__plane__ignition__position 
   : int

 
 axiom commercialplanesystem__plane__ignition__first__bit_axiom :
  ((commercialplanesystem__plane__ignition__first__bit ) >= (0 : int))
 
 axiom commercialplanesystem__plane__ignition__last__bit_axiom :
  ((commercialplanesystem__plane__ignition__last__bit ) > (commercialplanesystem__plane__ignition__first__bit ))
 
 axiom commercialplanesystem__plane__ignition__position_axiom :
  ((commercialplanesystem__plane__ignition__position ) >= (0 : int))
 
 val constant commercialplanesystem__plane__mode__first__bit 
   : int

 
 val constant commercialplanesystem__plane__mode__last__bit 
   : int

 
 val constant commercialplanesystem__plane__mode__position 
   : int

 
 axiom commercialplanesystem__plane__mode__first__bit_axiom :
  ((commercialplanesystem__plane__mode__first__bit ) >= (0 : int))
 
 axiom commercialplanesystem__plane__mode__last__bit_axiom :
  ((commercialplanesystem__plane__mode__last__bit ) > (commercialplanesystem__plane__mode__first__bit ))
 
 axiom commercialplanesystem__plane__mode__position_axiom :
  ((commercialplanesystem__plane__mode__position ) >= (0 : int))
 
 val constant commercialplanesystem__plane__num_passengers__first__bit 
   : int

 
 val constant commercialplanesystem__plane__num_passengers__last__bit 
   : int

 
 val constant commercialplanesystem__plane__num_passengers__position 
   : int

 
 axiom commercialplanesystem__plane__num_passengers__first__bit_axiom :
  ((commercialplanesystem__plane__num_passengers__first__bit ) >= (0 : int))
 
 axiom commercialplanesystem__plane__num_passengers__last__bit_axiom :
  ((commercialplanesystem__plane__num_passengers__last__bit ) > (commercialplanesystem__plane__num_passengers__first__bit ))
 
 axiom commercialplanesystem__plane__num_passengers__position_axiom :
  ((commercialplanesystem__plane__num_passengers__position ) >= (0 : int))
 
 val constant commercialplanesystem__plane__warning_lights__first__bit 
   : int

 
 val constant commercialplanesystem__plane__warning_lights__last__bit 
   : int

 
 val constant commercialplanesystem__plane__warning_lights__position 
   : int

 
 axiom commercialplanesystem__plane__warning_lights__first__bit_axiom :
  ((commercialplanesystem__plane__warning_lights__first__bit ) >= (0 : int))
 
 axiom commercialplanesystem__plane__warning_lights__last__bit_axiom :
  ((commercialplanesystem__plane__warning_lights__last__bit ) > (commercialplanesystem__plane__warning_lights__first__bit ))
 
 axiom commercialplanesystem__plane__warning_lights__position_axiom :
  ((commercialplanesystem__plane__warning_lights__position ) >= (0 : int))
 
 val function user_eq 
   (a : plane) (b : plane) : bool
 
 val constant dummy 
   : plane

 
 type plane__ref =
  { mutable plane__content : plane }
 
 function plane__ref_plane__content__projection 
   (a : plane__ref) : plane =
  a.plane__content
 
 meta "model_projection" function plane__ref_plane__content__projection
 
 meta "inline:no" function plane__ref_plane__content__projection
 
 val plane__havoc 
   (x : plane__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T1b" defined at commercialplanesystem.adb:28, created in Gnat2Why.Types.Translate_Type *)
module Commercialplanesystem__decreaseairspeed__T1b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (42 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "item" defined at a-textio.ads:509, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put_line__2__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant item [#"a-textio.ads" 509 0 0][@name:Item] [@model_trace:6747] [@model_projected] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:509, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put_line__2__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T2b" defined at commercialplanesystem.adb:43, created in Gnat2Why.Types.Translate_Type *)
module Commercialplanesystem__decreasealtitude__T2b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (49 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end
(* Module for defining a ref holding the value of variable "engine_instance" defined at commercialplanesystem.ads:12, created in Gnat2Why.Decls.Translate_Variable *)
module Commercialplanesystem__engine_instance
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Engine__engine_state as Engine__engine_state

 val engine_instance__split_fields [#"commercialplanesystem.ads" 12 0 0][@model_trace:2758] [@model_projected] [@name:engine_instance]  : Engine__engine_state.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "engine_instance" defined at commercialplanesystem.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Commercialplanesystem__engine_instance___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "cockpit_instance" defined at commercialplanesystem.ads:13, created in Gnat2Why.Decls.Translate_Variable *)
module Commercialplanesystem__cockpit_instance
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Door__doorsystem as Door__doorsystem

 val cockpit_instance__split_fields [#"commercialplanesystem.ads" 13 0 0][@model_projected] [@name:cockpit_instance] [@model_trace:2771]  : Door__doorsystem.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "cockpit_instance" defined at commercialplanesystem.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Commercialplanesystem__cockpit_instance___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "ext_instance" defined at commercialplanesystem.ads:14, created in Gnat2Why.Decls.Translate_Variable *)
module Commercialplanesystem__ext_instance
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Door__doorsystem as Door__doorsystem

 val ext_instance__split_fields [#"commercialplanesystem.ads" 14 0 0][@model_trace:2784] [@model_projected] [@name:ext_instance]  : Door__doorsystem.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "ext_instance" defined at commercialplanesystem.ads:14, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Commercialplanesystem__ext_instance___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "dashboard_instance" defined at commercialplanesystem.ads:15, created in Gnat2Why.Decls.Translate_Variable *)
module Commercialplanesystem__dashboard_instance
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Dashboard__dashboardsystem as Dashboard__dashboardsystem

 val dashboard_instance__split_fields [#"commercialplanesystem.ads" 15 0 0][@model_trace:2797] [@model_projected] [@name:dashboard_instance]  : Dashboard__dashboardsystem.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "dashboard_instance" defined at commercialplanesystem.ads:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Commercialplanesystem__dashboard_instance___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "warning_instance" defined at commercialplanesystem.ads:16, created in Gnat2Why.Decls.Translate_Variable *)
module Commercialplanesystem__warning_instance
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Warningsystem__warning_system as Warningsystem__warning_system

 val warning_instance__split_fields [#"commercialplanesystem.ads" 16 0 0][@model_projected] [@name:warning_instance] [@model_trace:2816]  : Warningsystem__warning_system.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "warning_instance" defined at commercialplanesystem.ads:16, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Commercialplanesystem__warning_instance___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "commercialplane" defined at commercialplanesystem.ads:29, created in Gnat2Why.Decls.Translate_Variable *)
module Commercialplanesystem__commercialplane
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Commercialplanesystem__plane as Commercialplanesystem__plane

 val commercialplane__split_fields [#"commercialplanesystem.ads" 29 0 0][@name:commercialPlane] [@model_projected] [@model_trace:2927]  : Commercialplanesystem__plane.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "commercialplane" defined at commercialplanesystem.ads:29, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Commercialplanesystem__commercialplane___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module declaring the external object "ada__text_io__standard_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_err  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_err  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__file_system," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__file_system
 use        "_gnatprove_standard".Main
 use        "int".Int

 val file_system  : Main.__private__ref 

end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_short_integer as Standard__short_short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_5 : int) (temp___skip_top_level_6 : bool) }

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_integer as Standard__short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_12 : int) (temp___skip_top_level_13 : bool) }

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_19 : int) (temp___skip_top_level_20 : bool) }

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_integer as Standard__long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_26 : int) (temp___skip_top_level_27 : bool) }

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_long_integer as Standard__long_long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_33 : int) (temp___skip_top_level_34 : bool) }

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural as Standard__natural

 predicate dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_40 : int) (temp___skip_top_level_41 : bool) }

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive as Standard__positive

 predicate dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_47 : int) (temp___skip_top_level_48 : bool) }

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__short_float as Standard__short_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) }

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__float as Standard__float

 predicate dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) }

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64
 use        Standard__long_float as Standard__long_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) }

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_75 : int) (temp___skip_top_level_76 : bool) }

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_82 : int) (temp___skip_top_level_83 : bool) }

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_89 : int) (temp___skip_top_level_90 : bool) }

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string

 predicate dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))
 val dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) }

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_string as Standard__wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))
 val dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) }

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_string as Standard__wide_wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))
 val dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) }

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__duration as Standard__duration

 predicate dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) =
  (if (( temp___is_init_112 \/ (Standard__duration.first <= Standard__duration.last) )) then (
   (Standard__duration.dynamic_property Standard__duration.first Standard__duration.last temp___expr_116)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) }

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_8 as Standard__integer_8

 predicate dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_124 : int) (temp___skip_top_level_125 : bool) }

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_16 as Standard__integer_16

 predicate dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_131 : int) (temp___skip_top_level_132 : bool) }

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_32 as Standard__integer_32

 predicate dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_138 : int) (temp___skip_top_level_139 : bool) }

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_64 as Standard__integer_64

 predicate dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_145 : int) (temp___skip_top_level_146 : bool) }

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__universal_integer as Standard__universal_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_152 : int) (temp___skip_top_level_153 : bool) }

end

(* Module for possibly declaring a logic function for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__line_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function line_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) (ada__text_io__file_system : Main.__private) : int
 
 val predicate line_length__2__function_guard 
   (temp___result_154 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) (ada__text_io__file_system : Main.__private)

end

(* Module for possibly declaring a logic function for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__page_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function page_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) (ada__text_io__file_system : Main.__private) : int
 
 val predicate page_length__2__function_guard 
   (temp___result_155 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) (ada__text_io__file_system : Main.__private)

end

(* Module for possibly declaring a logic function for "fuelusage" defined at commercialplanesystem.ads:39, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Commercialplanesystem__fuelusage
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "intow" defined at commercialplanesystem.ads:44, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Commercialplanesystem__intow
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "increaseairspeed" defined at commercialplanesystem.ads:49, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Commercialplanesystem__increaseairspeed
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "decreaseairspeed" defined at commercialplanesystem.ads:54, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Commercialplanesystem__decreaseairspeed
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "increasealtitude" defined at commercialplanesystem.ads:59, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Commercialplanesystem__increasealtitude
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "decreasealtitude" defined at commercialplanesystem.ads:64, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Commercialplanesystem__decreasealtitude
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "addpassenger" defined at commercialplanesystem.ads:69, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Commercialplanesystem__addpassenger
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "adjustfuelusage" defined at commercialplanesystem.ads:74, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Commercialplanesystem__adjustfuelusage
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "put_line__2" defined at a-textio.ads:508, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__put_line__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__TcountB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__text_io__count as Ada__text_io__count

 predicate dynamic_invariant [@inline] 
   (temp___expr_160 : int) (temp___is_init_156 : bool) (temp___skip_constant_157 : bool) (temp___do_toplevel_158 : bool) (temp___do_typ_inv_159 : bool) =
  (if (( temp___is_init_156 \/ (Ada__text_io__count.first <= Ada__text_io__count.last) )) then (
   (Ada__text_io__count.dynamic_property Ada__text_io__count.first Ada__text_io__count.last temp___expr_160)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_160 : int) (temp___is_init_156 : bool) (temp___skip_constant_157 : bool) (temp___do_toplevel_158 : bool) (temp___do_typ_inv_159 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_160 : int) (temp___is_init_156 : bool) (temp___skip_constant_157 : bool) (temp___do_toplevel_158 : bool) (temp___do_typ_inv_159 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_161 : int) (temp___skip_top_level_162 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_161 : int) (temp___skip_top_level_162 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_161 : int) (temp___skip_top_level_162 : bool) }

end

(* Module giving axioms for type "landinggear" defined at commercialplanesystem.ads:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Commercialplanesystem__landinggear___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Commercialplanesystem__landinggear as Commercialplanesystem__landinggear

 predicate dynamic_invariant [@inline] 
   (temp___expr_167 : int) (temp___is_init_163 : bool) (temp___skip_constant_164 : bool) (temp___do_toplevel_165 : bool) (temp___do_typ_inv_166 : bool) =
  (if (( temp___is_init_163 \/ (Commercialplanesystem__landinggear.first <= Commercialplanesystem__landinggear.last) )) then (
   (Commercialplanesystem__landinggear.dynamic_property Commercialplanesystem__landinggear.first Commercialplanesystem__landinggear.last temp___expr_167)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_167 : int) (temp___is_init_163 : bool) (temp___skip_constant_164 : bool) (temp___do_toplevel_165 : bool) (temp___do_typ_inv_166 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_167 : int) (temp___is_init_163 : bool) (temp___skip_constant_164 : bool) (temp___do_toplevel_165 : bool) (temp___do_typ_inv_166 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_168 : int) (temp___skip_top_level_169 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_168 : int) (temp___skip_top_level_169 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_168 : int) (temp___skip_top_level_169 : bool) }

end

(* Module giving axioms for type "currentactivity" defined at commercialplanesystem.ads:9, created in Gnat2Why.Types.Generate_Type_Completion *)
module Commercialplanesystem__currentactivity___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Commercialplanesystem__currentactivity as Commercialplanesystem__currentactivity

 predicate dynamic_invariant [@inline] 
   (temp___expr_174 : int) (temp___is_init_170 : bool) (temp___skip_constant_171 : bool) (temp___do_toplevel_172 : bool) (temp___do_typ_inv_173 : bool) =
  (if (( temp___is_init_170 \/ (Commercialplanesystem__currentactivity.first <= Commercialplanesystem__currentactivity.last) )) then (
   (Commercialplanesystem__currentactivity.dynamic_property Commercialplanesystem__currentactivity.first Commercialplanesystem__currentactivity.last temp___expr_174)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_174 : int) (temp___is_init_170 : bool) (temp___skip_constant_171 : bool) (temp___do_toplevel_172 : bool) (temp___do_typ_inv_173 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_174 : int) (temp___is_init_170 : bool) (temp___skip_constant_171 : bool) (temp___do_toplevel_172 : bool) (temp___do_typ_inv_173 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_175 : int) (temp___skip_top_level_176 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_175 : int) (temp___skip_top_level_176 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_175 : int) (temp___skip_top_level_176 : bool) }

end

(* Module giving axioms for type "TpassengersB" defined at commercialplanesystem.ads:10, created in Gnat2Why.Types.Generate_Type_Completion *)
module Commercialplanesystem__TpassengersB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "passengers" defined at commercialplanesystem.ads:10, created in Gnat2Why.Types.Generate_Type_Completion *)
module Commercialplanesystem__passengers___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Commercialplanesystem__passengers as Commercialplanesystem__passengers

 predicate dynamic_invariant [@inline] 
   (temp___expr_181 : int) (temp___is_init_177 : bool) (temp___skip_constant_178 : bool) (temp___do_toplevel_179 : bool) (temp___do_typ_inv_180 : bool) =
  (if (( temp___is_init_177 \/ (Commercialplanesystem__passengers.first <= Commercialplanesystem__passengers.last) )) then (
   (Commercialplanesystem__passengers.dynamic_property Commercialplanesystem__passengers.first Commercialplanesystem__passengers.last temp___expr_181)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_181 : int) (temp___is_init_177 : bool) (temp___skip_constant_178 : bool) (temp___do_toplevel_179 : bool) (temp___do_typ_inv_180 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_181 : int) (temp___is_init_177 : bool) (temp___skip_constant_178 : bool) (temp___do_toplevel_179 : bool) (temp___do_typ_inv_180 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_182 : int) (temp___skip_top_level_183 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_182 : int) (temp___skip_top_level_183 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_182 : int) (temp___skip_top_level_183 : bool) }

end

(* Module giving axioms for type "engine_status" defined at engine.ads:3, created in Gnat2Why.Types.Generate_Type_Completion *)
module Engine__engine_status___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Engine__engine_status as Engine__engine_status

 predicate dynamic_invariant [@inline] 
   (temp___expr_188 : int) (temp___is_init_184 : bool) (temp___skip_constant_185 : bool) (temp___do_toplevel_186 : bool) (temp___do_typ_inv_187 : bool) =
  (if (( temp___is_init_184 \/ (Engine__engine_status.first <= Engine__engine_status.last) )) then (
   (Engine__engine_status.dynamic_property Engine__engine_status.first Engine__engine_status.last temp___expr_188)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_188 : int) (temp___is_init_184 : bool) (temp___skip_constant_185 : bool) (temp___do_toplevel_186 : bool) (temp___do_typ_inv_187 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_188 : int) (temp___is_init_184 : bool) (temp___skip_constant_185 : bool) (temp___do_toplevel_186 : bool) (temp___do_typ_inv_187 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_189 : int) (temp___skip_top_level_190 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_189 : int) (temp___skip_top_level_190 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_189 : int) (temp___skip_top_level_190 : bool) }

end

(* Module giving axioms for type "engine_state" defined at engine.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Engine__engine_state___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Engine__engine_state as Engine__engine_state

 predicate dynamic_invariant [@inline] 
   (temp___expr_195 : Engine__engine_state.engine_state) (temp___is_init_191 : bool) (temp___skip_constant_192 : bool) (temp___do_toplevel_193 : bool) (temp___do_typ_inv_194 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_195 : Engine__engine_state.engine_state) (temp___is_init_191 : bool) (temp___skip_constant_192 : bool) (temp___do_toplevel_193 : bool) (temp___do_typ_inv_194 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_195 : Engine__engine_state.engine_state) (temp___is_init_191 : bool) (temp___skip_constant_192 : bool) (temp___do_toplevel_193 : bool) (temp___do_typ_inv_194 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_196 : Engine__engine_state.engine_state) (temp___skip_top_level_197 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_196 : Engine__engine_state.engine_state) (temp___skip_top_level_197 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_196 : Engine__engine_state.engine_state) (temp___skip_top_level_197 : bool) }

end

(* Module giving axioms for type "door_state" defined at door.ads:3, created in Gnat2Why.Types.Generate_Type_Completion *)
module Door__door_state___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Door__door_state as Door__door_state

 predicate dynamic_invariant [@inline] 
   (temp___expr_203 : int) (temp___is_init_199 : bool) (temp___skip_constant_200 : bool) (temp___do_toplevel_201 : bool) (temp___do_typ_inv_202 : bool) =
  (if (( temp___is_init_199 \/ (Door__door_state.first <= Door__door_state.last) )) then (
   (Door__door_state.dynamic_property Door__door_state.first Door__door_state.last temp___expr_203)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_203 : int) (temp___is_init_199 : bool) (temp___skip_constant_200 : bool) (temp___do_toplevel_201 : bool) (temp___do_typ_inv_202 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_203 : int) (temp___is_init_199 : bool) (temp___skip_constant_200 : bool) (temp___do_toplevel_201 : bool) (temp___do_typ_inv_202 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_204 : int) (temp___skip_top_level_205 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_204 : int) (temp___skip_top_level_205 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_204 : int) (temp___skip_top_level_205 : bool) }

end

(* Module giving axioms for type "doorsystem" defined at door.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Door__doorsystem___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Door__doorsystem as Door__doorsystem

 predicate dynamic_invariant [@inline] 
   (temp___expr_210 : Door__doorsystem.doorsystem) (temp___is_init_206 : bool) (temp___skip_constant_207 : bool) (temp___do_toplevel_208 : bool) (temp___do_typ_inv_209 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_210 : Door__doorsystem.doorsystem) (temp___is_init_206 : bool) (temp___skip_constant_207 : bool) (temp___do_toplevel_208 : bool) (temp___do_typ_inv_209 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_210 : Door__doorsystem.doorsystem) (temp___is_init_206 : bool) (temp___skip_constant_207 : bool) (temp___do_toplevel_208 : bool) (temp___do_typ_inv_209 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_211 : Door__doorsystem.doorsystem) (temp___skip_top_level_212 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_211 : Door__doorsystem.doorsystem) (temp___skip_top_level_212 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_211 : Door__doorsystem.doorsystem) (temp___skip_top_level_212 : bool) }

end

(* Module giving axioms for type "TfuelB" defined at dashboard.ads:3, created in Gnat2Why.Types.Generate_Type_Completion *)
module Dashboard__TfuelB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "fuel" defined at dashboard.ads:3, created in Gnat2Why.Types.Generate_Type_Completion *)
module Dashboard__fuel___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Dashboard__fuel as Dashboard__fuel

 predicate dynamic_invariant [@inline] 
   (temp___expr_218 : int) (temp___is_init_214 : bool) (temp___skip_constant_215 : bool) (temp___do_toplevel_216 : bool) (temp___do_typ_inv_217 : bool) =
  (if (( temp___is_init_214 \/ (Dashboard__fuel.first <= Dashboard__fuel.last) )) then (
   (Dashboard__fuel.dynamic_property Dashboard__fuel.first Dashboard__fuel.last temp___expr_218)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_218 : int) (temp___is_init_214 : bool) (temp___skip_constant_215 : bool) (temp___do_toplevel_216 : bool) (temp___do_typ_inv_217 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_218 : int) (temp___is_init_214 : bool) (temp___skip_constant_215 : bool) (temp___do_toplevel_216 : bool) (temp___do_typ_inv_217 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_219 : int) (temp___skip_top_level_220 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_219 : int) (temp___skip_top_level_220 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_219 : int) (temp___skip_top_level_220 : bool) }

end

(* Module giving axioms for type "TairspeedB" defined at dashboard.ads:4, created in Gnat2Why.Types.Generate_Type_Completion *)
module Dashboard__TairspeedB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "airspeed" defined at dashboard.ads:4, created in Gnat2Why.Types.Generate_Type_Completion *)
module Dashboard__airspeed___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Dashboard__airspeed as Dashboard__airspeed

 predicate dynamic_invariant [@inline] 
   (temp___expr_225 : int) (temp___is_init_221 : bool) (temp___skip_constant_222 : bool) (temp___do_toplevel_223 : bool) (temp___do_typ_inv_224 : bool) =
  (if (( temp___is_init_221 \/ (Dashboard__airspeed.first <= Dashboard__airspeed.last) )) then (
   (Dashboard__airspeed.dynamic_property Dashboard__airspeed.first Dashboard__airspeed.last temp___expr_225)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_225 : int) (temp___is_init_221 : bool) (temp___skip_constant_222 : bool) (temp___do_toplevel_223 : bool) (temp___do_typ_inv_224 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_225 : int) (temp___is_init_221 : bool) (temp___skip_constant_222 : bool) (temp___do_toplevel_223 : bool) (temp___do_typ_inv_224 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_226 : int) (temp___skip_top_level_227 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_226 : int) (temp___skip_top_level_227 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_226 : int) (temp___skip_top_level_227 : bool) }

end

(* Module giving axioms for type "TaltitudeB" defined at dashboard.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Dashboard__TaltitudeB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "altitude" defined at dashboard.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Dashboard__altitude___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Dashboard__altitude as Dashboard__altitude

 predicate dynamic_invariant [@inline] 
   (temp___expr_232 : int) (temp___is_init_228 : bool) (temp___skip_constant_229 : bool) (temp___do_toplevel_230 : bool) (temp___do_typ_inv_231 : bool) =
  (if (( temp___is_init_228 \/ (Dashboard__altitude.first <= Dashboard__altitude.last) )) then (
   (Dashboard__altitude.dynamic_property Dashboard__altitude.first Dashboard__altitude.last temp___expr_232)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_232 : int) (temp___is_init_228 : bool) (temp___skip_constant_229 : bool) (temp___do_toplevel_230 : bool) (temp___do_typ_inv_231 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_232 : int) (temp___is_init_228 : bool) (temp___skip_constant_229 : bool) (temp___do_toplevel_230 : bool) (temp___do_typ_inv_231 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_233 : int) (temp___skip_top_level_234 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_233 : int) (temp___skip_top_level_234 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_233 : int) (temp___skip_top_level_234 : bool) }

end

(* Module giving axioms for type "dashboardsystem" defined at dashboard.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Dashboard__dashboardsystem___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Dashboard__dashboardsystem as Dashboard__dashboardsystem

 predicate dynamic_invariant [@inline] 
   (temp___expr_239 : Dashboard__dashboardsystem.dashboardsystem) (temp___is_init_235 : bool) (temp___skip_constant_236 : bool) (temp___do_toplevel_237 : bool) (temp___do_typ_inv_238 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_239 : Dashboard__dashboardsystem.dashboardsystem) (temp___is_init_235 : bool) (temp___skip_constant_236 : bool) (temp___do_toplevel_237 : bool) (temp___do_typ_inv_238 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_239 : Dashboard__dashboardsystem.dashboardsystem) (temp___is_init_235 : bool) (temp___skip_constant_236 : bool) (temp___do_toplevel_237 : bool) (temp___do_typ_inv_238 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_240 : Dashboard__dashboardsystem.dashboardsystem) (temp___skip_top_level_241 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_240 : Dashboard__dashboardsystem.dashboardsystem) (temp___skip_top_level_241 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_240 : Dashboard__dashboardsystem.dashboardsystem) (temp___skip_top_level_241 : bool) }

end

(* Module giving axioms for type "warninglight" defined at warningsystem.ads:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Warningsystem__warninglight___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Warningsystem__warninglight as Warningsystem__warninglight

 predicate dynamic_invariant [@inline] 
   (temp___expr_249 : int) (temp___is_init_245 : bool) (temp___skip_constant_246 : bool) (temp___do_toplevel_247 : bool) (temp___do_typ_inv_248 : bool) =
  (if (( temp___is_init_245 \/ (Warningsystem__warninglight.first <= Warningsystem__warninglight.last) )) then (
   (Warningsystem__warninglight.dynamic_property Warningsystem__warninglight.first Warningsystem__warninglight.last temp___expr_249)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_249 : int) (temp___is_init_245 : bool) (temp___skip_constant_246 : bool) (temp___do_toplevel_247 : bool) (temp___do_typ_inv_248 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_249 : int) (temp___is_init_245 : bool) (temp___skip_constant_246 : bool) (temp___do_toplevel_247 : bool) (temp___do_typ_inv_248 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_250 : int) (temp___skip_top_level_251 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_250 : int) (temp___skip_top_level_251 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_250 : int) (temp___skip_top_level_251 : bool) }

end

(* Module giving axioms for type "warning_system" defined at warningsystem.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Warningsystem__warning_system___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Warningsystem__warning_system as Warningsystem__warning_system

 predicate dynamic_invariant [@inline] 
   (temp___expr_256 : Warningsystem__warning_system.warning_system) (temp___is_init_252 : bool) (temp___skip_constant_253 : bool) (temp___do_toplevel_254 : bool) (temp___do_typ_inv_255 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_256 : Warningsystem__warning_system.warning_system) (temp___is_init_252 : bool) (temp___skip_constant_253 : bool) (temp___do_toplevel_254 : bool) (temp___do_typ_inv_255 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_256 : Warningsystem__warning_system.warning_system) (temp___is_init_252 : bool) (temp___skip_constant_253 : bool) (temp___do_toplevel_254 : bool) (temp___do_typ_inv_255 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_257 : Warningsystem__warning_system.warning_system) (temp___skip_top_level_258 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_257 : Warningsystem__warning_system.warning_system) (temp___skip_top_level_258 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_257 : Warningsystem__warning_system.warning_system) (temp___skip_top_level_258 : bool) }

end

(* Module giving axioms for type "plane" defined at commercialplanesystem.ads:18, created in Gnat2Why.Types.Generate_Type_Completion *)
module Commercialplanesystem__plane___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Commercialplanesystem__plane as Commercialplanesystem__plane

 predicate dynamic_invariant [@inline] 
   (temp___expr_266 : Commercialplanesystem__plane.plane) (temp___is_init_262 : bool) (temp___skip_constant_263 : bool) (temp___do_toplevel_264 : bool) (temp___do_typ_inv_265 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_266 : Commercialplanesystem__plane.plane) (temp___is_init_262 : bool) (temp___skip_constant_263 : bool) (temp___do_toplevel_264 : bool) (temp___do_typ_inv_265 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_266 : Commercialplanesystem__plane.plane) (temp___is_init_262 : bool) (temp___skip_constant_263 : bool) (temp___do_toplevel_264 : bool) (temp___do_typ_inv_265 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_267 : Commercialplanesystem__plane.plane) (temp___skip_top_level_268 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_267 : Commercialplanesystem__plane.plane) (temp___skip_top_level_268 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_267 : Commercialplanesystem__plane.plane) (temp___skip_top_level_268 : bool) }

end

(* Module giving axioms for type "T1b" defined at commercialplanesystem.adb:28, created in Gnat2Why.Types.Generate_Type_Completion *)
module Commercialplanesystem__decreaseairspeed__T1b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T2b" defined at commercialplanesystem.adb:43, created in Gnat2Why.Types.Generate_Type_Completion *)
module Commercialplanesystem__decreasealtitude__T2b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a value for string literal  defined at commercialplanesystem.adb:28, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_301
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_301 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_301__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_301 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_301 __void_param) (1 : int))) = (83 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_301 __void_param) (2 : int))) = (108 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_301 __void_param) (3 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_301 __void_param) (4 : int))) = (119 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_301 __void_param) (5 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_301 __void_param) (6 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_301 __void_param) (7 : int))) = (103 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_301 __void_param) (8 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_301 __void_param) (9 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_301 __void_param) (10 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_301 __void_param) (11 : int))) = (119 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_301 __void_param) (12 : int))) = (110 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_301 __void_param) (13 : int))) = (46 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_301 __void_param) (14 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_301 __void_param) (15 : int))) = (99 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_301 __void_param) (16 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_301 __void_param) (17 : int))) = (109 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_301 __void_param) (18 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_301 __void_param) (19 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_301 __void_param) (20 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_301 __void_param) (21 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_301 __void_param) (22 : int))) = (105 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_301 __void_param) (23 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_301 __void_param) (24 : int))) = (108 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_301 __void_param) (25 : int))) = (80 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_301 __void_param) (26 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_301 __void_param) (27 : int))) = (97 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_301 __void_param) (28 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_301 __void_param) (29 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_301 __void_param) (30 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_301 __void_param) (31 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_301 __void_param) (32 : int))) = (101 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_301 __void_param) (33 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_301 __void_param) (34 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_301 __void_param) (35 : int))) = (99 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_301 __void_param) (36 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_301 __void_param) (37 : int))) = (116 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_301 __void_param) (38 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_301 __void_param) (39 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_301 __void_param) (40 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_301 __void_param) (41 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_301 __void_param) (42 : int))) = (32 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at commercialplanesystem.adb:43, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_314
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_314 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_314__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_314 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (1 : int))) = (68 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (2 : int))) = (101 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (3 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (4 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (5 : int))) = (101 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (6 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (7 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (8 : int))) = (105 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (9 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (10 : int))) = (103 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (11 : int))) = (32 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (12 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (13 : int))) = (108 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (14 : int))) = (116 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (15 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (16 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (17 : int))) = (117 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (18 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (19 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (20 : int))) = (46 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (21 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (22 : int))) = (99 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (23 : int))) = (111 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (24 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (25 : int))) = (109 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (26 : int))) = (101 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (27 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (28 : int))) = (99 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (29 : int))) = (105 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (30 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (31 : int))) = (108 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (32 : int))) = (80 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (33 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (34 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (35 : int))) = (110 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (36 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (37 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (38 : int))) = (97 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (39 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (40 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (41 : int))) = (105 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (42 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (43 : int))) = (117 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (44 : int))) = (100 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (45 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (46 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (47 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (48 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (49 : int))) = (32 : int)) ) ) ) ) ) ))

end
(* Module for declaring a program function (and possibly an axiom) for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__line_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val line_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
 
 axiom line_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   ada__text_io__file_system   : Main.__private [(Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err ada__text_io__file_system)].
   ( true -> (let result = (Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err ada__text_io__file_system) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__page_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val page_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
 
 axiom page_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   ada__text_io__file_system   : Main.__private [(Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err ada__text_io__file_system)].
   ( true -> (let result = (Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err ada__text_io__file_system) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "fuelusage" defined at commercialplanesystem.ads:39, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Commercialplanesystem__fuelusage___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Dashboard__dashboardsystem as Dashboard__dashboardsystem
 use        Commercialplanesystem__commercialplane as Commercialplanesystem__commercialplane
 use        Commercialplanesystem__plane as Commercialplanesystem__plane
 use        Commercialplanesystem__plane___axiom as Commercialplanesystem__plane___axiom
 use        Commercialplanesystem__currentactivity as Commercialplanesystem__currentactivity
 use        Commercialplanesystem__currentactivity__rep as Commercialplanesystem__currentactivity__rep
 use        Dashboard__fuel as Dashboard__fuel
 use        Dashboard__fuel__rep as Dashboard__fuel__rep

 val fuelusage 
   (__void_param : unit) : unit
  requires {  ( ( [@GP_Pretty_Ada:2984] ((Commercialplanesystem__currentactivity__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__mode) = (2 : int)) ) /\ ( [@GP_Pretty_Ada:2992] ((Dashboard__fuel__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__fuel_tank) >= (10 : int)) ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:19578] ((Dashboard__fuel__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__fuel_tank) = ((Dashboard__fuel__rep.to_rep (old { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__fuel_tank )) - (10 : int))) ) /\ (Commercialplanesystem__plane___axiom.dynamic_invariant { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content } True True True True) ) }
  reads {Commercialplanesystem__commercialplane.commercialplane__split_fields}
  writes {Commercialplanesystem__commercialplane.commercialplane__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "intow" defined at commercialplanesystem.ads:44, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Commercialplanesystem__intow___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Engine__engine_state as Engine__engine_state
 use        Dashboard__dashboardsystem as Dashboard__dashboardsystem
 use        Commercialplanesystem__commercialplane as Commercialplanesystem__commercialplane
 use        Commercialplanesystem__plane as Commercialplanesystem__plane
 use        Commercialplanesystem__plane___axiom as Commercialplanesystem__plane___axiom
 use        Commercialplanesystem__currentactivity as Commercialplanesystem__currentactivity
 use        Commercialplanesystem__currentactivity__rep as Commercialplanesystem__currentactivity__rep
 use        Engine__engine_status as Engine__engine_status
 use        Engine__engine_status__rep as Engine__engine_status__rep
 use        Dashboard__airspeed as Dashboard__airspeed
 use        Dashboard__airspeed__rep as Dashboard__airspeed__rep
 use        Dashboard__altitude as Dashboard__altitude
 use        Dashboard__altitude__rep as Dashboard__altitude__rep

 val intow 
   (__void_param : unit) : unit
  requires {  ( ( ( [@GP_Pretty_Ada:3034] ((Commercialplanesystem__currentactivity__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__mode) = (3 : int)) ) /\ ( [@GP_Pretty_Ada:3042] ((Dashboard__airspeed__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__velocity) = (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:3050] ((Dashboard__altitude__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__height) = (0 : int)) ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:19644] ((Engine__engine_status__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__ignition.Engine__engine_state.__split_fields.Engine__engine_state.rec__engine__engine_state__status) = (1 : int)) ) /\ (Commercialplanesystem__plane___axiom.dynamic_invariant { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content } True True True True) ) }
  reads {Commercialplanesystem__commercialplane.commercialplane__split_fields}
  writes {Commercialplanesystem__commercialplane.commercialplane__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "increaseairspeed" defined at commercialplanesystem.ads:49, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Commercialplanesystem__increaseairspeed___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Dashboard__dashboardsystem as Dashboard__dashboardsystem
 use        Commercialplanesystem__commercialplane as Commercialplanesystem__commercialplane
 use        Commercialplanesystem__plane as Commercialplanesystem__plane
 use        Commercialplanesystem__plane___axiom as Commercialplanesystem__plane___axiom
 use        Commercialplanesystem__currentactivity as Commercialplanesystem__currentactivity
 use        Commercialplanesystem__currentactivity__rep as Commercialplanesystem__currentactivity__rep
 use        Dashboard__airspeed as Dashboard__airspeed
 use        Dashboard__airspeed__rep as Dashboard__airspeed__rep

 val increaseairspeed 
   (__void_param : unit) : unit
  requires {  ( ( ( [@GP_Pretty_Ada:3084] ((Commercialplanesystem__currentactivity__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__mode) = (0 : int)) ) /\ ( [@GP_Pretty_Ada:3092] ((Dashboard__airspeed__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__velocity) >= (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:3100] ((Dashboard__airspeed__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__velocity) <= (250 : int)) ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:19717] ((Dashboard__airspeed__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__velocity) = ((Dashboard__airspeed__rep.to_rep (old { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__velocity )) + (10 : int))) ) /\ (Commercialplanesystem__plane___axiom.dynamic_invariant { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content } True True True True) ) }
  reads {Commercialplanesystem__commercialplane.commercialplane__split_fields}
  writes {Commercialplanesystem__commercialplane.commercialplane__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "decreaseairspeed" defined at commercialplanesystem.ads:54, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Commercialplanesystem__decreaseairspeed___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Dashboard__dashboardsystem as Dashboard__dashboardsystem
 use        Commercialplanesystem__commercialplane as Commercialplanesystem__commercialplane
 use        Commercialplanesystem__plane as Commercialplanesystem__plane
 use        Commercialplanesystem__plane___axiom as Commercialplanesystem__plane___axiom
 use        Commercialplanesystem__currentactivity as Commercialplanesystem__currentactivity
 use        Commercialplanesystem__currentactivity__rep as Commercialplanesystem__currentactivity__rep
 use        Dashboard__airspeed as Dashboard__airspeed
 use        Dashboard__airspeed__rep as Dashboard__airspeed__rep
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val decreaseairspeed 
   (__void_param : unit) : unit
  requires {  ( ( ( [@GP_Pretty_Ada:3144] ((Commercialplanesystem__currentactivity__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__mode) = (2 : int)) ) /\ ( [@GP_Pretty_Ada:3152] ((Dashboard__airspeed__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__velocity) <= (1000 : int)) ) ) /\ ( [@GP_Pretty_Ada:3160] ((Dashboard__airspeed__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__velocity) >= (250 : int)) ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:19792] ((Dashboard__airspeed__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__velocity) = ((Dashboard__airspeed__rep.to_rep (old { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__velocity )) - (10 : int))) ) /\ (Commercialplanesystem__plane___axiom.dynamic_invariant { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content } True True True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Commercialplanesystem__commercialplane.commercialplane__split_fields, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
  writes {Ada__text_io__standard_in.standard_in, Commercialplanesystem__commercialplane.commercialplane__split_fields, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}

end

(* Module for declaring a program function (and possibly an axiom) for "increasealtitude" defined at commercialplanesystem.ads:59, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Commercialplanesystem__increasealtitude___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Dashboard__dashboardsystem as Dashboard__dashboardsystem
 use        Commercialplanesystem__commercialplane as Commercialplanesystem__commercialplane
 use        Commercialplanesystem__plane as Commercialplanesystem__plane
 use        Commercialplanesystem__plane___axiom as Commercialplanesystem__plane___axiom
 use        Commercialplanesystem__currentactivity as Commercialplanesystem__currentactivity
 use        Commercialplanesystem__currentactivity__rep as Commercialplanesystem__currentactivity__rep
 use        Dashboard__altitude as Dashboard__altitude
 use        Dashboard__altitude__rep as Dashboard__altitude__rep

 val increasealtitude 
   (__void_param : unit) : unit
  requires {  ( ( ( [@GP_Pretty_Ada:3202] ((Commercialplanesystem__currentactivity__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__mode) = (0 : int)) ) /\ ( [@GP_Pretty_Ada:3210] ((Dashboard__altitude__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__height) >= (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:3218] ((Dashboard__altitude__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__height) < (500 : int)) ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:19865] ((Dashboard__altitude__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__height) = ((Dashboard__altitude__rep.to_rep (old { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__height )) + (50 : int))) ) /\ (Commercialplanesystem__plane___axiom.dynamic_invariant { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content } True True True True) ) }
  reads {Commercialplanesystem__commercialplane.commercialplane__split_fields}
  writes {Commercialplanesystem__commercialplane.commercialplane__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "decreasealtitude" defined at commercialplanesystem.ads:64, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Commercialplanesystem__decreasealtitude___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Dashboard__dashboardsystem as Dashboard__dashboardsystem
 use        Commercialplanesystem__commercialplane as Commercialplanesystem__commercialplane
 use        Commercialplanesystem__plane as Commercialplanesystem__plane
 use        Commercialplanesystem__plane___axiom as Commercialplanesystem__plane___axiom
 use        Commercialplanesystem__currentactivity as Commercialplanesystem__currentactivity
 use        Commercialplanesystem__currentactivity__rep as Commercialplanesystem__currentactivity__rep
 use        Dashboard__altitude as Dashboard__altitude
 use        Dashboard__altitude__rep as Dashboard__altitude__rep
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val decreasealtitude 
   (__void_param : unit) : unit
  requires {  ( ( ( [@GP_Pretty_Ada:3262] ((Commercialplanesystem__currentactivity__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__mode) = (2 : int)) ) /\ ( [@GP_Pretty_Ada:3270] ((Dashboard__altitude__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__height) <= (1200 : int)) ) ) /\ ( [@GP_Pretty_Ada:3278] ((Dashboard__altitude__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__height) > (500 : int)) ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:19940] ((Dashboard__altitude__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__height) = ((Dashboard__altitude__rep.to_rep (old { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__height )) - (50 : int))) ) /\ (Commercialplanesystem__plane___axiom.dynamic_invariant { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content } True True True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Commercialplanesystem__commercialplane.commercialplane__split_fields, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
  writes {Ada__text_io__standard_in.standard_in, Commercialplanesystem__commercialplane.commercialplane__split_fields, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}

end

(* Module for declaring a program function (and possibly an axiom) for "addpassenger" defined at commercialplanesystem.ads:69, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Commercialplanesystem__addpassenger___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Door__doorsystem as Door__doorsystem
 use        Commercialplanesystem__commercialplane as Commercialplanesystem__commercialplane
 use        Commercialplanesystem__plane as Commercialplanesystem__plane
 use        Commercialplanesystem__plane___axiom as Commercialplanesystem__plane___axiom
 use        Commercialplanesystem__currentactivity as Commercialplanesystem__currentactivity
 use        Commercialplanesystem__currentactivity__rep as Commercialplanesystem__currentactivity__rep
 use        Commercialplanesystem__passengers as Commercialplanesystem__passengers
 use        Commercialplanesystem__passengers__rep as Commercialplanesystem__passengers__rep
 use        Door__door_state as Door__door_state
 use        Door__door_state__rep as Door__door_state__rep

 val addpassenger 
   (__void_param : unit) : unit
  requires {  ( ( ( [@GP_Pretty_Ada:3320] ((Commercialplanesystem__currentactivity__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__mode) = (3 : int)) ) /\ ( [@GP_Pretty_Ada:3328] ((Door__door_state__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__extdoor.Door__doorsystem.__split_fields.Door__doorsystem.rec__door__doorsystem__door) = (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:3334] ((Commercialplanesystem__passengers__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__num_passengers) < (100 : int)) ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:20007] ((Commercialplanesystem__passengers__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__num_passengers) = ((Commercialplanesystem__passengers__rep.to_rep (old { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__num_passengers )) + (1 : int))) ) /\ (Commercialplanesystem__plane___axiom.dynamic_invariant { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content } True True True True) ) }
  reads {Commercialplanesystem__commercialplane.commercialplane__split_fields}
  writes {Commercialplanesystem__commercialplane.commercialplane__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "adjustfuelusage" defined at commercialplanesystem.ads:74, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Commercialplanesystem__adjustfuelusage___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Dashboard__dashboardsystem as Dashboard__dashboardsystem
 use        Commercialplanesystem__commercialplane as Commercialplanesystem__commercialplane
 use        Commercialplanesystem__plane as Commercialplanesystem__plane
 use        Commercialplanesystem__plane___axiom as Commercialplanesystem__plane___axiom
 use        Commercialplanesystem__currentactivity as Commercialplanesystem__currentactivity
 use        Commercialplanesystem__currentactivity__rep as Commercialplanesystem__currentactivity__rep
 use        Dashboard__fuel as Dashboard__fuel
 use        Dashboard__fuel__rep as Dashboard__fuel__rep

 val adjustfuelusage 
   (__void_param : unit) : unit
  requires {  ( ( [@GP_Pretty_Ada:3372] ((Commercialplanesystem__currentactivity__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__mode) = (2 : int)) ) /\ ( [@GP_Pretty_Ada:3380] ((Dashboard__fuel__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__fuel_tank) >= (25 : int)) ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:20072] ((Dashboard__fuel__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__fuel_tank) = ((Dashboard__fuel__rep.to_rep (old { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__fuel_tank )) - (15 : int))) ) /\ (Commercialplanesystem__plane___axiom.dynamic_invariant { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content } True True True True) ) }
  reads {Commercialplanesystem__commercialplane.commercialplane__split_fields}
  writes {Commercialplanesystem__commercialplane.commercialplane__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "put_line__2" defined at a-textio.ads:508, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__put_line__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__string as Standard__string
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val put_line__2 
   (item : Standard__string.string) : unit
  requires {  true }
  ensures {  ( ( [@GP_Pretty_Ada:6766] ((old (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content) ) = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content)) ) /\ ( [@GP_Pretty_Ada:6772] ((old (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content) ) = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content)) ) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "commercialplanesystem" defined at commercialplanesystem.ads:6, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Commercialplanesystem__package_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Commercialplanesystem__engine_instance as Commercialplanesystem__engine_instance
 use        Engine__engine_state as Engine__engine_state
 use        Engine__engine_state___axiom as Engine__engine_state___axiom
 use        Commercialplanesystem__cockpit_instance as Commercialplanesystem__cockpit_instance
 use        Door__doorsystem as Door__doorsystem
 use        Door__doorsystem___axiom as Door__doorsystem___axiom
 use        Commercialplanesystem__ext_instance as Commercialplanesystem__ext_instance
 use        Commercialplanesystem__dashboard_instance as Commercialplanesystem__dashboard_instance
 use        Dashboard__dashboardsystem as Dashboard__dashboardsystem
 use        Dashboard__dashboardsystem___axiom as Dashboard__dashboardsystem___axiom
 use        Commercialplanesystem__warning_instance as Commercialplanesystem__warning_instance
 use        Warningsystem__warning_system as Warningsystem__warning_system
 use        Warningsystem__warning_system___axiom as Warningsystem__warning_system___axiom
 use        Commercialplanesystem__commercialplane as Commercialplanesystem__commercialplane
 use        Commercialplanesystem__plane as Commercialplanesystem__plane
 use        Commercialplanesystem__plane___axiom as Commercialplanesystem__plane___axiom
 use        Commercialplanesystem__landinggear as Commercialplanesystem__landinggear
 use        Commercialplanesystem__landinggear__rep as Commercialplanesystem__landinggear__rep
 use        Commercialplanesystem__currentactivity as Commercialplanesystem__currentactivity
 use        Commercialplanesystem__currentactivity__rep as Commercialplanesystem__currentactivity__rep
 use        Commercialplanesystem__passengers as Commercialplanesystem__passengers
 use        Engine__engine_status as Engine__engine_status
 use        Engine__engine_status__rep as Engine__engine_status__rep
 use        Door__door_state as Door__door_state
 use        Door__door_state__rep as Door__door_state__rep
 use        Dashboard__fuel as Dashboard__fuel
 use        Dashboard__airspeed as Dashboard__airspeed
 use        Dashboard__altitude as Dashboard__altitude
 use        Warningsystem__warninglight as Warningsystem__warninglight
 use        Warningsystem__warninglight__rep as Warningsystem__warninglight__rep
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Commercialplanesystem__landinggear___axiom as Commercialplanesystem__landinggear___axiom
 use        Commercialplanesystem__currentactivity___axiom as Commercialplanesystem__currentactivity___axiom
 use        Commercialplanesystem__passengers___axiom as Commercialplanesystem__passengers___axiom
 use        Commercialplanesystem__engine_instance___axiom as Commercialplanesystem__engine_instance___axiom
 use        Commercialplanesystem__cockpit_instance___axiom as Commercialplanesystem__cockpit_instance___axiom
 use        Commercialplanesystem__ext_instance___axiom as Commercialplanesystem__ext_instance___axiom
 use        Commercialplanesystem__dashboard_instance___axiom as Commercialplanesystem__dashboard_instance___axiom
 use        Commercialplanesystem__warning_instance___axiom as Commercialplanesystem__warning_instance___axiom
 use        Commercialplanesystem__plane___axiom as Commercialplanesystem__plane___axiom
 use        Commercialplanesystem__commercialplane___axiom as Commercialplanesystem__commercialplane___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom
 use        Engine__engine_status___axiom as Engine__engine_status___axiom
 use        Engine__engine_state___axiom as Engine__engine_state___axiom
 use        Door__door_state___axiom as Door__door_state___axiom
 use        Door__doorsystem___axiom as Door__doorsystem___axiom
 use        Dashboard__fuel___axiom as Dashboard__fuel___axiom
 use        Dashboard__airspeed___axiom as Dashboard__airspeed___axiom
 use        Dashboard__altitude___axiom as Dashboard__altitude___axiom
 use        Dashboard__dashboardsystem___axiom as Dashboard__dashboardsystem___axiom
 use        Warningsystem__warninglight___axiom as Warningsystem__warninglight___axiom
 use        Warningsystem__warning_system___axiom as Warningsystem__warning_system___axiom

 let def [#"commercialplanesystem.ads" 6 0 0][@GP_Subp:commercialplanesystem.ads:6] 
   (__void_param : unit)
  requires { [#"commercialplanesystem.ads" 6 0 0] true }
   = [@vc:divergent]
  ( [#"commercialplanesystem.ads" 6 0 0] assume { [#"commercialplanesystem.ads" 6 0 0] ( ((Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content) = (0 : int)) /\ ((Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content) = (0 : int)) ) };
  ();
  ([#"commercialplanesystem.ads" 6 0 0] ());
  ([#"commercialplanesystem.ads" 8 0 0] ());
  ([#"commercialplanesystem.ads" 9 0 0] ());
  ([#"commercialplanesystem.ads" 10 0 0] ());
  ([#"commercialplanesystem.ads" 12 0 0] ( (let commercialplanesystem__engine_instance__assume = { Engine__engine_state.__split_fields = { Engine__engine_state.rec__engine__engine_state__status = (Engine__engine_status__rep.of_rep((1 : int))) } } in (
   [#"commercialplanesystem.ads" 12 0 0] (Commercialplanesystem__engine_instance.engine_instance__split_fields.Engine__engine_state.__split_fields__content <- ( commercialplanesystem__engine_instance__assume.Engine__engine_state.__split_fields ))))
  ;
  [#"commercialplanesystem.ads" 12 0 0] assume { [#"commercialplanesystem.ads" 12 0 0] (Engine__engine_state___axiom.dynamic_invariant { Engine__engine_state.__split_fields = Commercialplanesystem__engine_instance.engine_instance__split_fields.Engine__engine_state.__split_fields__content } True False True True) } ));
  ([#"commercialplanesystem.ads" 13 0 0] ( (let commercialplanesystem__cockpit_instance__assume = { Door__doorsystem.__split_fields = { Door__doorsystem.rec__door__doorsystem__door = (Door__door_state__rep.of_rep((1 : int))) } } in (
   [#"commercialplanesystem.ads" 13 0 0] (Commercialplanesystem__cockpit_instance.cockpit_instance__split_fields.Door__doorsystem.__split_fields__content <- ( commercialplanesystem__cockpit_instance__assume.Door__doorsystem.__split_fields ))))
  ;
  [#"commercialplanesystem.ads" 13 0 0] assume { [#"commercialplanesystem.ads" 13 0 0] (Door__doorsystem___axiom.dynamic_invariant { Door__doorsystem.__split_fields = Commercialplanesystem__cockpit_instance.cockpit_instance__split_fields.Door__doorsystem.__split_fields__content } True False True True) } ));
  ([#"commercialplanesystem.ads" 14 0 0] ( (let commercialplanesystem__ext_instance__assume = { Door__doorsystem.__split_fields = { Door__doorsystem.rec__door__doorsystem__door = (Door__door_state__rep.of_rep((1 : int))) } } in (
   [#"commercialplanesystem.ads" 14 0 0] (Commercialplanesystem__ext_instance.ext_instance__split_fields.Door__doorsystem.__split_fields__content <- ( commercialplanesystem__ext_instance__assume.Door__doorsystem.__split_fields ))))
  ;
  [#"commercialplanesystem.ads" 14 0 0] assume { [#"commercialplanesystem.ads" 14 0 0] (Door__doorsystem___axiom.dynamic_invariant { Door__doorsystem.__split_fields = Commercialplanesystem__ext_instance.ext_instance__split_fields.Door__doorsystem.__split_fields__content } True False True True) } ));
  ([#"commercialplanesystem.ads" 15 0 0] ( (let commercialplanesystem__dashboard_instance__assume = { Dashboard__dashboardsystem.__split_fields = { Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__fuel_tank = ( 100 : Dashboard__fuel.fuel ); Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__velocity = ( 0 : Dashboard__airspeed.airspeed ); Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__height = ( 0 : Dashboard__altitude.altitude ) } } in (
   [#"commercialplanesystem.ads" 15 0 0] (Commercialplanesystem__dashboard_instance.dashboard_instance__split_fields.Dashboard__dashboardsystem.__split_fields__content <- ( commercialplanesystem__dashboard_instance__assume.Dashboard__dashboardsystem.__split_fields ))))
  ;
  [#"commercialplanesystem.ads" 15 0 0] assume { [#"commercialplanesystem.ads" 15 0 0] (Dashboard__dashboardsystem___axiom.dynamic_invariant { Dashboard__dashboardsystem.__split_fields = Commercialplanesystem__dashboard_instance.dashboard_instance__split_fields.Dashboard__dashboardsystem.__split_fields__content } True False True True) } ));
  ([#"commercialplanesystem.ads" 16 0 0] ( (let commercialplanesystem__warning_instance__assume = { Warningsystem__warning_system.__split_fields = { Warningsystem__warning_system.rec__warningsystem__warning_system__fuelwarning = (Warningsystem__warninglight__rep.of_rep((0 : int))); Warningsystem__warning_system.rec__warningsystem__warning_system__heightwarning = (Warningsystem__warninglight__rep.of_rep((0 : int))); Warningsystem__warning_system.rec__warningsystem__warning_system__speedwarning = (Warningsystem__warninglight__rep.of_rep((0 : int))) } } in (
   [#"commercialplanesystem.ads" 16 0 0] (Commercialplanesystem__warning_instance.warning_instance__split_fields.Warningsystem__warning_system.__split_fields__content <- ( commercialplanesystem__warning_instance__assume.Warningsystem__warning_system.__split_fields ))))
  ;
  [#"commercialplanesystem.ads" 16 0 0] assume { [#"commercialplanesystem.ads" 16 0 0] (Warningsystem__warning_system___axiom.dynamic_invariant { Warningsystem__warning_system.__split_fields = Commercialplanesystem__warning_instance.warning_instance__split_fields.Warningsystem__warning_system.__split_fields__content } True False True True) } ));
  ([#"commercialplanesystem.ads" 18 0 0] ());
  ([#"commercialplanesystem.ads" 29 0 0] ());
  ([#"commercialplanesystem.ads" 29 0 0] ());
  ([#"commercialplanesystem.ads" 29 0 0] ());
  ([#"commercialplanesystem.ads" 29 0 0] ());
  ([#"commercialplanesystem.ads" 29 0 0] ());
  ([#"commercialplanesystem.ads" 30 0 0] ());
  ([#"commercialplanesystem.ads" 32 0 0] ());
  ([#"commercialplanesystem.ads" 33 0 0] ());
  ([#"commercialplanesystem.ads" 34 0 0] ());
  ([#"commercialplanesystem.ads" 36 0 0] ());
  ([#"commercialplanesystem.ads" 29 0 0] ( (let commercialplanesystem__commercialplane__assume = { Commercialplanesystem__plane.__split_fields = { Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system = { Dashboard__dashboardsystem.__split_fields = Commercialplanesystem__dashboard_instance.dashboard_instance__split_fields.Dashboard__dashboardsystem.__split_fields__content }; Commercialplanesystem__plane.rec__commercialplanesystem__plane__landgear = (Commercialplanesystem__landinggear__rep.of_rep((1 : int))); Commercialplanesystem__plane.rec__commercialplanesystem__plane__cockpit = { Door__doorsystem.__split_fields = Commercialplanesystem__cockpit_instance.cockpit_instance__split_fields.Door__doorsystem.__split_fields__content }; Commercialplanesystem__plane.rec__commercialplanesystem__plane__extdoor = { Door__doorsystem.__split_fields = Commercialplanesystem__ext_instance.ext_instance__split_fields.Door__doorsystem.__split_fields__content }; Commercialplanesystem__plane.rec__commercialplanesystem__plane__ignition = { Engine__engine_state.__split_fields = Commercialplanesystem__engine_instance.engine_instance__split_fields.Engine__engine_state.__split_fields__content }; Commercialplanesystem__plane.rec__commercialplanesystem__plane__mode = (Commercialplanesystem__currentactivity__rep.of_rep((3 : int))); Commercialplanesystem__plane.rec__commercialplanesystem__plane__num_passengers = ( 0 : Commercialplanesystem__passengers.passengers ); Commercialplanesystem__plane.rec__commercialplanesystem__plane__warning_lights = { Warningsystem__warning_system.__split_fields = Commercialplanesystem__warning_instance.warning_instance__split_fields.Warningsystem__warning_system.__split_fields__content } } } in (
   [#"commercialplanesystem.ads" 29 0 0] (Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content <- ( commercialplanesystem__commercialplane__assume.Commercialplanesystem__plane.__split_fields ))))
  ;
  [#"commercialplanesystem.ads" 29 0 0] assume { [#"commercialplanesystem.ads" 29 0 0] (Commercialplanesystem__plane___axiom.dynamic_invariant { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content } True False True True) } ));
  ([#"commercialplanesystem.ads" 39 0 0] ());
  ([#"commercialplanesystem.ads" 42 0 0] ());
  ([#"commercialplanesystem.ads" 41 0 0] ());
  ([#"commercialplanesystem.ads" 40 0 0] ());
  ([#"commercialplanesystem.ads" 44 0 0] ());
  ([#"commercialplanesystem.ads" 47 0 0] ());
  ([#"commercialplanesystem.ads" 46 0 0] ());
  ([#"commercialplanesystem.ads" 45 0 0] ());
  ([#"commercialplanesystem.ads" 49 0 0] ());
  ([#"commercialplanesystem.ads" 52 0 0] ());
  ([#"commercialplanesystem.ads" 51 0 0] ());
  ([#"commercialplanesystem.ads" 50 0 0] ());
  ([#"commercialplanesystem.ads" 54 0 0] ());
  ([#"commercialplanesystem.ads" 57 0 0] ());
  ([#"commercialplanesystem.ads" 56 0 0] ());
  ([#"commercialplanesystem.ads" 55 0 0] ());
  ([#"commercialplanesystem.ads" 59 0 0] ());
  ([#"commercialplanesystem.ads" 62 0 0] ());
  ([#"commercialplanesystem.ads" 61 0 0] ());
  ([#"commercialplanesystem.ads" 60 0 0] ());
  ([#"commercialplanesystem.ads" 64 0 0] ());
  ([#"commercialplanesystem.ads" 67 0 0] ());
  ([#"commercialplanesystem.ads" 66 0 0] ());
  ([#"commercialplanesystem.ads" 65 0 0] ());
  ([#"commercialplanesystem.ads" 69 0 0] ());
  ([#"commercialplanesystem.ads" 72 0 0] ());
  ([#"commercialplanesystem.ads" 71 0 0] ());
  ([#"commercialplanesystem.ads" 70 0 0] ());
  ([#"commercialplanesystem.ads" 74 0 0] ());
  ([#"commercialplanesystem.ads" 77 0 0] ());
  ([#"commercialplanesystem.ads" 76 0 0] ());
  ([#"commercialplanesystem.ads" 75 0 0] ());
   assume {  ( ((Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content) = (0 : int)) /\ ((Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content) = (0 : int)) ) };
  ();
  ([#"commercialplanesystem.adb" 3 0 0] ());
  ([#"commercialplanesystem.adb" 5 0 0] ());
  ([#"commercialplanesystem.adb" 12 0 0] ());
  ([#"commercialplanesystem.adb" 19 0 0] ());
  ([#"commercialplanesystem.adb" 24 0 0] ());
  ([#"commercialplanesystem.adb" 32 0 0] ());
  ([#"commercialplanesystem.adb" 40 0 0] ());
  ([#"commercialplanesystem.adb" 46 0 0] ());
  ([#"commercialplanesystem.adb" 53 0 0] ());
  ();
  ( [@GP_Sloc:commercialplanesystem.adb:61:1] ([#"commercialplanesystem.adb" 61 0 0] ()) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "fuelusage" defined at commercialplanesystem.ads:39, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Commercialplanesystem__fuelusage__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Dashboard__dashboardsystem as Dashboard__dashboardsystem
 use        Commercialplanesystem__commercialplane as Commercialplanesystem__commercialplane
 use        Commercialplanesystem__plane as Commercialplanesystem__plane
 use        Commercialplanesystem__plane___axiom as Commercialplanesystem__plane___axiom
 use        Commercialplanesystem__currentactivity as Commercialplanesystem__currentactivity
 use        Commercialplanesystem__currentactivity__rep as Commercialplanesystem__currentactivity__rep
 use        Dashboard__fuel as Dashboard__fuel
 use        Dashboard__fuel__rep as Dashboard__fuel__rep
 use        Commercialplanesystem__landinggear___axiom as Commercialplanesystem__landinggear___axiom
 use        Commercialplanesystem__currentactivity___axiom as Commercialplanesystem__currentactivity___axiom
 use        Commercialplanesystem__passengers___axiom as Commercialplanesystem__passengers___axiom
 use        Commercialplanesystem__plane___axiom as Commercialplanesystem__plane___axiom
 use        Commercialplanesystem__commercialplane___axiom as Commercialplanesystem__commercialplane___axiom
 use        Engine__engine_status___axiom as Engine__engine_status___axiom
 use        Engine__engine_state___axiom as Engine__engine_state___axiom
 use        Door__door_state___axiom as Door__door_state___axiom
 use        Door__doorsystem___axiom as Door__doorsystem___axiom
 use        Dashboard__fuel___axiom as Dashboard__fuel___axiom
 use        Dashboard__airspeed___axiom as Dashboard__airspeed___axiom
 use        Dashboard__altitude___axiom as Dashboard__altitude___axiom
 use        Dashboard__dashboardsystem___axiom as Dashboard__dashboardsystem___axiom
 use        Warningsystem__warninglight___axiom as Warningsystem__warninglight___axiom
 use        Warningsystem__warning_system___axiom as Warningsystem__warning_system___axiom

 let def [#"commercialplanesystem.ads" 39 0 0][@GP_Subp:commercialplanesystem.ads:39] 
   (__void_param : unit)
  requires { [#"commercialplanesystem.ads" 39 0 0] true }
  ensures { [#"commercialplanesystem.ads" 39 0 0] ([#"commercialplanesystem.ads" 42 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@comment:        Post => commercialPlane.dashboard_system.fuel_tank = commercialPlane.dashboard_system.fuel_tank'Old - 10;                 ^ commercialplanesystem.ads:42:17:VC_POSTCONDITION] [@GP_Shape:pragargs__cmp] [@model_vc_post] [@GP_Id:1] [@GP_Sloc:commercialplanesystem.ads:42:17] ( [@GP_Pretty_Ada:19578] [@GP_Sloc:commercialplanesystem.ads:42:17] ((Dashboard__fuel__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__fuel_tank) = ((Dashboard__fuel__rep.to_rep (old { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__fuel_tank )) - (10 : int))) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram commercialplanesystem.ads:39 *)
  ;
   assume {  (Commercialplanesystem__plane___axiom.dynamic_invariant { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram commercialplanesystem.ads:39 *)
  ;
  () (* Check for RTE in the Pre of the subprogram commercialplanesystem.ads:39 *)
  ;
   begin ensures {true} let _ = (let _ = (Boolean.andb(((Commercialplanesystem__currentactivity__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__mode)) = (2 : int))) (((Dashboard__fuel__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__fuel_tank)) >= (10 : int)))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram commercialplanesystem.ads:39 *)
  ;
   assume {  ( ( [@GP_Pretty_Ada:2984] ((Commercialplanesystem__currentactivity__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__mode) = (2 : int)) ) /\ ( [@GP_Pretty_Ada:2992] ((Dashboard__fuel__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__fuel_tank) >= (10 : int)) ) ) };
   begin ensures {true} let _ = (let _ = { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__fuel_tank in (
   ()))
   in () end ;
  (let temp___old_290 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
  ensures { (result = (Dashboard__fuel__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__fuel_tank))} 
  in _f) in (
   (  try
    ( ();
    ( [@GP_Sloc:commercialplanesystem.adb:7:11] ([#"commercialplanesystem.adb" 7 0 0] ()) );
    ( [@GP_Sloc:commercialplanesystem.adb:7:45] ([#"commercialplanesystem.adb" 7 0 0] ()) );
    ( [@GP_Sloc:commercialplanesystem.adb:7:7] ([#"commercialplanesystem.adb" 7 0 0] (if (( ([#"commercialplanesystem.adb" 7 0 0] [#"commercialplanesystem.adb" 7 0 0] (([@branch_id=2324] Main.spark__branch).bool__content <- ( (Boolean.andb(((Commercialplanesystem__currentactivity__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__mode)) = (2 : int))) (((Dashboard__fuel__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__fuel_tank)) >= (10 : int)))) )));
    ( [@branch_id=2324] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:commercialplanesystem.adb:8:10] ([#"commercialplanesystem.adb" 8 0 0] ()) );
     ( [@GP_Sloc:commercialplanesystem.adb:8:56] ([#"commercialplanesystem.adb" 8 0 0] ()) );
     ( [@GP_Sloc:commercialplanesystem.adb:8:53] ([#"commercialplanesystem.adb" 8 0 0] (let temp___289 [@mlw:proxy_symbol] [@introduced] = (let temp___288 [@mlw:proxy_symbol] [@introduced] = { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content } in (
      ( [#"commercialplanesystem.adb" 8 0 0] begin ensures {true} let _ = (let _ = temp___288.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system in (
       ()))
       in () end ;
      { ( temp___288 ) with Commercialplanesystem__plane.__split_fields = { ( temp___288.Commercialplanesystem__plane.__split_fields ) with Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system = (let temp___287 [@mlw:proxy_symbol] [@introduced] = { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system in (
       ( [#"commercialplanesystem.adb" 8 0 0] begin ensures {true} let _ = (let _ = temp___287.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__fuel_tank in (
        ()))
        in () end ;
       { ( temp___287 ) with Dashboard__dashboardsystem.__split_fields = { ( temp___287.Dashboard__dashboardsystem.__split_fields ) with Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__fuel_tank = (Dashboard__fuel__rep.of_rep(([#"commercialplanesystem.adb" 8 0 0] ( [@vc:annotation] [@comment:         commercialPlane.dashboard_system.fuel_tank := commercialPlane.dashboard_system.fuel_tank -10;                                                                                                   ^ commercialplanesystem.adb:8:99:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:0] [@GP_Shape:if__commercialplane_assign__sub] [@GP_Sloc:commercialplanesystem.adb:8:99] (Dashboard__fuel.range_check_(((Dashboard__fuel__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__fuel_tank)) - (10 : int)))) )))) } } )))
       } } )))
      in (
       (Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content <- ( temp___289.Commercialplanesystem__plane.__split_fields ))))
     ) ) )) else (
     ()))) );
     raise Return__exc )
   with
    Return__exc -> ()
   end;
    begin ensures {true} let _ = (let _ = ((Dashboard__fuel__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__fuel_tank)) = (temp___old_290 - (10 : int))) in (
    ()))
    in () end  )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "intow" defined at commercialplanesystem.ads:44, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Commercialplanesystem__intow__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Engine__engine_state as Engine__engine_state
 use        Dashboard__dashboardsystem as Dashboard__dashboardsystem
 use        Commercialplanesystem__commercialplane as Commercialplanesystem__commercialplane
 use        Commercialplanesystem__plane as Commercialplanesystem__plane
 use        Commercialplanesystem__plane___axiom as Commercialplanesystem__plane___axiom
 use        Commercialplanesystem__currentactivity as Commercialplanesystem__currentactivity
 use        Commercialplanesystem__currentactivity__rep as Commercialplanesystem__currentactivity__rep
 use        Engine__engine_status as Engine__engine_status
 use        Engine__engine_status__rep as Engine__engine_status__rep
 use        Dashboard__airspeed as Dashboard__airspeed
 use        Dashboard__airspeed__rep as Dashboard__airspeed__rep
 use        Dashboard__altitude as Dashboard__altitude
 use        Dashboard__altitude__rep as Dashboard__altitude__rep
 use        Commercialplanesystem__landinggear___axiom as Commercialplanesystem__landinggear___axiom
 use        Commercialplanesystem__currentactivity___axiom as Commercialplanesystem__currentactivity___axiom
 use        Commercialplanesystem__passengers___axiom as Commercialplanesystem__passengers___axiom
 use        Commercialplanesystem__plane___axiom as Commercialplanesystem__plane___axiom
 use        Commercialplanesystem__commercialplane___axiom as Commercialplanesystem__commercialplane___axiom
 use        Engine__engine_status___axiom as Engine__engine_status___axiom
 use        Engine__engine_state___axiom as Engine__engine_state___axiom
 use        Door__door_state___axiom as Door__door_state___axiom
 use        Door__doorsystem___axiom as Door__doorsystem___axiom
 use        Dashboard__fuel___axiom as Dashboard__fuel___axiom
 use        Dashboard__airspeed___axiom as Dashboard__airspeed___axiom
 use        Dashboard__altitude___axiom as Dashboard__altitude___axiom
 use        Dashboard__dashboardsystem___axiom as Dashboard__dashboardsystem___axiom
 use        Warningsystem__warninglight___axiom as Warningsystem__warninglight___axiom
 use        Warningsystem__warning_system___axiom as Warningsystem__warning_system___axiom

 let def [#"commercialplanesystem.ads" 44 0 0][@GP_Subp:commercialplanesystem.ads:44] 
   (__void_param : unit)
  requires { [#"commercialplanesystem.ads" 44 0 0] true }
  ensures { [#"commercialplanesystem.ads" 44 0 0] ([#"commercialplanesystem.ads" 47 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Shape:pragargs__cmp] [@comment:        Post => commercialPlane.ignition.status = Off;                 ^ commercialplanesystem.ads:47:17:VC_POSTCONDITION] [@model_vc_post] [@GP_Id:2] [@GP_Sloc:commercialplanesystem.ads:47:17] ( [@GP_Pretty_Ada:19644] [@GP_Sloc:commercialplanesystem.ads:47:17] ((Engine__engine_status__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__ignition.Engine__engine_state.__split_fields.Engine__engine_state.rec__engine__engine_state__status) = (1 : int)) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram commercialplanesystem.ads:44 *)
  ;
   assume {  (Commercialplanesystem__plane___axiom.dynamic_invariant { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram commercialplanesystem.ads:44 *)
  ;
  () (* Check for RTE in the Pre of the subprogram commercialplanesystem.ads:44 *)
  ;
   begin ensures {true} let _ = (let _ = (Boolean.andb((Boolean.andb(((Commercialplanesystem__currentactivity__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__mode)) = (3 : int))) (((Dashboard__airspeed__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__velocity)) = (0 : int))))) (((Dashboard__altitude__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__height)) = (0 : int)))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram commercialplanesystem.ads:44 *)
  ;
   assume {  ( ( ( [@GP_Pretty_Ada:3034] ((Commercialplanesystem__currentactivity__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__mode) = (3 : int)) ) /\ ( [@GP_Pretty_Ada:3042] ((Dashboard__airspeed__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__velocity) = (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:3050] ((Dashboard__altitude__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__height) = (0 : int)) ) ) };
   try
   ( ();
   ( [@GP_Sloc:commercialplanesystem.adb:14:11] ([#"commercialplanesystem.adb" 14 0 0] ()) );
   ( [@GP_Sloc:commercialplanesystem.adb:14:43] ([#"commercialplanesystem.adb" 14 0 0] ()) );
   ( [@GP_Sloc:commercialplanesystem.adb:14:93] ([#"commercialplanesystem.adb" 14 0 0] ()) );
   ( [@GP_Sloc:commercialplanesystem.adb:14:7] ([#"commercialplanesystem.adb" 14 0 0] (if (( ([#"commercialplanesystem.adb" 14 0 0] [#"commercialplanesystem.adb" 14 0 0] (([@branch_id=2363] Main.spark__branch).bool__content <- ( (Boolean.andb((Boolean.andb(((Commercialplanesystem__currentactivity__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__mode)) = (3 : int))) (((Dashboard__airspeed__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__velocity)) = (0 : int))))) (((Dashboard__altitude__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__height)) = (0 : int)))) )));
   ( [@branch_id=2363] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:commercialplanesystem.adb:15:10] ([#"commercialplanesystem.adb" 15 0 0] ()) );
    ( [@GP_Sloc:commercialplanesystem.adb:15:42] ([#"commercialplanesystem.adb" 15 0 0] (let temp___293 [@mlw:proxy_symbol] [@introduced] = (let temp___292 [@mlw:proxy_symbol] [@introduced] = { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content } in (
     ( [#"commercialplanesystem.adb" 15 0 0] begin ensures {true} let _ = (let _ = temp___292.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__ignition in (
      ()))
      in () end ;
     { ( temp___292 ) with Commercialplanesystem__plane.__split_fields = { ( temp___292.Commercialplanesystem__plane.__split_fields ) with Commercialplanesystem__plane.rec__commercialplanesystem__plane__ignition = (let temp___291 [@mlw:proxy_symbol] [@introduced] = { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__ignition in (
      ( [#"commercialplanesystem.adb" 15 0 0] begin ensures {true} let _ = (let _ = temp___291.Engine__engine_state.__split_fields.Engine__engine_state.rec__engine__engine_state__status in (
       ()))
       in () end ;
      { ( temp___291 ) with Engine__engine_state.__split_fields = { ( temp___291.Engine__engine_state.__split_fields ) with Engine__engine_state.rec__engine__engine_state__status = (Engine__engine_status__rep.of_rep((1 : int))) } } )))
      } } )))
     in (
     [#"commercialplanesystem.adb" 15 0 0] (Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content <- ( temp___293.Commercialplanesystem__plane.__split_fields ))))
    ) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = ((Engine__engine_status__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__ignition.Engine__engine_state.__split_fields.Engine__engine_state.rec__engine__engine_state__status)) = (1 : int)) in (
   ()))
   in () end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "increaseairspeed" defined at commercialplanesystem.ads:49, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Commercialplanesystem__increaseairspeed__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Dashboard__dashboardsystem as Dashboard__dashboardsystem
 use        Commercialplanesystem__commercialplane as Commercialplanesystem__commercialplane
 use        Commercialplanesystem__plane as Commercialplanesystem__plane
 use        Commercialplanesystem__plane___axiom as Commercialplanesystem__plane___axiom
 use        Commercialplanesystem__currentactivity as Commercialplanesystem__currentactivity
 use        Commercialplanesystem__currentactivity__rep as Commercialplanesystem__currentactivity__rep
 use        Dashboard__airspeed as Dashboard__airspeed
 use        Dashboard__airspeed__rep as Dashboard__airspeed__rep
 use        Commercialplanesystem__landinggear___axiom as Commercialplanesystem__landinggear___axiom
 use        Commercialplanesystem__currentactivity___axiom as Commercialplanesystem__currentactivity___axiom
 use        Commercialplanesystem__passengers___axiom as Commercialplanesystem__passengers___axiom
 use        Commercialplanesystem__plane___axiom as Commercialplanesystem__plane___axiom
 use        Commercialplanesystem__commercialplane___axiom as Commercialplanesystem__commercialplane___axiom
 use        Engine__engine_status___axiom as Engine__engine_status___axiom
 use        Engine__engine_state___axiom as Engine__engine_state___axiom
 use        Door__door_state___axiom as Door__door_state___axiom
 use        Door__doorsystem___axiom as Door__doorsystem___axiom
 use        Dashboard__fuel___axiom as Dashboard__fuel___axiom
 use        Dashboard__airspeed___axiom as Dashboard__airspeed___axiom
 use        Dashboard__altitude___axiom as Dashboard__altitude___axiom
 use        Dashboard__dashboardsystem___axiom as Dashboard__dashboardsystem___axiom
 use        Warningsystem__warninglight___axiom as Warningsystem__warninglight___axiom
 use        Warningsystem__warning_system___axiom as Warningsystem__warning_system___axiom

 let def [#"commercialplanesystem.ads" 49 0 0][@GP_Subp:commercialplanesystem.ads:49] 
   (__void_param : unit)
  requires { [#"commercialplanesystem.ads" 49 0 0] true }
  ensures { [#"commercialplanesystem.ads" 49 0 0] ([#"commercialplanesystem.ads" 52 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Shape:pragargs__cmp] [@comment:        Post => commercialPlane.dashboard_system.velocity = commercialPlane.dashboard_system.velocity'Old + 10;                 ^ commercialplanesystem.ads:52:17:VC_POSTCONDITION] [@model_vc_post] [@GP_Id:4] [@GP_Sloc:commercialplanesystem.ads:52:17] ( [@GP_Pretty_Ada:19717] [@GP_Sloc:commercialplanesystem.ads:52:17] ((Dashboard__airspeed__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__velocity) = ((Dashboard__airspeed__rep.to_rep (old { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__velocity )) + (10 : int))) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram commercialplanesystem.ads:49 *)
  ;
   assume {  (Commercialplanesystem__plane___axiom.dynamic_invariant { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram commercialplanesystem.ads:49 *)
  ;
  () (* Check for RTE in the Pre of the subprogram commercialplanesystem.ads:49 *)
  ;
   begin ensures {true} let _ = (let _ = (Boolean.andb((Boolean.andb(((Commercialplanesystem__currentactivity__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__mode)) = (0 : int))) (((Dashboard__airspeed__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__velocity)) >= (0 : int))))) (((Dashboard__airspeed__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__velocity)) <= (250 : int)))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram commercialplanesystem.ads:49 *)
  ;
   assume {  ( ( ( [@GP_Pretty_Ada:3084] ((Commercialplanesystem__currentactivity__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__mode) = (0 : int)) ) /\ ( [@GP_Pretty_Ada:3092] ((Dashboard__airspeed__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__velocity) >= (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:3100] ((Dashboard__airspeed__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__velocity) <= (250 : int)) ) ) };
   begin ensures {true} let _ = (let _ = { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__velocity in (
   ()))
   in () end ;
  (let temp___old_297 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
  ensures { (result = (Dashboard__airspeed__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__velocity))} 
  in _f) in (
   (  try
    ( ();
    ( [@GP_Sloc:commercialplanesystem.adb:21:7] ([#"commercialplanesystem.adb" 21 0 0] ()) );
    ( [@GP_Sloc:commercialplanesystem.adb:21:52] ([#"commercialplanesystem.adb" 21 0 0] ()) );
    ( [@GP_Sloc:commercialplanesystem.adb:21:49] ([#"commercialplanesystem.adb" 21 0 0] (let temp___296 [@mlw:proxy_symbol] [@introduced] = (let temp___295 [@mlw:proxy_symbol] [@introduced] = { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content } in (
     ( [#"commercialplanesystem.adb" 21 0 0] begin ensures {true} let _ = (let _ = temp___295.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system in (
      ()))
      in () end ;
     { ( temp___295 ) with Commercialplanesystem__plane.__split_fields = { ( temp___295.Commercialplanesystem__plane.__split_fields ) with Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system = (let temp___294 [@mlw:proxy_symbol] [@introduced] = { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system in (
      ( [#"commercialplanesystem.adb" 21 0 0] begin ensures {true} let _ = (let _ = temp___294.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__velocity in (
       ()))
       in () end ;
      { ( temp___294 ) with Dashboard__dashboardsystem.__split_fields = { ( temp___294.Dashboard__dashboardsystem.__split_fields ) with Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__velocity = (Dashboard__airspeed__rep.of_rep(([#"commercialplanesystem.adb" 21 0 0] ( [@GP_Shape:commercialplane_assign__add] [@GP_Sloc:commercialplanesystem.adb:21:94] [@vc:annotation] [@comment:      commercialPlane.dashboard_system.velocity := commercialPlane.dashboard_system.velocity + 10;                                                                                              ^ commercialplanesystem.adb:21:94:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:3] (Dashboard__airspeed.range_check_(((Dashboard__airspeed__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__velocity)) + (10 : int)))) )))) } } )))
      } } )))
     in (
      (Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content <- ( temp___296.Commercialplanesystem__plane.__split_fields ))))
    ) );
     raise Return__exc )
   with
    Return__exc -> ()
   end;
    begin ensures {true} let _ = (let _ = ((Dashboard__airspeed__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__velocity)) = (temp___old_297 + (10 : int))) in (
    ()))
    in () end  )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "decreaseairspeed" defined at commercialplanesystem.ads:54, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Commercialplanesystem__decreaseairspeed__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Integer as Integer
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard_String__Img as Standard_String__Img
 use        Standard__positive as Standard__positive
 use        Array__Int__Standard__character__Concat as Array__Int__Standard__character__Concat
 use        Standard__string as Standard__string
 use        Dashboard__dashboardsystem as Dashboard__dashboardsystem
 use        Commercialplanesystem__commercialplane as Commercialplanesystem__commercialplane
 use        Commercialplanesystem__plane as Commercialplanesystem__plane
 use        Commercialplanesystem__plane___axiom as Commercialplanesystem__plane___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom
 use        Commercialplanesystem__currentactivity as Commercialplanesystem__currentactivity
 use        Commercialplanesystem__currentactivity__rep as Commercialplanesystem__currentactivity__rep
 use        Dashboard__airspeed as Dashboard__airspeed
 use        Dashboard__airspeed__rep as Dashboard__airspeed__rep
 use        Temp___String_Literal_301 as Temp___String_Literal_301
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Commercialplanesystem__landinggear___axiom as Commercialplanesystem__landinggear___axiom
 use        Commercialplanesystem__currentactivity___axiom as Commercialplanesystem__currentactivity___axiom
 use        Commercialplanesystem__passengers___axiom as Commercialplanesystem__passengers___axiom
 use        Commercialplanesystem__plane___axiom as Commercialplanesystem__plane___axiom
 use        Commercialplanesystem__commercialplane___axiom as Commercialplanesystem__commercialplane___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom
 use        Engine__engine_status___axiom as Engine__engine_status___axiom
 use        Engine__engine_state___axiom as Engine__engine_state___axiom
 use        Door__door_state___axiom as Door__door_state___axiom
 use        Door__doorsystem___axiom as Door__doorsystem___axiom
 use        Dashboard__fuel___axiom as Dashboard__fuel___axiom
 use        Dashboard__airspeed___axiom as Dashboard__airspeed___axiom
 use        Dashboard__altitude___axiom as Dashboard__altitude___axiom
 use        Dashboard__dashboardsystem___axiom as Dashboard__dashboardsystem___axiom
 use        Warningsystem__warninglight___axiom as Warningsystem__warninglight___axiom
 use        Warningsystem__warning_system___axiom as Warningsystem__warning_system___axiom

 let def [#"commercialplanesystem.ads" 54 0 0][@GP_Subp:commercialplanesystem.ads:54] 
   (__void_param : unit)
  requires { [#"commercialplanesystem.ads" 54 0 0] true }
  ensures { [#"commercialplanesystem.ads" 54 0 0] ([#"commercialplanesystem.ads" 57 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Shape:pragargs__cmp] [@model_vc_post] [@GP_Id:7] [@comment:        Post => commercialPlane.dashboard_system.velocity = commercialPlane.dashboard_system.velocity'Old - 10;                 ^ commercialplanesystem.ads:57:17:VC_POSTCONDITION] [@GP_Sloc:commercialplanesystem.ads:57:17] ( [@GP_Pretty_Ada:19792] [@GP_Sloc:commercialplanesystem.ads:57:17] ((Dashboard__airspeed__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__velocity) = ((Dashboard__airspeed__rep.to_rep (old { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__velocity )) - (10 : int))) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram commercialplanesystem.ads:54 *)
  ;
   assume {  (Commercialplanesystem__plane___axiom.dynamic_invariant { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram commercialplanesystem.ads:54 *)
  ;
  () (* Check for RTE in the Pre of the subprogram commercialplanesystem.ads:54 *)
  ;
   begin ensures {true} let _ = (let _ = (Boolean.andb((Boolean.andb(((Commercialplanesystem__currentactivity__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__mode)) = (2 : int))) (((Dashboard__airspeed__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__velocity)) <= (1000 : int))))) (((Dashboard__airspeed__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__velocity)) >= (250 : int)))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram commercialplanesystem.ads:54 *)
  ;
   assume {  ( ( ( [@GP_Pretty_Ada:3144] ((Commercialplanesystem__currentactivity__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__mode) = (2 : int)) ) /\ ( [@GP_Pretty_Ada:3152] ((Dashboard__airspeed__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__velocity) <= (1000 : int)) ) ) /\ ( [@GP_Pretty_Ada:3160] ((Dashboard__airspeed__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__velocity) >= (250 : int)) ) ) };
   begin ensures {true} let _ = (let _ = { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__velocity in (
   ()))
   in () end ;
  (let temp___old_304 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
  ensures { (result = (Dashboard__airspeed__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__velocity))} 
  in _f) in (
   (  try
    ( ();
    ( [@GP_Sloc:commercialplanesystem.adb:26:10] ([#"commercialplanesystem.adb" 26 0 0] ()) );
    ( [@GP_Sloc:commercialplanesystem.adb:26:44] ([#"commercialplanesystem.adb" 26 0 0] ()) );
    ( [@GP_Sloc:commercialplanesystem.adb:26:98] ([#"commercialplanesystem.adb" 26 0 0] ()) );
    ( [@GP_Sloc:commercialplanesystem.adb:26:7] ([#"commercialplanesystem.adb" 26 0 0] (if (( ([#"commercialplanesystem.adb" 26 0 0] [#"commercialplanesystem.adb" 26 0 0] (([@branch_id=2430] Main.spark__branch).bool__content <- ( (Boolean.andb((Boolean.andb(((Commercialplanesystem__currentactivity__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__mode)) = (2 : int))) (((Dashboard__airspeed__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__velocity)) <= (1000 : int))))) (((Dashboard__airspeed__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__velocity)) >= (250 : int)))) )));
    ( [@branch_id=2430] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:commercialplanesystem.adb:27:10] ([#"commercialplanesystem.adb" 27 0 0] ()) );
     ( [@GP_Sloc:commercialplanesystem.adb:27:55] ([#"commercialplanesystem.adb" 27 0 0] ()) );
     ( [@GP_Sloc:commercialplanesystem.adb:27:52] ([#"commercialplanesystem.adb" 27 0 0] (let temp___300 [@mlw:proxy_symbol] [@introduced] = (let temp___299 [@mlw:proxy_symbol] [@introduced] = { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content } in (
      ( [#"commercialplanesystem.adb" 27 0 0] begin ensures {true} let _ = (let _ = temp___299.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system in (
       ()))
       in () end ;
      { ( temp___299 ) with Commercialplanesystem__plane.__split_fields = { ( temp___299.Commercialplanesystem__plane.__split_fields ) with Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system = (let temp___298 [@mlw:proxy_symbol] [@introduced] = { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system in (
       ( [#"commercialplanesystem.adb" 27 0 0] begin ensures {true} let _ = (let _ = temp___298.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__velocity in (
        ()))
        in () end ;
       { ( temp___298 ) with Dashboard__dashboardsystem.__split_fields = { ( temp___298.Dashboard__dashboardsystem.__split_fields ) with Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__velocity = (Dashboard__airspeed__rep.of_rep(([#"commercialplanesystem.adb" 27 0 0] ( [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:commercialplanesystem.adb:27:97] [@comment:         commercialPlane.dashboard_system.velocity := commercialPlane.dashboard_system.velocity - 10;                                                                                                 ^ commercialplanesystem.adb:27:97:VC_RANGE_CHECK] [@GP_Id:5] [@GP_Shape:if__commercialplane_assign__sub] (Dashboard__airspeed.range_check_(((Dashboard__airspeed__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__velocity)) - (10 : int)))) )))) } } )))
       } } )))
      in (
       (Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content <- ( temp___300.Commercialplanesystem__plane.__split_fields ))))
     ) );
     ( [@GP_Sloc:commercialplanesystem.adb:28:10] ([#"commercialplanesystem.adb" 28 0 0] ()) );
     ( [@GP_Sloc:commercialplanesystem.adb:28:10] ([#"commercialplanesystem.adb" 28 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((let temp___303 [@mlw:proxy_symbol] [@introduced] = (Standard_String__Img.to_string((Dashboard__airspeed.attr__ATTRIBUTE_IMAGE((Dashboard__airspeed__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__velocity))))) ((7 : int))) in (
     (let temp___302 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_301.temp___String_Literal_301(())) in (
      (Standard__string.of_array((Array__Int__Standard__character__Concat.concat(temp___302) ((1 : int)) ((42 : int)) ((Standard__string.to_array(temp___303))) ((Standard__string.first(temp___303))) ((Standard__string.last(temp___303))))) ((1 : int)) (([#"commercialplanesystem.adb" 28 0 0] ( [@GP_Shape:if__call_put_line__2__concat] [@comment:         Put_Line("Slowing down. commercialPlane velocity is "&commercialPlane.dashboard_system.velocity'Image);                                                               ^ commercialplanesystem.adb:28:63:VC_RANGE_CHECK] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:commercialplanesystem.adb:28:63] [@GP_Id:6] (Standard__positive.range_check_((((1 : int) + ((Integer.length((1 : int)) ((42 : int))) + (Integer.length((Standard__string.first(temp___303))) ((Standard__string.last(temp___303)))))) - (1 : int)))) ))))))
     ))
     )) )) ) )) else (
     ()))) );
     raise Return__exc )
   with
    Return__exc -> ()
   end;
    begin ensures {true} let _ = (let _ = ((Dashboard__airspeed__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__velocity)) = (temp___old_304 - (10 : int))) in (
    ()))
    in () end  )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "increasealtitude" defined at commercialplanesystem.ads:59, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Commercialplanesystem__increasealtitude__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Dashboard__dashboardsystem as Dashboard__dashboardsystem
 use        Commercialplanesystem__commercialplane as Commercialplanesystem__commercialplane
 use        Commercialplanesystem__plane as Commercialplanesystem__plane
 use        Commercialplanesystem__plane___axiom as Commercialplanesystem__plane___axiom
 use        Commercialplanesystem__landinggear as Commercialplanesystem__landinggear
 use        Commercialplanesystem__landinggear__rep as Commercialplanesystem__landinggear__rep
 use        Commercialplanesystem__currentactivity as Commercialplanesystem__currentactivity
 use        Commercialplanesystem__currentactivity__rep as Commercialplanesystem__currentactivity__rep
 use        Dashboard__altitude as Dashboard__altitude
 use        Dashboard__altitude__rep as Dashboard__altitude__rep
 use        Commercialplanesystem__landinggear___axiom as Commercialplanesystem__landinggear___axiom
 use        Commercialplanesystem__currentactivity___axiom as Commercialplanesystem__currentactivity___axiom
 use        Commercialplanesystem__passengers___axiom as Commercialplanesystem__passengers___axiom
 use        Commercialplanesystem__plane___axiom as Commercialplanesystem__plane___axiom
 use        Commercialplanesystem__commercialplane___axiom as Commercialplanesystem__commercialplane___axiom
 use        Engine__engine_status___axiom as Engine__engine_status___axiom
 use        Engine__engine_state___axiom as Engine__engine_state___axiom
 use        Door__door_state___axiom as Door__door_state___axiom
 use        Door__doorsystem___axiom as Door__doorsystem___axiom
 use        Dashboard__fuel___axiom as Dashboard__fuel___axiom
 use        Dashboard__airspeed___axiom as Dashboard__airspeed___axiom
 use        Dashboard__altitude___axiom as Dashboard__altitude___axiom
 use        Dashboard__dashboardsystem___axiom as Dashboard__dashboardsystem___axiom
 use        Warningsystem__warninglight___axiom as Warningsystem__warninglight___axiom
 use        Warningsystem__warning_system___axiom as Warningsystem__warning_system___axiom

 let def [#"commercialplanesystem.ads" 59 0 0][@GP_Subp:commercialplanesystem.ads:59] 
   (__void_param : unit)
  requires { [#"commercialplanesystem.ads" 59 0 0] true }
  ensures { [#"commercialplanesystem.ads" 59 0 0] ([#"commercialplanesystem.ads" 62 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Shape:pragargs__cmp] [@comment:        Post => commercialPlane.dashboard_system.height = commercialPlane.dashboard_system.height'Old + 50;                 ^ commercialplanesystem.ads:62:17:VC_POSTCONDITION] [@model_vc_post] [@GP_Sloc:commercialplanesystem.ads:62:17] [@GP_Id:9] ( [@GP_Pretty_Ada:19865] [@GP_Sloc:commercialplanesystem.ads:62:17] ((Dashboard__altitude__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__height) = ((Dashboard__altitude__rep.to_rep (old { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__height )) + (50 : int))) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram commercialplanesystem.ads:59 *)
  ;
   assume {  (Commercialplanesystem__plane___axiom.dynamic_invariant { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram commercialplanesystem.ads:59 *)
  ;
  () (* Check for RTE in the Pre of the subprogram commercialplanesystem.ads:59 *)
  ;
   begin ensures {true} let _ = (let _ = (Boolean.andb((Boolean.andb(((Commercialplanesystem__currentactivity__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__mode)) = (0 : int))) (((Dashboard__altitude__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__height)) >= (0 : int))))) (((Dashboard__altitude__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__height)) < (500 : int)))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram commercialplanesystem.ads:59 *)
  ;
   assume {  ( ( ( [@GP_Pretty_Ada:3202] ((Commercialplanesystem__currentactivity__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__mode) = (0 : int)) ) /\ ( [@GP_Pretty_Ada:3210] ((Dashboard__altitude__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__height) >= (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:3218] ((Dashboard__altitude__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__height) < (500 : int)) ) ) };
   begin ensures {true} let _ = (let _ = { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__height in (
   ()))
   in () end ;
  (let temp___old_310 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
  ensures { (result = (Dashboard__altitude__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__height))} 
  in _f) in (
   (  try
    ( ();
    ( [@GP_Sloc:commercialplanesystem.adb:34:7] ([#"commercialplanesystem.adb" 34 0 0] ()) );
    ( [@GP_Sloc:commercialplanesystem.adb:34:50] ([#"commercialplanesystem.adb" 34 0 0] ()) );
    ( [@GP_Sloc:commercialplanesystem.adb:34:47] ([#"commercialplanesystem.adb" 34 0 0] (let temp___307 [@mlw:proxy_symbol] [@introduced] = (let temp___306 [@mlw:proxy_symbol] [@introduced] = { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content } in (
     ( [#"commercialplanesystem.adb" 34 0 0] begin ensures {true} let _ = (let _ = temp___306.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system in (
      ()))
      in () end ;
     { ( temp___306 ) with Commercialplanesystem__plane.__split_fields = { ( temp___306.Commercialplanesystem__plane.__split_fields ) with Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system = (let temp___305 [@mlw:proxy_symbol] [@introduced] = { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system in (
      ( [#"commercialplanesystem.adb" 34 0 0] begin ensures {true} let _ = (let _ = temp___305.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__height in (
       ()))
       in () end ;
      { ( temp___305 ) with Dashboard__dashboardsystem.__split_fields = { ( temp___305.Dashboard__dashboardsystem.__split_fields ) with Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__height = (Dashboard__altitude__rep.of_rep(([#"commercialplanesystem.adb" 34 0 0] ( [@comment:      commercialPlane.dashboard_system.height := commercialPlane.dashboard_system.height + 50;                                                                                          ^ commercialplanesystem.adb:34:90:VC_RANGE_CHECK] [@GP_Shape:commercialplane_assign__add] [@vc:annotation] [@GP_Sloc:commercialplanesystem.adb:34:90] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:8] (Dashboard__altitude.range_check_(((Dashboard__altitude__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__height)) + (50 : int)))) )))) } } )))
      } } )))
     in (
      (Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content <- ( temp___307.Commercialplanesystem__plane.__split_fields ))))
    ) );
    ( [@GP_Sloc:commercialplanesystem.adb:35:11] ([#"commercialplanesystem.adb" 35 0 0] ()) );
    ( [@GP_Sloc:commercialplanesystem.adb:35:61] ([#"commercialplanesystem.adb" 35 0 0] ()) );
    ( [@GP_Sloc:commercialplanesystem.adb:35:7] ([#"commercialplanesystem.adb" 35 0 0] (if (( ([#"commercialplanesystem.adb" 35 0 0] [#"commercialplanesystem.adb" 35 0 0] (([@branch_id=2501] Main.spark__branch).bool__content <- ( (Boolean.andb(((Dashboard__altitude__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__height)) > (100 : int))) (((Commercialplanesystem__landinggear__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__landgear)) = (0 : int)))) )));
    ( [@branch_id=2501] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:commercialplanesystem.adb:36:10] ([#"commercialplanesystem.adb" 36 0 0] ()) );
     ( [@GP_Sloc:commercialplanesystem.adb:36:35] ([#"commercialplanesystem.adb" 36 0 0] (let temp___309 [@mlw:proxy_symbol] [@introduced] = (let temp___308 [@mlw:proxy_symbol] [@introduced] = { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content } in (
      ( [#"commercialplanesystem.adb" 36 0 0] begin ensures {true} let _ = (let _ = temp___308.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__landgear in (
       ()))
       in () end ;
      { ( temp___308 ) with Commercialplanesystem__plane.__split_fields = { ( temp___308.Commercialplanesystem__plane.__split_fields ) with Commercialplanesystem__plane.rec__commercialplanesystem__plane__landgear = (Commercialplanesystem__landinggear__rep.of_rep((1 : int))) } } )))
      in (
      [#"commercialplanesystem.adb" 36 0 0] (Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content <- ( temp___309.Commercialplanesystem__plane.__split_fields ))))
     ) ) )) else (
     ()))) );
     raise Return__exc )
   with
    Return__exc -> ()
   end;
    begin ensures {true} let _ = (let _ = ((Dashboard__altitude__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__height)) = (temp___old_310 + (50 : int))) in (
    ()))
    in () end  )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "decreasealtitude" defined at commercialplanesystem.ads:64, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Commercialplanesystem__decreasealtitude__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Integer as Integer
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard_String__Img as Standard_String__Img
 use        Standard__positive as Standard__positive
 use        Array__Int__Standard__character__Concat as Array__Int__Standard__character__Concat
 use        Standard__string as Standard__string
 use        Dashboard__dashboardsystem as Dashboard__dashboardsystem
 use        Commercialplanesystem__commercialplane as Commercialplanesystem__commercialplane
 use        Commercialplanesystem__plane as Commercialplanesystem__plane
 use        Commercialplanesystem__plane___axiom as Commercialplanesystem__plane___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom
 use        Commercialplanesystem__currentactivity as Commercialplanesystem__currentactivity
 use        Commercialplanesystem__currentactivity__rep as Commercialplanesystem__currentactivity__rep
 use        Dashboard__altitude as Dashboard__altitude
 use        Dashboard__altitude__rep as Dashboard__altitude__rep
 use        Temp___String_Literal_314 as Temp___String_Literal_314
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Commercialplanesystem__landinggear___axiom as Commercialplanesystem__landinggear___axiom
 use        Commercialplanesystem__currentactivity___axiom as Commercialplanesystem__currentactivity___axiom
 use        Commercialplanesystem__passengers___axiom as Commercialplanesystem__passengers___axiom
 use        Commercialplanesystem__plane___axiom as Commercialplanesystem__plane___axiom
 use        Commercialplanesystem__commercialplane___axiom as Commercialplanesystem__commercialplane___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom
 use        Engine__engine_status___axiom as Engine__engine_status___axiom
 use        Engine__engine_state___axiom as Engine__engine_state___axiom
 use        Door__door_state___axiom as Door__door_state___axiom
 use        Door__doorsystem___axiom as Door__doorsystem___axiom
 use        Dashboard__fuel___axiom as Dashboard__fuel___axiom
 use        Dashboard__airspeed___axiom as Dashboard__airspeed___axiom
 use        Dashboard__altitude___axiom as Dashboard__altitude___axiom
 use        Dashboard__dashboardsystem___axiom as Dashboard__dashboardsystem___axiom
 use        Warningsystem__warninglight___axiom as Warningsystem__warninglight___axiom
 use        Warningsystem__warning_system___axiom as Warningsystem__warning_system___axiom

 let def [#"commercialplanesystem.ads" 64 0 0][@GP_Subp:commercialplanesystem.ads:64] 
   (__void_param : unit)
  requires { [#"commercialplanesystem.ads" 64 0 0] true }
  ensures { [#"commercialplanesystem.ads" 64 0 0] ([#"commercialplanesystem.ads" 67 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Id:12] [@GP_Shape:pragargs__cmp] [@model_vc_post] [@comment:        Post => commercialPlane.dashboard_system.height = commercialPlane.dashboard_system.height'Old - 50;                 ^ commercialplanesystem.ads:67:17:VC_POSTCONDITION] [@GP_Sloc:commercialplanesystem.ads:67:17] ( [@GP_Pretty_Ada:19940] [@GP_Sloc:commercialplanesystem.ads:67:17] ((Dashboard__altitude__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__height) = ((Dashboard__altitude__rep.to_rep (old { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__height )) - (50 : int))) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram commercialplanesystem.ads:64 *)
  ;
   assume {  (Commercialplanesystem__plane___axiom.dynamic_invariant { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram commercialplanesystem.ads:64 *)
  ;
  () (* Check for RTE in the Pre of the subprogram commercialplanesystem.ads:64 *)
  ;
   begin ensures {true} let _ = (let _ = (Boolean.andb((Boolean.andb(((Commercialplanesystem__currentactivity__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__mode)) = (2 : int))) (((Dashboard__altitude__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__height)) <= (1200 : int))))) (((Dashboard__altitude__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__height)) > (500 : int)))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram commercialplanesystem.ads:64 *)
  ;
   assume {  ( ( ( [@GP_Pretty_Ada:3262] ((Commercialplanesystem__currentactivity__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__mode) = (2 : int)) ) /\ ( [@GP_Pretty_Ada:3270] ((Dashboard__altitude__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__height) <= (1200 : int)) ) ) /\ ( [@GP_Pretty_Ada:3278] ((Dashboard__altitude__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__height) > (500 : int)) ) ) };
   begin ensures {true} let _ = (let _ = { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__height in (
   ()))
   in () end ;
  (let temp___old_317 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
  ensures { (result = (Dashboard__altitude__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__height))} 
  in _f) in (
   (  try
    ( ();
    ( [@GP_Sloc:commercialplanesystem.adb:42:7] ([#"commercialplanesystem.adb" 42 0 0] ()) );
    ( [@GP_Sloc:commercialplanesystem.adb:42:50] ([#"commercialplanesystem.adb" 42 0 0] ()) );
    ( [@GP_Sloc:commercialplanesystem.adb:42:47] ([#"commercialplanesystem.adb" 42 0 0] (let temp___313 [@mlw:proxy_symbol] [@introduced] = (let temp___312 [@mlw:proxy_symbol] [@introduced] = { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content } in (
     ( [#"commercialplanesystem.adb" 42 0 0] begin ensures {true} let _ = (let _ = temp___312.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system in (
      ()))
      in () end ;
     { ( temp___312 ) with Commercialplanesystem__plane.__split_fields = { ( temp___312.Commercialplanesystem__plane.__split_fields ) with Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system = (let temp___311 [@mlw:proxy_symbol] [@introduced] = { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system in (
      ( [#"commercialplanesystem.adb" 42 0 0] begin ensures {true} let _ = (let _ = temp___311.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__height in (
       ()))
       in () end ;
      { ( temp___311 ) with Dashboard__dashboardsystem.__split_fields = { ( temp___311.Dashboard__dashboardsystem.__split_fields ) with Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__height = (Dashboard__altitude__rep.of_rep(([#"commercialplanesystem.adb" 42 0 0] ( [@GP_Id:10] [@comment:      commercialPlane.dashboard_system.height := commercialPlane.dashboard_system.height - 50;                                                                                          ^ commercialplanesystem.adb:42:90:VC_RANGE_CHECK] [@vc:annotation] [@GP_Shape:commercialplane_assign__sub] [@GP_Sloc:commercialplanesystem.adb:42:90] [@GP_Reason:VC_RANGE_CHECK] (Dashboard__altitude.range_check_(((Dashboard__altitude__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__height)) - (50 : int)))) )))) } } )))
      } } )))
     in (
      (Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content <- ( temp___313.Commercialplanesystem__plane.__split_fields ))))
    ) );
    ( [@GP_Sloc:commercialplanesystem.adb:43:7] ([#"commercialplanesystem.adb" 43 0 0] ()) );
    ( [@GP_Sloc:commercialplanesystem.adb:43:7] ([#"commercialplanesystem.adb" 43 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((let temp___316 [@mlw:proxy_symbol] [@introduced] = (Standard_String__Img.to_string((Dashboard__altitude.attr__ATTRIBUTE_IMAGE((Dashboard__altitude__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__height))))) ((7 : int))) in (
    (let temp___315 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_314.temp___String_Literal_314(())) in (
     (Standard__string.of_array((Array__Int__Standard__character__Concat.concat(temp___315) ((1 : int)) ((49 : int)) ((Standard__string.to_array(temp___316))) ((Standard__string.first(temp___316))) ((Standard__string.last(temp___316))))) ((1 : int)) (([#"commercialplanesystem.adb" 43 0 0] ( [@comment:      Put_Line("Decreasing altitude. commercialPlane altitude is "&commercialPlane.dashboard_system.height'Image);                                                                   ^ commercialplanesystem.adb:43:67:VC_RANGE_CHECK] [@GP_Id:11] [@GP_Sloc:commercialplanesystem.adb:43:67] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:call_put_line__2__concat] (Standard__positive.range_check_((((1 : int) + ((Integer.length((1 : int)) ((49 : int))) + (Integer.length((Standard__string.first(temp___316))) ((Standard__string.last(temp___316)))))) - (1 : int)))) ))))))
    ))
    )) )) );
     raise Return__exc )
   with
    Return__exc -> ()
   end;
    begin ensures {true} let _ = (let _ = ((Dashboard__altitude__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__height)) = (temp___old_317 - (50 : int))) in (
    ()))
    in () end  )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "addpassenger" defined at commercialplanesystem.ads:69, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Commercialplanesystem__addpassenger__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Door__doorsystem as Door__doorsystem
 use        Commercialplanesystem__commercialplane as Commercialplanesystem__commercialplane
 use        Commercialplanesystem__plane as Commercialplanesystem__plane
 use        Commercialplanesystem__plane___axiom as Commercialplanesystem__plane___axiom
 use        Commercialplanesystem__currentactivity as Commercialplanesystem__currentactivity
 use        Commercialplanesystem__currentactivity__rep as Commercialplanesystem__currentactivity__rep
 use        Commercialplanesystem__passengers as Commercialplanesystem__passengers
 use        Commercialplanesystem__passengers__rep as Commercialplanesystem__passengers__rep
 use        Door__door_state as Door__door_state
 use        Door__door_state__rep as Door__door_state__rep
 use        Commercialplanesystem__landinggear___axiom as Commercialplanesystem__landinggear___axiom
 use        Commercialplanesystem__currentactivity___axiom as Commercialplanesystem__currentactivity___axiom
 use        Commercialplanesystem__passengers___axiom as Commercialplanesystem__passengers___axiom
 use        Commercialplanesystem__plane___axiom as Commercialplanesystem__plane___axiom
 use        Commercialplanesystem__commercialplane___axiom as Commercialplanesystem__commercialplane___axiom
 use        Engine__engine_status___axiom as Engine__engine_status___axiom
 use        Engine__engine_state___axiom as Engine__engine_state___axiom
 use        Door__door_state___axiom as Door__door_state___axiom
 use        Door__doorsystem___axiom as Door__doorsystem___axiom
 use        Dashboard__fuel___axiom as Dashboard__fuel___axiom
 use        Dashboard__airspeed___axiom as Dashboard__airspeed___axiom
 use        Dashboard__altitude___axiom as Dashboard__altitude___axiom
 use        Dashboard__dashboardsystem___axiom as Dashboard__dashboardsystem___axiom
 use        Warningsystem__warninglight___axiom as Warningsystem__warninglight___axiom
 use        Warningsystem__warning_system___axiom as Warningsystem__warning_system___axiom

 let def [#"commercialplanesystem.ads" 69 0 0][@GP_Subp:commercialplanesystem.ads:69] 
   (__void_param : unit)
  requires { [#"commercialplanesystem.ads" 69 0 0] true }
  ensures { [#"commercialplanesystem.ads" 69 0 0] ([#"commercialplanesystem.ads" 72 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Sloc:commercialplanesystem.ads:72:14] [@GP_Id:14] [@comment:     Post => commercialPlane.num_passengers = commercialPlane.num_passengers'Old + 1;              ^ commercialplanesystem.ads:72:14:VC_POSTCONDITION] [@GP_Shape:pragargs__cmp] [@model_vc_post] ( [@GP_Sloc:commercialplanesystem.ads:72:14] [@GP_Pretty_Ada:20007] ((Commercialplanesystem__passengers__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__num_passengers) = ((Commercialplanesystem__passengers__rep.to_rep (old { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__num_passengers )) + (1 : int))) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram commercialplanesystem.ads:69 *)
  ;
   assume {  (Commercialplanesystem__plane___axiom.dynamic_invariant { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram commercialplanesystem.ads:69 *)
  ;
  () (* Check for RTE in the Pre of the subprogram commercialplanesystem.ads:69 *)
  ;
   begin ensures {true} let _ = (let _ = (Boolean.andb((Boolean.andb(((Commercialplanesystem__currentactivity__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__mode)) = (3 : int))) (((Door__door_state__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__extdoor.Door__doorsystem.__split_fields.Door__doorsystem.rec__door__doorsystem__door)) = (0 : int))))) (((Commercialplanesystem__passengers__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__num_passengers)) < (100 : int)))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram commercialplanesystem.ads:69 *)
  ;
   assume {  ( ( ( [@GP_Pretty_Ada:3320] ((Commercialplanesystem__currentactivity__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__mode) = (3 : int)) ) /\ ( [@GP_Pretty_Ada:3328] ((Door__door_state__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__extdoor.Door__doorsystem.__split_fields.Door__doorsystem.rec__door__doorsystem__door) = (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:3334] ((Commercialplanesystem__passengers__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__num_passengers) < (100 : int)) ) ) };
   begin ensures {true} let _ = (let _ = { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__num_passengers in (
   ()))
   in () end ;
  (let temp___old_320 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
  ensures { (result = (Commercialplanesystem__passengers__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__num_passengers))} 
  in _f) in (
   (  try
    ( ();
    ( [@GP_Sloc:commercialplanesystem.adb:48:9] ([#"commercialplanesystem.adb" 48 0 0] ()) );
    ( [@GP_Sloc:commercialplanesystem.adb:48:41] ([#"commercialplanesystem.adb" 48 0 0] ()) );
    ( [@GP_Sloc:commercialplanesystem.adb:48:81] ([#"commercialplanesystem.adb" 48 0 0] ()) );
    ( [@GP_Sloc:commercialplanesystem.adb:48:6] ([#"commercialplanesystem.adb" 48 0 0] (if (( ([#"commercialplanesystem.adb" 48 0 0] [#"commercialplanesystem.adb" 48 0 0] (([@branch_id=2569] Main.spark__branch).bool__content <- ( (Boolean.andb((Boolean.andb(((Commercialplanesystem__currentactivity__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__mode)) = (3 : int))) (((Door__door_state__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__extdoor.Door__doorsystem.__split_fields.Door__doorsystem.rec__door__doorsystem__door)) = (0 : int))))) (((Commercialplanesystem__passengers__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__num_passengers)) < (100 : int)))) )));
    ( [@branch_id=2569] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:commercialplanesystem.adb:49:10] ([#"commercialplanesystem.adb" 49 0 0] ()) );
     ( [@GP_Sloc:commercialplanesystem.adb:49:44] ([#"commercialplanesystem.adb" 49 0 0] ()) );
     ( [@GP_Sloc:commercialplanesystem.adb:49:41] ([#"commercialplanesystem.adb" 49 0 0] (let temp___319 [@mlw:proxy_symbol] [@introduced] = (let temp___318 [@mlw:proxy_symbol] [@introduced] = { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content } in (
      ( [#"commercialplanesystem.adb" 49 0 0] begin ensures {true} let _ = (let _ = temp___318.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__num_passengers in (
       ()))
       in () end ;
      { ( temp___318 ) with Commercialplanesystem__plane.__split_fields = { ( temp___318.Commercialplanesystem__plane.__split_fields ) with Commercialplanesystem__plane.rec__commercialplanesystem__plane__num_passengers = (Commercialplanesystem__passengers__rep.of_rep(([#"commercialplanesystem.adb" 49 0 0] ( [@GP_Id:13] [@GP_Sloc:commercialplanesystem.adb:49:75] [@vc:annotation] [@comment:         commercialPlane.num_passengers := commercialPlane.num_passengers + 1;                                                                           ^ commercialplanesystem.adb:49:75:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:if__commercialplane_assign__add] (Commercialplanesystem__passengers.range_check_(((Commercialplanesystem__passengers__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__num_passengers)) + (1 : int)))) )))) } } )))
      in (
       (Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content <- ( temp___319.Commercialplanesystem__plane.__split_fields ))))
     ) ) )) else (
     ()))) );
     raise Return__exc )
   with
    Return__exc -> ()
   end;
    begin ensures {true} let _ = (let _ = ((Commercialplanesystem__passengers__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__num_passengers)) = (temp___old_320 + (1 : int))) in (
    ()))
    in () end  )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "adjustfuelusage" defined at commercialplanesystem.ads:74, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Commercialplanesystem__adjustfuelusage__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Dashboard__dashboardsystem as Dashboard__dashboardsystem
 use        Commercialplanesystem__commercialplane as Commercialplanesystem__commercialplane
 use        Commercialplanesystem__plane as Commercialplanesystem__plane
 use        Commercialplanesystem__plane___axiom as Commercialplanesystem__plane___axiom
 use        Commercialplanesystem__currentactivity as Commercialplanesystem__currentactivity
 use        Commercialplanesystem__currentactivity__rep as Commercialplanesystem__currentactivity__rep
 use        Dashboard__fuel as Dashboard__fuel
 use        Dashboard__fuel__rep as Dashboard__fuel__rep
 use        Commercialplanesystem__landinggear___axiom as Commercialplanesystem__landinggear___axiom
 use        Commercialplanesystem__currentactivity___axiom as Commercialplanesystem__currentactivity___axiom
 use        Commercialplanesystem__passengers___axiom as Commercialplanesystem__passengers___axiom
 use        Commercialplanesystem__plane___axiom as Commercialplanesystem__plane___axiom
 use        Commercialplanesystem__commercialplane___axiom as Commercialplanesystem__commercialplane___axiom
 use        Engine__engine_status___axiom as Engine__engine_status___axiom
 use        Engine__engine_state___axiom as Engine__engine_state___axiom
 use        Door__door_state___axiom as Door__door_state___axiom
 use        Door__doorsystem___axiom as Door__doorsystem___axiom
 use        Dashboard__fuel___axiom as Dashboard__fuel___axiom
 use        Dashboard__airspeed___axiom as Dashboard__airspeed___axiom
 use        Dashboard__altitude___axiom as Dashboard__altitude___axiom
 use        Dashboard__dashboardsystem___axiom as Dashboard__dashboardsystem___axiom
 use        Warningsystem__warninglight___axiom as Warningsystem__warninglight___axiom
 use        Warningsystem__warning_system___axiom as Warningsystem__warning_system___axiom

 let def [#"commercialplanesystem.ads" 74 0 0][@GP_Subp:commercialplanesystem.ads:74] 
   (__void_param : unit)
  requires { [#"commercialplanesystem.ads" 74 0 0] true }
  ensures { [#"commercialplanesystem.ads" 74 0 0] ([#"commercialplanesystem.ads" 77 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Id:16] [@GP_Shape:pragargs__cmp] [@comment:        Post => commercialPlane.dashboard_system.fuel_tank = commercialPlane.dashboard_system.fuel_tank'Old - 15;                 ^ commercialplanesystem.ads:77:17:VC_POSTCONDITION] [@model_vc_post] [@GP_Sloc:commercialplanesystem.ads:77:17] ( [@GP_Pretty_Ada:20072] [@GP_Sloc:commercialplanesystem.ads:77:17] ((Dashboard__fuel__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__fuel_tank) = ((Dashboard__fuel__rep.to_rep (old { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__fuel_tank )) - (15 : int))) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram commercialplanesystem.ads:74 *)
  ;
   assume {  (Commercialplanesystem__plane___axiom.dynamic_invariant { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram commercialplanesystem.ads:74 *)
  ;
  () (* Check for RTE in the Pre of the subprogram commercialplanesystem.ads:74 *)
  ;
   begin ensures {true} let _ = (let _ = (Boolean.andb(((Commercialplanesystem__currentactivity__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__mode)) = (2 : int))) (((Dashboard__fuel__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__fuel_tank)) >= (25 : int)))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram commercialplanesystem.ads:74 *)
  ;
   assume {  ( ( [@GP_Pretty_Ada:3372] ((Commercialplanesystem__currentactivity__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__mode) = (2 : int)) ) /\ ( [@GP_Pretty_Ada:3380] ((Dashboard__fuel__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__fuel_tank) >= (25 : int)) ) ) };
   begin ensures {true} let _ = (let _ = { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__fuel_tank in (
   ()))
   in () end ;
  (let temp___old_324 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
  ensures { (result = (Dashboard__fuel__rep.to_rep { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__fuel_tank))} 
  in _f) in (
   (  try
    ( ();
    ( [@GP_Sloc:commercialplanesystem.adb:55:10] ([#"commercialplanesystem.adb" 55 0 0] ()) );
    ( [@GP_Sloc:commercialplanesystem.adb:55:44] ([#"commercialplanesystem.adb" 55 0 0] ()) );
    ( [@GP_Sloc:commercialplanesystem.adb:55:7] ([#"commercialplanesystem.adb" 55 0 0] (if (( ([#"commercialplanesystem.adb" 55 0 0] [#"commercialplanesystem.adb" 55 0 0] (([@branch_id=2611] Main.spark__branch).bool__content <- ( (Boolean.andb(((Commercialplanesystem__currentactivity__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__mode)) = (2 : int))) (((Dashboard__fuel__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__fuel_tank)) >= (25 : int)))) )));
    ( [@branch_id=2611] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:commercialplanesystem.adb:56:10] ([#"commercialplanesystem.adb" 56 0 0] ()) );
     ( [@GP_Sloc:commercialplanesystem.adb:56:56] ([#"commercialplanesystem.adb" 56 0 0] ()) );
     ( [@GP_Sloc:commercialplanesystem.adb:56:53] ([#"commercialplanesystem.adb" 56 0 0] (let temp___323 [@mlw:proxy_symbol] [@introduced] = (let temp___322 [@mlw:proxy_symbol] [@introduced] = { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content } in (
      ( [#"commercialplanesystem.adb" 56 0 0] begin ensures {true} let _ = (let _ = temp___322.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system in (
       ()))
       in () end ;
      { ( temp___322 ) with Commercialplanesystem__plane.__split_fields = { ( temp___322.Commercialplanesystem__plane.__split_fields ) with Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system = (let temp___321 [@mlw:proxy_symbol] [@introduced] = { Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system in (
       ( [#"commercialplanesystem.adb" 56 0 0] begin ensures {true} let _ = (let _ = temp___321.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__fuel_tank in (
        ()))
        in () end ;
       { ( temp___321 ) with Dashboard__dashboardsystem.__split_fields = { ( temp___321.Dashboard__dashboardsystem.__split_fields ) with Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__fuel_tank = (Dashboard__fuel__rep.of_rep(([#"commercialplanesystem.adb" 56 0 0] ( [@GP_Id:15] [@vc:annotation] [@GP_Sloc:commercialplanesystem.adb:56:99] [@GP_Reason:VC_RANGE_CHECK] [@comment:         commercialPlane.dashboard_system.fuel_tank := commercialPlane.dashboard_system.fuel_tank - 15;                                                                                                   ^ commercialplanesystem.adb:56:99:VC_RANGE_CHECK] [@GP_Shape:if__commercialplane_assign__sub] (Dashboard__fuel.range_check_(((Dashboard__fuel__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__fuel_tank)) - (15 : int)))) )))) } } )))
       } } )))
      in (
       (Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content <- ( temp___323.Commercialplanesystem__plane.__split_fields ))))
     ) ) )) else (
     ()))) );
     raise Return__exc )
   with
    Return__exc -> ()
   end;
    begin ensures {true} let _ = (let _ = ((Dashboard__fuel__rep.to_rep({ Commercialplanesystem__plane.__split_fields = Commercialplanesystem__commercialplane.commercialplane__split_fields.Commercialplanesystem__plane.__split_fields__content }.Commercialplanesystem__plane.__split_fields.Commercialplanesystem__plane.rec__commercialplanesystem__plane__dashboard_system.Dashboard__dashboardsystem.__split_fields.Dashboard__dashboardsystem.rec__dashboard__dashboardsystem__fuel_tank)) = (temp___old_324 - (15 : int))) in (
    ()))
    in () end  )))
   )
end
